<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java注解反射</title>
      <link href="/2022/02/03/%E6%B3%A8%E8%A7%A3%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/02/03/%E6%B3%A8%E8%A7%A3%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<center><h1>注解反射</h1></center><h1 id="简介注解"><a href="#简介注解" class="headerlink" title="简介注解"></a>简介注解</h1><p>注解英文名<code>Annotation</code>是JDK开始引入的新技术</p><p>Annotation的作用:</p><ul><li>不是程序本身，可以对程序做出解释，这一点和注释(Comment)没什么区别</li><li>可以被其他程序读取（比如编译器）</li></ul><p>Annotation的格式:</p><ul><li>注解是以”@注释名”在代码中存在，还可以添加一些参数值,例如<code>@SuppressWarnings(Value=&quot;unuchecked&quot;)</code></li></ul><p>Annotation的使用</p><ul><li>可以附在package,class,method,field等上面，相当于给他们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问。</li></ul><h1 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h1><p>内置注解:</p><table><thead><tr><th>注解名</th><th>注解作用</th></tr></thead><tbody><tr><td>@Override</td><td>修饰子类重写父类的方法</td></tr><tr><td>@Deprecated</td><td>修饰已经过时的方法</td></tr><tr><td>@SuppressWarnings</td><td>镇压警告, 用于抑制编译时期的警告错误</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>和前两个有所不同,需要添加一定的参数,这些参数都已经定义好了的</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span> <span class="comment">// 镇压所有</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="comment">//.镇压未检查的</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;value=&#123;&quot;unchecked&quot;, &quot;deprecation&quot;&#125;)</span> <span class="comment">// 同时镇压未检查和过时的方法</span></span><br></pre></td></tr></table></figure><h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1><p>元注解的作用是负责解释其他注解的注解, Java定义了4个标准的meta-annotation类型,他们呢被用来提供其他annotation类型说明。</p><p>这些类型和它们所支持的类在java.lang.annotation包中可以找到(@Target,@Retention,@Documented,@Inherited)</p><ul><li><p>@Target: 用于描述注解的使用范围</p></li><li><p>@Retention: 表示需要在什么级别保持该注释信息，用于描述注解的生命周期</p><ul><li>(SOURCE &lt; CLASS &lt; RUNTIME)</li></ul></li><li><p>@Document: 说明该注解将包含在javadoc中</p></li><li><p>@Inherited: 说明子类可以继承父类中的该注解</p></li></ul><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><ul><li><p>@ interface 用来声明一个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式</span><br><span class="line">    <span class="keyword">public</span> @ <span class="class"><span class="keyword">interface</span> 注解名</span>&#123; 定义内容 &#125;</span><br></pre></td></tr></table></figure></li><li><p>其中的每一个方法实际上是声明了一个配置参数</p></li><li><p>方法的名称就是参数的名称</p></li><li><p>返回值类型就是参数的类型( 返回值只能是基本类型, Class, String,  enum )</p></li><li><p>可以通过default来声明参数的默认值</p></li><li><p>如果有一个参数成员，一般参数名为value</p></li><li><p>注解元素必须要有值，我们定义注解元素时，经常使用空字符串,0作为默认值</p></li></ul><p>定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义注解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">// 在方法上使用有效</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 在运行时有效</span></span><br><span class="line"><span class="meta">@Documented</span> <span class="comment">//表示是否将注解生成到文档里面</span></span><br><span class="line"><span class="meta">@Inherited</span> <span class="comment">// 是否让子类继承父类注解</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotationTest&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义注解参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义注解参数</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotationTest&#123;</span><br><span class="line">    <span class="comment">// 定义注解参数 格式:  数据类型 + 参数名 + ()</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> -1</span>; <span class="comment">// 默认值为-1 表示不存在</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    String[] array() <span class="keyword">default</span> &#123;<span class="string">&quot;test1&quot;</span>, <span class="string">&quot;test2&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射(Refection) 是Java被视为动态语言的关键，反射机制允许程序在执行期借助ReflectionAPI取得任何类的内部信息，并能直接操作任意对象的内部属性以及方法</p><p><code>Class c = Class.forName(&quot;java.lang.string&quot;);</code></p><p>加载完类之后，在堆内存的方法区中就产生了一个</p><p>Clas类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像是一面镜子，透过这个镜子看到类的结构，所以我们形象称为<code>反射</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正常方式:引入需要的&quot;包类&quot;名称 -&gt; 通过new实例化 -&gt; 取得示例对象</span><br><span class="line"></span><br><span class="line">反射方式: 实例化对象 -&gt; getClass() 方法 -&gt; 得到完整的&quot;包类&quot;名称</span><br></pre></td></tr></table></figure><p><code>优点</code></p><p>​    可以实现动态创建对象和编译，体现出很大的灵活性</p><p><code>缺点</code></p><p>​    对性能有影响，使用反射基本上就是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求，这类操作总是慢于执行相同的操作。</p><p><code>反射主要Api</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Class : 代表一个类</span><br><span class="line">java.lang.reflect.Method : 代表类的方法</span><br><span class="line">java.lang.reflect.Field : 代表类的成员变量</span><br><span class="line">java.lang.reflect.Constructor : 代表类的构造器</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>类名</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td>Class类</td><td>代表类的实体，在运行的Java应用程序中表示类和接口</td></tr><tr><td>Field类</td><td>代表类的成员变量（成员变量也称为类的属性）</td></tr><tr><td>Method类</td><td>代表类的方法</td></tr><tr><td>Constructor类</td><td>代表类的构造方法</td></tr></tbody></table><h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><p>Class代表类的实体，在运行的Java应用程序中表示类和接口。在这个类中提供了很多有用的方法，这里对他们简单的分类介绍。</p><ul><li>获得类相关的方法</li></ul><table><thead><tr><th><strong>方法</strong></th><th><strong>方法</strong></th></tr></thead><tbody><tr><td>asSubclass(Class<U> clazz)</td><td>把传递的类的对象转换成代表其子类的对象</td></tr><tr><td>Cast</td><td>把对象转换成代表类或是接口的对象</td></tr><tr><td>getClassLoader()</td><td>获得类的加载器</td></tr><tr><td>getClasses()</td><td>返回一个数组，数组中包含该类中所有公共类和接口类的对象</td></tr><tr><td>getDeclaredClasses()</td><td>返回一个数组，数组中包含该类中所有类和接口类的对象</td></tr><tr><td>forName(String className)</td><td>根据类名返回类的对象</td></tr><tr><td>getName()</td><td>获得类的完整路径名字</td></tr><tr><td>newInstance()</td><td>创建类的实例</td></tr><tr><td>getPackage()</td><td>获得类的包</td></tr><tr><td>getSimpleName()</td><td>获得类的名字</td></tr><tr><td>getSuperclass()</td><td>获得当前类继承的父类的名字</td></tr><tr><td>getInterfaces()</td><td>获得当前类实现的类或是接口</td></tr></tbody></table><p>获得类中属性相关的方法</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getField(String name)</td><td>获得某个公有的属性对象</td></tr><tr><td>getFields()</td><td>获得所有公有的属性对象</td></tr><tr><td>getDeclaredField(String name)</td><td>获得某个属性对象</td></tr><tr><td>getDeclaredFields()</td><td>获得所有属性对象</td></tr></tbody></table><p>获得类中注解相关的方法</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getAnnotation(Class<A> annotationClass)</td><td>返回该类中与参数类型匹配的公有注解对象</td></tr><tr><td>getAnnotations()</td><td>返回该类所有的公有注解对象</td></tr><tr><td>getDeclaredAnnotation(Class<A> annotationClass)</td><td>返回该类中与参数类型匹配的所有注解对象</td></tr><tr><td>getDeclaredAnnotations()</td><td>返回该类所有的注解对象</td></tr></tbody></table><p>获得类中构造器相关的方法</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getConstructor(Class…&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的公有构造方法</td></tr><tr><td>getConstructors()</td><td>获得该类的所有公有构造方法</td></tr><tr><td>getDeclaredConstructor(Class…&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的构造方法</td></tr><tr><td>getDeclaredConstructors()</td><td>获得该类所有构造方法</td></tr></tbody></table><p>获得类中方法相关的方法</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>获得该类某个公有的方法</td></tr><tr><td>getMethods()</td><td>获得该类所有公有的方法</td></tr><tr><td>getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>获得该类某个方法</td></tr><tr><td>getDeclaredMethods()</td><td>获得该类所有方法</td></tr></tbody></table><p>类中其他重要的方法</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>isAnnotation()</td><td>如果是注解类型则返回true</td></tr><tr><td>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</td><td>如果是指定类型注解类型则返回true</td></tr><tr><td>isAnonymousClass()</td><td>如果是匿名类则返回true</td></tr><tr><td>isArray()</td><td>如果是一个数组类则返回true</td></tr><tr><td>isEnum()</td><td>如果是枚举类则返回true</td></tr><tr><td>isInstance(Object obj)</td><td>如果obj是该类的实例则返回true</td></tr><tr><td>isInterface()</td><td>如果是接口类则返回true</td></tr><tr><td>isLocalClass()</td><td>如果是局部类则返回true</td></tr><tr><td>isMemberClass()</td><td>如果是内部类则返回true</td></tr></tbody></table><h1 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h1><p>代表类的成员变量（成员变量也称为类的属性)</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>equals(Object obj)</td><td>属性与obj相等则返回true</td></tr><tr><td>get(Object obj)</td><td>获得obj中对应的属性值</td></tr><tr><td>set(Object obj, Object value)</td><td>设置obj中对应属性值</td></tr></tbody></table><h1 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h1><p>代表类的方法。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>invoke(Object obj, Object… args)</td><td>传递object对象及参数调用该对象对应的方法</td></tr></tbody></table><h1 id="Constructor类"><a href="#Constructor类" class="headerlink" title="Constructor类"></a>Constructor类</h1><p>代表类的构造方法</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>newInstance(Object… initargs)</td><td>根据传递的参数创建类的对象</td></tr></tbody></table><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c1 = Preson,<span class="class"><span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure><p>若已知某个类的实例，调用该实例的getClass()方法获取Clas对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c2 = person.getClass();</span><br></pre></td></tr></table></figure><p>若已知一个类的全类名，并且类在类路径下，可通过Class类的静态方法forName()获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c3 = Class.forName(<span class="string">&quot;dome.Student&quot;</span>);</span><br></pre></td></tr></table></figure><p>内置基本数据类型可以直接用类名.Type</p><p>以下类型可以有Class对象</p><ol><li>class 外部类、成员(成员内部类，静态内部类), 局部内部类, 匿名内部类</li><li>interface 接口</li><li>[] 数组</li><li>enum 枚举</li><li>annotation 注解</li><li>primitive type 基本数据类型</li><li>void </li></ol><h2 id="获取类完整结构"><a href="#获取类完整结构" class="headerlink" title="获取类完整结构"></a>获取类完整结构</h2><p>获取所有的接口、</p><ul><li>所继承的父类、</li><li>全部构造器、</li><li>全部的方法、</li><li>全部的Field、</li><li>注解……</li></ul><p>查看类的名字<code>getName()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Class aClass1 = user.getClass();</span><br><span class="line">       System.out.println(aClass1.getName()); <span class="comment">//获取名字 + 包名路径</span></span><br><span class="line">       System.out.println(aClass1.getSimpleName()); <span class="comment">// 获取类名</span></span><br></pre></td></tr></table></figure><p>查看类的字段<code>getFields()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = aClass1.getFields(); <span class="comment">// 只能获取公有的</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field[] declaredFields = aClass1.getDeclaredFields(); <span class="comment">// 所有都能获取</span></span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(declaredField);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>获得方法<code>getMethods()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得公共方法</span></span><br><span class="line">Method[] methods = aClass1.getMethods();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">    System.out.println(methods[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取所有方法</span></span><br><span class="line">Method[] declaredMethods = aClass.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">    System.out.println(declaredMethod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获得指定方法</span></span><br><span class="line">Method getName = aClass1.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">Method getName1 = aClass1.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">System.out.println(getName);</span><br><span class="line">System.out.println(getName1);</span><br></pre></td></tr></table></figure><p>获得构造器<code>getConstructor()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得构造器</span></span><br><span class="line">       Constructor constructor = aClass1.getConstructor();</span><br><span class="line">       System.out.println(constructor);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获得所有构造器</span></span><br><span class="line">       Constructor[] constructors = aClass1.getConstructors();</span><br><span class="line">       <span class="keyword">for</span> (Constructor constructor1 : constructors) &#123;</span><br><span class="line">           System.out.println(constructor1);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获得指定构造器</span></span><br><span class="line">       Constructor constructor1 = aClass1.getConstructor(String.class, <span class="keyword">int</span>.class, String.class);</span><br><span class="line">       System.out.println(constructor1);</span><br></pre></td></tr></table></figure><h2 id="构造对象"><a href="#构造对象" class="headerlink" title="构造对象"></a>构造对象</h2><p>类必须要有一个无参构造器。</p><p>类的构造器访问权限需要足够。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用反射构造对象</span></span><br><span class="line">        Class&lt;User&gt; userClass = User.class;</span><br><span class="line">        User user1 = userClass.newInstance();</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射构造器创建对象</span></span><br><span class="line">        Constructor&lt;User&gt; constructor2 = userClass.getConstructor(String.class, <span class="keyword">int</span>.class, String.class);</span><br><span class="line">        User user2 = constructor2.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        System.out.println(user2);</span><br></pre></td></tr></table></figure><h2 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a>执行方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// invoke(对象, 方法值) 激活 若参数列表为空则为null</span></span><br><span class="line">       Method setName = userClass.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">       setName.invoke(user2, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">       System.out.println(user2);</span><br></pre></td></tr></table></figure><h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射操作属性</span></span><br><span class="line">        Class&lt;User&gt; userClass1 = User.class;</span><br><span class="line">        User user3 = userClass1.newInstance();</span><br><span class="line">        Field name = userClass1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>); <span class="comment">// 开启暴力反射 可以访问private属性和方法</span></span><br><span class="line">        name.set(user3, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        System.out.println(user3);</span><br></pre></td></tr></table></figure><p>使用反射对比普通方式</p><ul><li>反射效率会略慢</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRefection</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            user.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方式使用时间:&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反射方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        Class&lt;User&gt; userClass = User.class;</span><br><span class="line">        User user = userClass.newInstance();</span><br><span class="line">        Method getName = userClass.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式使用时间:&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射方式关闭检测</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        Class&lt;User&gt; userClass = User.class;</span><br><span class="line">        User user = userClass.newInstance();</span><br><span class="line">        Method getName = userClass.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        getName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式关闭检测使用时间:&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">        TestRefection testRefection = <span class="keyword">new</span> TestRefection();</span><br><span class="line">        testRefection.test1();</span><br><span class="line">        testRefection.test2();</span><br><span class="line">        testRefection.test3();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">普通方式使用时间:4ms</span><br><span class="line">反射方式使用时间:1059ms</span><br><span class="line">反射方式关闭检测使用时间:2219ms</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="获得泛型信息"><a href="#获得泛型信息" class="headerlink" title="获得泛型信息"></a>获得泛型信息</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(Map&lt;String, User&gt; map, List&lt;User&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, User&gt; <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;Refection.Test2&quot;</span>);</span><br><span class="line">        Method method = aClass.getMethod(<span class="string">&quot;test1&quot;</span>, Map.class, List.class);</span><br><span class="line">        Type[] genericParameterTypes = method.getGenericParameterTypes(); <span class="comment">// 获取参数类型</span></span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(genericParameterType);</span><br><span class="line">            <span class="keyword">if</span>(genericParameterType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                    System.out.println(actualTypeArgument);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Method test2 = aClass.getMethod(<span class="string">&quot;test2&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        Type genericReturnType = test2.getGenericReturnType(); <span class="comment">// 获取返回值类型</span></span><br><span class="line">        <span class="keyword">if</span>(genericReturnType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                System.out.println(actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">java.util.Map&lt;java.lang.String, Refection.User&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Refection</span>.<span class="title">User</span></span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">util</span>.<span class="title">List</span>&lt;<span class="title">Refection</span>.<span class="title">User</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Refection</span>.<span class="title">User</span></span></span><br><span class="line"><span class="class"></span>================</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Refection</span>.<span class="title">User</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Process</span> <span class="title">finished</span> <span class="title">with</span> <span class="title">exit</span> <span class="title">code</span> 0</span></span><br></pre></td></tr></table></figure><h2 id="获得注解"><a href="#获得注解" class="headerlink" title="获得注解"></a>获得注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;Refection.Student&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取取注解</span></span><br><span class="line">        Annotation[] annotations = aClass.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得指定注解</span></span><br><span class="line">        MyAnnotationClass annotation = aClass.getAnnotation(MyAnnotationClass.class);</span><br><span class="line">        System.out.println(annotation.value());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得字段上的注解</span></span><br><span class="line">        Field id = aClass.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        MyAnnotationFiled annotation1 = id.getAnnotation(MyAnnotationFiled.class);</span><br><span class="line">        System.out.println(annotation1.columnName());</span><br><span class="line">        System.out.println(annotation1.type());</span><br><span class="line">        System.out.println(annotation1.length());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotationClass(value = &quot;user_db&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotationFiled(columnName = &quot;db_id&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotationFiled(columnName = &quot;db_age&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotationFiled(columnName = &quot;db_name&quot;, type = &quot;varchar&quot;, length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotationClass&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotationFiled&#123;</span><br><span class="line">    <span class="function">String <span class="title">columnName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 注解反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络编程</title>
      <link href="/2022/01/31/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/01/31/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<center><h1>网络编程</h1></center><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>计算机网络是通过传输介质、通信设施和网络通信协议，把分散在不同地点的计算机设备互连起来，实现资源共享和数据传输的系统。网络编程就就是编写程序使联网的两个(或多个)设备(例如计算机)之间进行数据传输。Java语言对网络编程提供了良好的支持，通过其提供的接口我们可以很方便地进行网络编程。</li></ul><h2 id="网络编程的目的"><a href="#网络编程的目的" class="headerlink" title="网络编程的目的"></a>网络编程的目的</h2><p>直接或间接地通过网络协议与其它计算机实现数据交换，进行通讯</p><h2 id="网络编程中有两个主要的问题"><a href="#网络编程中有两个主要的问题" class="headerlink" title="网络编程中有两个主要的问题"></a>网络编程中有两个主要的问题</h2><p>1、如何准确地定位网络上一台或多台主机；定位主机上的特定的应用</p><p> 2、找到主机后如何可靠高效地进行数据传输</p><h2 id="网络通信要素概述"><a href="#网络通信要素概述" class="headerlink" title="网络通信要素概述"></a>网络通信要素概述</h2><p>我们需要知道的是主机间通过网络进行通信是需要遵循<strong>网络通信协议</strong>，是通过<strong>IP地址</strong>准确定位主机，通过<strong>端口号</strong>准确定位主机上的应用。</p><p><code>IP地址和端口号</code></p><p><code>网络通信协议</code></p><h2 id="如何实现网络中的主机互相通信"><a href="#如何实现网络中的主机互相通信" class="headerlink" title="如何实现网络中的主机互相通信"></a>如何实现网络中的主机互相通信</h2><p>1、通信双方地址：<code>IP</code>和<code>端口号</code></p><p>2、一定的规则（即：网络通信协议。有两套参考模型）</p><p>  OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广。</p><p><strong>TCP/IP参考模型(或TCP/IP协议)：事实上的国际标准。</strong></p><h2 id="网络通信协议-以TCP-IP模型为例"><a href="#网络通信协议-以TCP-IP模型为例" class="headerlink" title="网络通信协议(以TCP/IP模型为例)"></a>网络通信协议(以TCP/IP模型为例)</h2><p>TCP/IP，即Transmission Control Protocol/Internet Protocol的简写，中译名为传输控制协议/因特网互联协议，是Internet最基本的协议、Internet国际互联网络的基础。</p><p>七层模型图示</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201311237136.webp"></p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201311238042.webp"></p><p>七层模型传输数据过程：</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201311237060.webp"></p><h1 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h1><p>InetAddress 类提供了操作 IP 地址的各种方法。该类本身没有构造方法，而是通过调用相关静态方法获取实例。InetAddress 类中的常用方法如下表 所示。</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>boolean equals(Object obj)</td><td>将此对象与指定对象比较</td></tr><tr><td>byte[] getAddress()</td><td>返回此 InetAddress 对象的原始 IP 地址</td></tr><tr><td>static InetAddress[] getAHByName(String host)</td><td>在给定主机名的情况下，根据系统上配置的名称，服务器返 回其 IP 地址所组成的数组</td></tr><tr><td>static InetAddress getByAddress(byte[] addr)</td><td>在给定原始 IP 地址的情况下，返回 InetAddress 对象</td></tr><tr><td>static InetAddress getByAddress(String host)</td><td>在给定主机名的情况下确定主机的 IP 地址</td></tr><tr><td>String getCanonicalHostName()</td><td>获取此 IP 地址的完全限定域名</td></tr><tr><td>String getHostAddress()</td><td>返回 IP 地址字符串（以文本表现形式）</td></tr><tr><td>String getHostName()</td><td>返回此 IP 地址的主机名</td></tr><tr><td>static InetAdderss getLocalHost()</td><td>返回本地主机</td></tr></tbody></table><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetIp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line"></span><br><span class="line">        InetAddress byName = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        InetAddress byName2 = InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(byName2);</span><br><span class="line">        System.out.println(byName);</span><br><span class="line"></span><br><span class="line">        System.out.println(byName.getAddress()); <span class="comment">//获得字节数组</span></span><br><span class="line">        System.out.println(byName.getCanonicalHostName()); <span class="comment">// 规范名字</span></span><br><span class="line">        System.out.println(byName.getHostAddress()); <span class="comment">// ip</span></span><br><span class="line">        System.out.println(byName.getHostName()); <span class="comment">// 域名， 或者自己电脑的名字</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口表示计算机上的一个程序的进程</p><ul><li><p>不同的进程有不同的端口号， 用来区分不用的软件</p></li><li><p>被规定0~65535</p></li><li><p>TCP,UDP : 65535 * 2 tcp: 80, udp: 80，单个协议下端口号不能重复</p></li><li><p>端口分类</p><ul><li><p>共有端口 0~1023</p><ul><li>HTTP 80</li><li>HTTPS 443</li><li>FTP 21</li><li>Telent 23</li><li>shell 22</li></ul></li><li><p>程序注册端口 1024~49151， 分配给用户和程序</p><ul><li>To,act 8080</li><li>Mysql 3306</li><li>Oracle 1521</li></ul></li><li><p>动态、私有端口 49152~65535</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano //查看所有端口</span><br><span class="line">netstat -ano|findstr <span class="string">&quot;5900&quot;</span> // 查看特定端口号</span><br><span class="line">tasklist|findstr <span class="string">&quot;3306&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h1><p><code>协议俗称约定</code></p><p>网络通信协议: 速率、传输码率、代码结构、传输控制……</p><p>TCP/IP协议实际是上一种协议</p><ul><li>TCP ：用户传输协议</li><li>UDP ： 用户数据协议</li></ul><p>比较出名的协议</p><ul><li>TCP</li><li>IP</li></ul><p><code>TCP UDP对比</code></p><p>TCP可以比喻打电话 </p><ul><li>连接, 稳定</li><li><code>三次握手，四次挥手</code></li><li><img src="https://gitee.com/airgwl/upic/raw/master//img/202201311553310.gif"></li><li>s客户端、服务端</li><li>传输完成，释放连接， 效率低</li></ul><p>UDP可以比喻发短信</p><ul><li><p>不连接,  不稳定</p></li><li><p>客户端、服务端、没有明确的界限</p></li><li><p>不管有没有准备都可发送</p></li></ul><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p>需要一个客户端和一个服务端</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ol><li>需要知道服务器的地址 IneAddress</li><li>创建套接字 Socket </li><li>发送消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">7789</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取ip</span></span><br><span class="line">        InetAddress ip = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建套接字</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(ip, port);</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;你好世界&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ol><li>创建套接字创建IP地址 ServerSocket</li><li>监听套接字 accept()</li><li>读取数据 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建套接字</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">7789</span>);</span><br><span class="line">        Socket accept = serverSocket.accept();</span><br><span class="line">        InputStream inputStream = accept.getInputStream();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用管道</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buffer  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=inputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">//        int len;</span></span><br><span class="line"><span class="comment">//        while ((len = inputStream.read(buffer)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//            String s = new String(buffer, 0, len);</span></span><br><span class="line"><span class="comment">//            System.out.println(s);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        baos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件上传案例"><a href="#文件上传案例" class="headerlink" title="文件上传案例"></a>文件上传案例</h2><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">6789</span>);</span><br><span class="line"></span><br><span class="line">        OutputStream ops = socket.getOutputStream();</span><br><span class="line">        </span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;kk.jpg&quot;</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fileInputStream.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            ops.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.shutdownOutput();    <span class="comment">// 通知服务器传输结束</span></span><br><span class="line"></span><br><span class="line">        InputStream outputStream = socket.getInputStream();</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buffer2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len2;</span><br><span class="line">        <span class="keyword">while</span> ((len2=outputStream.read(buffer2)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            byteArrayOutputStream.write(buffer2, <span class="number">0</span>, len2);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(byteArrayOutputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        byteArrayOutputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        ops.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6789</span>);</span><br><span class="line">        Socket accept = serverSocket.accept();</span><br><span class="line">        InputStream inputStream = accept.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建输入流对象存放资源</span></span><br><span class="line">        FileOutputStream stream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;jj.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=inputStream.read(buffer)) != -<span class="number">1</span> )&#123;</span><br><span class="line">            stream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        OutputStream outputStream = accept.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;我已经接收到了&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        stream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        accept.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p>不需要连接但是需要对方的地址</p><h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><ol><li>创建套接字 DatagramSocket</li><li>创建数据包 DatagramPacket</li><li>发送数据包 send</li><li>关闭套接字 close</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * udp 客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">        String msg = <span class="string">&quot;你好世界&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">7788</span>;</span><br><span class="line">        <span class="comment">// 创建数据包</span></span><br><span class="line">        DatagramPacket datagramPacket = <span class="keyword">new</span> DatagramPacket(msg.getBytes(),</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                msg.getBytes().length,</span><br><span class="line">                InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),</span><br><span class="line">                port);</span><br><span class="line"></span><br><span class="line">        datagramSocket.send(datagramPacket);</span><br><span class="line"></span><br><span class="line">        datagramSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h2><ol><li>创建套接字 DatagramSocket</li><li>创建数据包 DatagramPacket</li><li>接收数据包 receive</li><li>关闭套接字 close</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * udp服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建套接字</span></span><br><span class="line">        DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket(<span class="number">7788</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 创建数据包</span></span><br><span class="line">        DatagramPacket datagramPacket = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line"></span><br><span class="line">        datagramSocket.receive(datagramPacket);</span><br><span class="line"></span><br><span class="line">        System.out.println(datagramPacket.getPort());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(datagramPacket.getData()));</span><br><span class="line"></span><br><span class="line">        datagramSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多线程聊天案例"><a href="#多线程聊天案例" class="headerlink" title="多线程聊天案例"></a>多线程聊天案例</h1><p>两个人都是发送发，可以是接收方</p><p>演示结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你好</span><br><span class="line"><span class="number">60274</span>----&gt;你也好                                                                     </span><br><span class="line">请问你是机器人吗</span><br><span class="line"><span class="number">60274</span>----&gt;你好，我不是机器人                              </span><br></pre></td></tr></table></figure><p>发送方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSend</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader bufferStr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String toIp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadSend</span><span class="params">(DatagramSocket ds, BufferedReader bufferStr, <span class="keyword">int</span> port, String toIp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ds = ds;</span><br><span class="line">        <span class="keyword">this</span>.bufferStr = bufferStr;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.toIp = toIp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String sysStr = bufferStr.readLine();</span><br><span class="line">                DatagramPacket pack = <span class="keyword">new</span> DatagramPacket(sysStr.getBytes(),</span><br><span class="line">                        <span class="number">0</span>, sysStr.getBytes().length,</span><br><span class="line">                        <span class="keyword">new</span> InetSocketAddress(<span class="keyword">this</span>.toIp, <span class="keyword">this</span>.port));</span><br><span class="line">                <span class="keyword">if</span>(sysStr.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ds.send(pack);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendReceive</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    DatagramSocket dg = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SendReceive</span><span class="params">(DatagramSocket dg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dg = dg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                DatagramPacket datagramPacket = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">                dg.receive(datagramPacket);</span><br><span class="line">                String s = <span class="keyword">new</span> String(datagramPacket.getData());</span><br><span class="line">                System.out.println(datagramPacket.getPort()+<span class="string">&quot;----&gt;&quot;</span>+s);</span><br><span class="line">                <span class="keyword">if</span> (s.trim().equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dg.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SocketException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadSend(<span class="keyword">new</span> DatagramSocket(), <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)) , <span class="number">7789</span>, <span class="string">&quot;localhost&quot;</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> SendReceive(<span class="keyword">new</span> DatagramSocket(<span class="number">8899</span>))).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SocketException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadSend(<span class="keyword">new</span> DatagramSocket(), <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)) , <span class="number">8899</span>, <span class="string">&quot;localhost&quot;</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> SendReceive(<span class="keyword">new</span> DatagramSocket(<span class="number">7789</span>))).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><p>用于下载网络资源</p><ol><li>先给定资源的url</li><li>打开创建连接 openconnecion</li><li>获取资源的流 getInputStream()</li><li>创建输出流存储对象 FileOutpuStream</li></ol><p>下载网易云音乐的案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebDown</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://m704.music.126.net/20220131225410/07833633931fbd23b4a47e0348e817d9/jdyyaac/obj/w5rDlsOJwrLDjj7CmsOj/11716071744/b75d/88b1/6d70/d2db9d45ac70f980447edef5d5d7983e.m4a?authSecret=0000017eb08a2550083f0aaba092204a&quot;</span>);</span><br><span class="line">        URLConnection urlConnection = url.openConnection();</span><br><span class="line"></span><br><span class="line">        InputStream inputStream = urlConnection.getInputStream();</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;xx.m4a&quot;</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len=inputStream.read(buffer)) != -<span class="number">1</span> )&#123;</span><br><span class="line">            fileOutputStream.write(buffer, <span class="number">0</span> ,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态代理</title>
      <link href="/2022/01/29/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2022/01/29/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<center><h1>    静态代理    </h1></center><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了</p><p>  举例理解：以租房为例，房东只需要处理自己的房子交给中介即可，其余的都是由中介充当代理进行租客签协议，带租客看房子，等等。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>静态代理需要满足三点</p><p>  1、需要有真实角色<br>  2、需要有一个代理角色<br>  3、这两个角色之间必须实现相同的接口</p><h2 id="静态代理类优缺点"><a href="#静态代理类优缺点" class="headerlink" title="静态代理类优缺点"></a>静态代理类优缺点</h2><p>优点：真实角色也就是业务类只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点。</p><p>缺点：<br>1、代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，势必要为每一种方法都进行代理，静态代理在程序规模稍大时就无法胜任了。<br>2、如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ProxyMe proxyMe = <span class="keyword">new</span> ProxyMe(<span class="keyword">new</span> Me());</span><br><span class="line">        proxyMe.happyProgram();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Program</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">happyProgram</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Me</span> <span class="keyword">implements</span> <span class="title">Program</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">happyProgram</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我在学java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyMe</span> <span class="keyword">implements</span> <span class="title">Program</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Me target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyMe</span><span class="params">(Me target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">happyProgram</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">this</span>.target.happyProgram();</span><br><span class="line">        before();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开电脑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭电脑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 静态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lamda表达式</title>
      <link href="/2022/01/29/Lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/01/29/Lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<center><h1>Lamda表达式</h1></center><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>希腊字母表排序第十一位字母，英语名称位Lamda</li><li>避免匿名内部类定义过多</li><li>其实属于函数式编程概念</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201291319458.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a-&gt;System.out.println(<span class="string">&quot;i like lamda--&gt;&quot;</span>a);</span><br></pre></td></tr></table></figure><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul><li>避免匿名内部类定义过多</li><li>可以让代码看起来更加的简洁</li><li>去掉了一推没有意义的代码只留下核心的逻辑</li></ul><h2 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h2><p>理解函数式接口是学习lamda表达式的关键所在</p><p>函数接口的定义：</p><ul><li><p>任何接口如果只包含唯一一个抽象方法，那么它就是一个函数式接口。如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于函数式接口，我们可以通过Lamda表达式来创建该接口的对象。</p></li></ul><h1 id="演化过程"><a href="#演化过程" class="headerlink" title="演化过程"></a>演化过程</h1><p>Lambda格式<code>()-&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLambdaImpl2</span> <span class="keyword">implements</span> <span class="title">MyLambda</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyLambdaImpl3</span> <span class="keyword">implements</span> <span class="title">MyLambda</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MyLambdaImpl myLambda = <span class="keyword">new</span> MyLambdaImpl();</span><br><span class="line">        myLambda.run(<span class="number">89</span>);</span><br><span class="line"></span><br><span class="line">        MyLambdaImpl2 myLambda1 = <span class="keyword">new</span> MyLambdaImpl2();</span><br><span class="line">        myLambda1.run(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        MyLambdaImpl3 myLambdaImpl3 = <span class="keyword">new</span> MyLambdaImpl3();</span><br><span class="line">        myLambdaImpl3.run(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        MyLambda myLambda2 = (<span class="keyword">int</span> age)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">                <span class="comment">// 简化1 去返回类型</span></span><br><span class="line">        MyLambda myLambda3 = (age)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化2 去括号</span></span><br><span class="line">        MyLambda myLambda4 = age-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">         <span class="comment">// 简化3 去花括号</span></span><br><span class="line">        MyLambda myLambda5 = age-&gt; System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line"></span><br><span class="line">        myLambda4.run(<span class="number">1000</span>);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyLambda</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLambdaImpl</span> <span class="keyword">implements</span> <span class="title">MyLambda</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是我的方法&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>lambda只能有一行代码的情况下才能简化为一行，如果有多行就得用代码块包起来</li><li>前提接口为函数式接口。</li><li>多个参数也可以去掉类型，要去掉就得都去掉<code>必须加上括号</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/2022/01/29/%E5%A4%9A%E7%BA%BF%E7%A8%8BThread/"/>
      <url>/2022/01/29/%E5%A4%9A%E7%BA%BF%E7%A8%8BThread/</url>
      
        <content type="html"><![CDATA[<center><h1>多线程</h1></center><h1 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h1><h3 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h3><p>一个人做多个事情叫多任务，其实本质上我们大脑在同一时间段依旧只做了一件事情。</p><p>生活中的多任务</p><ul><li><img src="https://gitee.com/airgwl/upic/raw/master//img/202201291036844.png"></li></ul><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>原来一条路，慢慢的因为车太多了单路堵塞效率低，为了提高使用效率，能够充分利用道路于是加多个车道</p><ul><li><p>单车道和多车道</p></li><li><center><img src="https://gitee.com/airgwl/upic/raw/master//img/202201291040734.png" alt="" width = "40%"><img src="https://gitee.com/airgwl/upic/raw/master//img/202201291042037.png" alt="" width = "40%"> </center></li></ul><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><center><img src="https://gitee.com/airgwl/upic/raw/master//img/202201291047686.png" alt="" width = "40%"><img src="https://gitee.com/airgwl/upic/raw/master//img/202201291047116.png" alt="" width = "40%"> </center><p>在操作系统中运行的程序就是进程例如QQ，播放器，游戏，IDE</p><p>线程就是独立的执行路径<br>在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程，gc线程<br>main() 称之为主线程，为系统的入口，用于执行整个程序<br>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能认为的干预的。<br>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制<br>线程会带来额外的开销，如cpu调度时间，并发控制开销<br>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致</p><h1 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h1><p>Thread、Runnable、Callable</p><p>三种实现创建方式</p><center><img src="https://gitee.com/airgwl/upic/raw/master//img/202201291106186.png" alt="" width = "auto"></center><h2 id="Thread方式"><a href="#Thread方式" class="headerlink" title="Thread方式"></a>Thread方式</h2><ol><li>自定义线程继承Thread类</li><li>重写run方法，编写线程执行体</li><li>创建线程对象，调用start方法启动线程</li></ol><ul><li>线程不一定立即执行需要听从CPU的调度安排</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是多线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ThreadTest().start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是主线程&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子类继承Tread类具备多线程能力</li><li>启动线程：子类对象.start();</li><li><code>不建议使用避免oop单继承局限性</code></li></ul><h2 id="Runnable方式"><a href="#Runnable方式" class="headerlink" title="Runnable方式"></a>Runnable方式</h2><p>创建线程使用方式:</p><ol><li>实现runnable接口</li><li>重写run方法</li><li>执行线程需要丢入runnable接口实现类，掉用start方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是多线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RunableTest runableTest = <span class="keyword">new</span> RunableTest();</span><br><span class="line">        <span class="keyword">new</span> Thread(runableTest).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是主线程&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>实现接口Runnable具有多线程能力</li><li>启动线程：传入目标对象+Thread对象.start();</li><li><code>推荐使用：避免单继承局限性、灵活方便，方便同一个对象被多个线程使用</code></li></ul><h2 id="Callable方式"><a href="#Callable方式" class="headerlink" title="Callable方式"></a>Callable方式</h2><ol><li>实现Callable接口</li><li>重写call方法</li><li>创建执行服务</li><li>获取结果</li><li>关闭服务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    String url, name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> WebDownloads().downloads(url, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载图片&quot;</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CallableTest</span><span class="params">(String url, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        CallableTest call1 = <span class="keyword">new</span> CallableTest(<span class="string">&quot;https://i2.hdslb.com/bfs/archive/6693f3c783ff1c5a29d83a5d23d397b5f5116dd0.jpg@672w_378h_1c.webp&quot;</span>, <span class="string">&quot;1.png&quot;</span>);</span><br><span class="line">        CallableTest call2 = <span class="keyword">new</span> CallableTest(<span class="string">&quot;https://i0.hdslb.com/bfs/archive/a197cb4c3dad32de4a74ac04547a0bc516ccbff7.jpg@672w_378h_1c.webp&quot;</span>, <span class="string">&quot;2.png&quot;</span>);</span><br><span class="line">        CallableTest call3 = <span class="keyword">new</span> CallableTest(<span class="string">&quot;https://i0.hdslb.com/bfs/archive/8828683db0c7326036e8caa07d953078da9f497e.jpg@672w_378h_1c.webp&quot;</span>, <span class="string">&quot;3.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建执行服务</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; submit = executorService.submit(call1);</span><br><span class="line">        Future&lt;Boolean&gt; submit1 = executorService.submit(call2);</span><br><span class="line">        Future&lt;Boolean&gt; submit2 = executorService.submit(call3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//       获取执行结果</span></span><br><span class="line">        Boolean aBoolean = submit.get();</span><br><span class="line">        Boolean aBoolean1 = submit1.get();</span><br><span class="line">        Boolean aBoolean2 = submit2.get();</span><br><span class="line">        System.out.println(aBoolean);</span><br><span class="line">        System.out.println(aBoolean1);</span><br><span class="line">        System.out.println(aBoolean2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭服务</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloadsCallable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downLoads</span><span class="params">(String url, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以自定义返回值</li><li>可以抛出异常</li></ul><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><h2 id="线程的5大状态"><a href="#线程的5大状态" class="headerlink" title="线程的5大状态"></a>线程的5大状态</h2><p>​    创建状态、就绪状态、阻塞状态、运行状态、死亡状态</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201291653466.png"></p><h2 id="创建状态"><a href="#创建状态" class="headerlink" title="创建状态"></a>创建状态</h2><p><code>Thread t = new Thread()</code></p><p>线程对象一旦创建就进入到了新生状态</p><h2 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态"></a>就绪状态</h2><p>当调用start()方法，线程立即进入就绪状态，但不意味着立即调度执行。</p><h2 id="阻塞状态"><a href="#阻塞状态" class="headerlink" title="阻塞状态"></a>阻塞状态</h2><p>当调用sleep，wait或同步锁定时，线程进入阻塞状态，就是代码不往下执行，阻塞事件解除后，重新进入就绪状态，等待cpu调度执行。</p><h2 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h2><p>进入运行状态，线程才真正执行线程体的代码块。</p><h2 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态"></a>死亡状态</h2><p>线程中断或者结束，一旦进入死亡状态就不能再次启动。</p><h2 id="观测状态"><a href="#观测状态" class="headerlink" title="观测状态"></a>观测状态</h2><p><code>sThread.State</code></p><ul><li>NEW<ul><li>尚未启动的线程处于此状态</li></ul></li><li>RUNNABLE<ul><li>在Java虚拟机中执行的线程处于此状态</li></ul></li><li>BLOCKED<ul><li>被阻塞等待监视器锁定的线程处于此状态中</li></ul></li><li>WAITING<ul><li>正在等待另一个线程执行特定动作的线程处于此状态</li></ul></li><li>TIMED_WAITING<ul><li>正在等待另一个线程执行动作达到指定等待时间的线程处于瓷砖太</li></ul></li><li>TERMINATED<ul><li>已退出的线程处于此状态</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadState</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread.State state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;run Thread&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; );</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程未停止&quot;</span>);</span><br><span class="line">            state = thread.getState();</span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程的方法"><a href="#线程的方法" class="headerlink" title="线程的方法"></a>线程的方法</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201291701741.png"></p><h2 id="线程的停止方法"><a href="#线程的停止方法" class="headerlink" title="线程的停止方法"></a>线程的停止方法</h2><p>不推荐使用JDK提供的stop()、destroy()方法。</p><p>推荐线程自己停止下来</p><p>建议使用一个标志位进行终止变量<code>当flag=false，则终止线程运行。</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread is Running&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            TestStop stops = <span class="keyword">new</span> TestStop();</span><br><span class="line">            <span class="keyword">new</span> Thread(stops).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread is &quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1500</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread is stop&quot;</span>);</span><br><span class="line">                stops.stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h2><p>sleep(时间)指当前前线阻塞的毫秒数</p><p>sleep存在异常InterruptedException;</p><p>sleep时间达到后线程进入就绪状态</p><p>sleep可以模拟网络延时、倒计时等</p><p>每一个对象都有一个锁，sleep不会释放锁</p><h2 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h2><p>礼让线程，让当前正在执行的线程暂停，但不阻塞</p><p>将线程从未运行状态转为就绪状态</p><p><code>让CPU重新调度，礼让不一定成功！</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyYield(), <span class="string">&quot;第一&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyYield(), <span class="string">&quot;第二&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYield</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---我是开始&quot;</span>);</span><br><span class="line">        Thread.yield(); <span class="comment">//礼让</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---我是停止&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合并线程"><a href="#合并线程" class="headerlink" title="合并线程"></a>合并线程</h2><p>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞。</p><p>可以想象成插队</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是VIP&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">900</span>)&#123;</span><br><span class="line">                thread.start();</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;main方法&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h1><p>Java提供一个线程调度器来 监视程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。<code>并不意味着优先级高的一定先执行</code></p><p>线程的优先级用数字表示范围1~10</p><ol><li>Thread.MIN_PRIORITY = 1;</li><li>Thread.MAX_PRIORITY = 10;</li><li>Thread.NORM_PRIORITY = 5;</li></ol><p>使用以下方法改变或获取优先级</p><p>​    <code>getPriority().setPriority(int xxx)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheadPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TheadPriority(), <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TheadPriority(), <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TheadPriority(), <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置优先级</span></span><br><span class="line">        thread.setPriority(<span class="number">3</span>);</span><br><span class="line">        thread1.setPriority(<span class="number">1</span>);</span><br><span class="line">        thread2.setPriority(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h1><p>线程分为用户线程和守护线程</p><p>虚拟机必须确保用户线程执行完毕</p><p>虚拟机不用等待守护线程执行完毕</p><p>如，后台记录操作日志、监控内存、垃圾回收等待….</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3650</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我还在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;我不在了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; );</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我是守护线程&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.setDaemon(<span class="keyword">true</span>);    <span class="comment">// 设置守护线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>多个线程操作同一个资源</p><p><code>并发</code>：同一个对象被多个线程同时操作<br>处理多线程问题时，多个线程访问同一个对象并且某些线程还想修改这个对象，我们就需要线程同步，线程同步其实就是一种<code>等待机制</code>，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用。</p><hr><p>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来访问冲突问题，为了保证数据再方法中被访问时的正确性，在访问时加入锁机制<code>synchronized</code>，当一个线程获得对象的排它锁，独占资源。其他线程必须等待，使用后释放锁即可，但是存在以下问题。</p><ol><li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题。</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题。</li></ol><h2 id="不安全同步示例"><a href="#不安全同步示例" class="headerlink" title="不安全同步示例"></a>不安全同步示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket buyTicket = <span class="keyword">new</span> BuyTicket();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;第一个人&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;第二个人&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;第三个人&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            butTicket();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">butTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ticket &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+ticket--);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">第二个人---&gt;<span class="number">10</span></span><br><span class="line">第一个人---&gt;<span class="number">9</span></span><br><span class="line">第三个人---&gt;<span class="number">9</span></span><br><span class="line">第二个人---&gt;<span class="number">8</span></span><br><span class="line">第一个人---&gt;<span class="number">8</span></span><br><span class="line">第三个人---&gt;<span class="number">7</span></span><br><span class="line">第一个人---&gt;<span class="number">5</span></span><br><span class="line">第三个人---&gt;<span class="number">4</span></span><br><span class="line">第二个人---&gt;<span class="number">6</span></span><br><span class="line">第三个人---&gt;<span class="number">3</span></span><br><span class="line">第二个人---&gt;<span class="number">3</span></span><br><span class="line">第一个人---&gt;<span class="number">3</span></span><br><span class="line">第一个人---&gt;<span class="number">2</span></span><br><span class="line">第二个人---&gt;<span class="number">2</span></span><br><span class="line">第三个人---&gt;<span class="number">2</span></span><br><span class="line">第三个人---&gt;<span class="number">1</span></span><br><span class="line">第一个人---&gt;<span class="number">1</span></span><br><span class="line">第二个人---&gt;<span class="number">0</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p>由于我们可以通过private关键字来保证数据对像只能被方法访问，所以我们只需针对方法提出一套机制，这套机制就是<code>synchronized</code>关键字，它包括两种用法，synchronized方法和synchronized块。</p><p><code>同步方法: public synchronized void method(int ages)&#123;&#125;</code></p><p>synchronized方法控制对”对象”的访问，每个对象对应着一把锁，每个synchronized方法都必须获得调用该方法的对象锁才能执行，否者线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行。</p><p><code>缺陷:若将一个很大的方法声明synchronized将会影响效率</code></p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201301139209.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket buyTicket = <span class="keyword">new</span> BuyTicket();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;第一个人&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;第二个人&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyTicket, <span class="string">&quot;第三个人&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            butTicket();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">butTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ticket &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+ticket--);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h2><p>同步块:synchronized(Obj){}</p><p>Obj称之同步监视器</p><ul><li>Obj可以时任何对象，但是推荐使用共享资源作为监视器</li><li>同步方法中无需指定同步监视器，因为同步方法的同步监视器时this，就是这个对象本身，或者是class。</li></ul><p>同步监视器的执行过程</p><ol><li>第一个线程访问，锁定同步监视器，执行其中代码</li><li>第二个线程访问，发现同步监视器被锁定，无法访问</li><li>第一个线程访问完毕，接触同步监视器</li><li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">synList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread( ()-&gt;&#123;</span><br><span class="line">                <span class="comment">// 增加同步块</span></span><br><span class="line">                <span class="keyword">synchronized</span> (arrayList)&#123;</span><br><span class="line">                    arrayList.add(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; ).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(arrayList.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201301151858.png"></p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p>它是java并发包下的集合，是一个线程安全的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试安全类型集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GucList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CopyOnWriteArrayList arrayList = <span class="keyword">new</span> CopyOnWriteArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;arrayList.add(Thread.currentThread().getName());&#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(arrayList.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10000</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>多个线程各自占有一些共享资源，并且相互等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对象释放资源，都停止执行的情形，某一个同步块同时拥有<code>两个以上对象的锁</code>时就可能会发生死锁的问题。</p><h2 id="如何避免产生死锁"><a href="#如何避免产生死锁" class="headerlink" title="如何避免产生死锁"></a>如何避免产生死锁</h2><p>产生死锁的必要条件:</p><ol><li>互斥条件: 一个资源每次只能被一个进程使用。</li><li>请求与保持条件，一个进程因请求资源而阻塞时，对已获得资源保持不变</li><li>不剥夺条件，进程已获得的资源，在未使用完之前，不能强行剥夺</li><li>循环等待条件，若干进程之间形成一种头尾相接的循环等待资源关系</li></ol><p><code>上面四种出现死锁的必要条件，只要破其中一个或多个就可以避免死锁的发生。</code></p><p>死锁示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Makeup makeup = <span class="keyword">new</span> Makeup(<span class="number">0</span>,<span class="string">&quot;白雪公主&quot;</span>);</span><br><span class="line">        Makeup makeup1 = <span class="keyword">new</span> Makeup(<span class="number">1</span>,<span class="string">&quot;白马王子&quot;</span>);</span><br><span class="line">        makeup.start();</span><br><span class="line">        makeup1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 口红</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="comment">//    保证资源只有一份</span></span><br><span class="line">    <span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> choice; <span class="comment">//选择</span></span><br><span class="line">    String girName; <span class="comment">// 使用的人</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Makeup</span><span class="params">(<span class="keyword">int</span> choice, String girName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.choice = choice;</span><br><span class="line">        <span class="keyword">this</span>.girName = girName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(choice==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (lipstick)&#123;</span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解锁死锁</p><p>只需要不让他们抱同一把锁即可</p><p>改进代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(choice==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lipstick)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (lipstick)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.girName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ReentranLock"><a href="#ReentranLock" class="headerlink" title="ReentranLock"></a>ReentranLock</h2><p>从JDK5.0开始，java提供了更强大的线程同步机制—通过现式定义同步锁对象来实现同步。同步锁使用Lock对象充当</p><p>Java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象</p><p>ReentranLock类实现了Lock，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的时ReentrantLock,可以现式加锁、释放锁</p><p>Lock锁的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">priver <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReetrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//保证线程安全代码</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            <span class="comment">//如果同步代码有异常, 要将unlock()写入finally语句块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LokTest2 lokTest2 = <span class="keyword">new</span> LokTest2();</span><br><span class="line">        <span class="keyword">new</span> Thread(lokTest2, <span class="string">&quot;1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(lokTest2, <span class="string">&quot;2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LokTest2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticknume = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="comment">// 获取资源区加锁</span></span><br><span class="line">            reentrantLock.lock();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ticknume &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-&gt;&gt;&quot;</span>+ticknume--);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="ReentranLock对比synchronized"><a href="#ReentranLock对比synchronized" class="headerlink" title="ReentranLock对比synchronized"></a>ReentranLock对比synchronized</h2><p>Lock时显式锁(手动开启和关闭锁。别忘记关闭锁) synchronized时影式锁，出了作用域自动释放。</p><p>Lock只有代码锁，synchronized有代码块锁和方法锁</p><p>使用Lock锁，JVM将花费较少的时间来调整线程，性能更好，并且有更好的扩展性(提供更多的子类)</p><p>优先使用顺序</p><ul><li>Lock &gt; 同步代码块 (已经进入了方法体，分配相应资源) &gt; 同步方法(在方法体之外)</li></ul><h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><p>应用场景:生产者和消费者问题</p><p>​    假设仓库中只能存放一件产品，生产者将生产出来的产品放入仓库，消费者将仓库中的产品取走消费</p><p>​    如果仓库中没有产品，则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止</p><p>​    如果仓库中放有产品，则消费者可以将产品取走消费，否则停止消费并等待，直到仓库中再次放入产品为止。</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201301351845.png"></p><p>通信方法</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201301430397.png"></p><p><code>注意：只能在同步方法或者在同步代码块中使用不然会抛出IIIegaMonitorStateExepion异常</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Tv tv = <span class="keyword">new</span> Tv();</span><br><span class="line">        <span class="keyword">new</span> Player(tv).start();</span><br><span class="line">        <span class="keyword">new</span> Watcher(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Tv tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(Tv tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">&quot;京剧&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">&quot;广告&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Tv tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(Tv tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.tv.witch();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tv</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String vice; <span class="comment">//节目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>; <span class="comment">// 演员T 观众F</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表演</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String vice)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.vice = vice;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在表演:&quot;</span>+vice);</span><br><span class="line">        <span class="comment">// 通知观众观看</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 观看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">witch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在看:&quot;</span>+vice);</span><br><span class="line">        <span class="comment">// 通知演员表演</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">正在表演:京剧</span><br><span class="line">正在看:京剧</span><br><span class="line">正在表演:广告</span><br><span class="line">正在看:广告</span><br><span class="line">正在表演:京剧</span><br><span class="line">正在看:京剧</span><br><span class="line">正在表演:广告</span><br><span class="line">正在看:广告</span><br><span class="line">正在表演:京剧</span><br><span class="line">正在看:京剧</span><br><span class="line">正在表演:广告</span><br><span class="line">正在看:广告</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>经常创建和销毁，使用大量资源，比如并发情况下的线程，对性能影响很大。</p><p><code>思路:</code> 提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池子中，可以避免频繁创建销毁，实现重复利用。</p><p>好处；</p><p>​    提高响应数度，减少创建新线程的时间</p><p>​    降低资源消耗，重复利用线程池中的线程，不需要每次都创建</p><p>​    便于线程管理</p><p>​        corePoolSize: 核心池的大小</p><p>​        maximumPoolSize: 最大线程数</p><p>​        keepAliveTime: 线程没有任务时最多保持多长时间后会终止</p><h2 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h2><p>JDK5.0提供了相关的APIEXecutorService和Executors</p><p>ExecutorService：真正的线程池接口。常见子类THreadPoolExecutor</p><ul><li>void execute(Runnable command) 执行任务, 没有返回值,一般用来执行Runnable</li><li><T>Future<T>submit(Callable<T>task): 执行任务有返回值, 一般用来执行Callable</li><li>void shutdown(): 关闭线程池</li></ul><p>Executors: 工具类、线程池的工厂类、用于创建并返回不同类型的线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程池</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 启动线程池</span></span><br><span class="line">        executorService.execute(<span class="keyword">new</span> Pool());</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> Pool());</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> Pool());</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pool</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GUI可视化编程</title>
      <link href="/2022/01/20/GUI%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/01/20/GUI%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<center><h1>GUI</h1></center><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li><p>为图形用户界面，是指采用图形方式显示的计算机操作用户界面，是计算机与其使用者之间的对话接口，是计算机系统的重要组成部分。</p></li><li><p>早期，电脑向用户提供的是单调、枯燥、纯字符状态的“命令行界面（CLI）”，也有人称之为字符用户界面（CUI）</p></li><li><p>由于字符用户界面的操作方式需要用户死记硬背大量的命令，这对于普通用户而言非常不便。后来取而代之的是可以通过窗口、菜单、按键等方式来方便地进行操作。</p></li><li><p>70年代，施乐公司 Xerox Palo Alto Research Center (PARC) 的研究人员开发了第一个 GUI 图形用户界面，开启了计算机图形界面的新纪元。这之后，操作系统的界面设计经历了众多变迁，OS/2, Macintosh, Windows, Linux, Mac OS, Symbian OS, Android, IOS各种操作系统将 GUI 设计带进新的时代。</p><hr></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>Gui的核心技术: <code>Swing AWT</code></p><ol><li>因为界面不美观</li><li>运行需要jre运行环境</li></ol><ul><li><p>学习这个可以写出我们心中的一些小工具</p></li><li><p>了解MVC架构，了解监听</p></li></ul><h1 id="AWT"><a href="#AWT" class="headerlink" title="AWT"></a>AWT</h1><h2 id="Awt介绍"><a href="#Awt介绍" class="headerlink" title="Awt介绍"></a>Awt介绍</h2><p>架构图</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201201227405.png"></p><p>java.awt包提供了基本的java程序的<a href="https://baike.baidu.com/item/GUI">GUI</a>设计工具。主要包括下述三个概念：</p><ul><li><a href="https://baike.baidu.com/item/%E7%BB%84%E4%BB%B6">组件</a>–Component</li><li><a href="https://baike.baidu.com/item/%E5%AE%B9%E5%99%A8">容器</a>–Container</li><li>布局管理器–LayoutManager</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件(Conponent)是<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/3352324">图形用户界面</a>最基本的部分，也称为<a href="https://baike.baidu.com/item/%E6%9E%84%E4%BB%B6">构件</a>，是可以以图形化的方式显示在屏幕上，并能与用户进行交互的对象，例如一个按钮，一个标签等。组件不能独立地显示出来，必须将其放在一定的容器中才可以显示。 类java.awt.Component是许多组件类的父类，Component类中封装了组件通用的方法和属性，如图形的组件对象、大小、显示位置、前景色和背景色、边界、可见性等。</p><h2 id="AWT常用组件"><a href="#AWT常用组件" class="headerlink" title="AWT常用组件"></a>AWT常用组件</h2><table><thead><tr><th>组件名称</th><th>构造方法</th><th>使用说明</th></tr></thead><tbody><tr><td>按钮(Button)</td><td>Button b=new Button(“退出”);</td><td>单击按钮产生ActionEvent事件，实现ActionListener接口并重写actionPerformed()方法监听和处理事件</td></tr><tr><td>复选框(Checkbox)</td><td>Checkbox ch=new Checkbox(“one”,true);</td><td>选中复选框产生ItemAction事件，实现ItemListener接口监听和处理事件</td></tr><tr><td>下拉菜单(Choice)</td><td>Choice colorChoose=new Choice();</td><td>实现ItemListener接口监听和处理事件；Add()方法可在下拉列表中添加选项</td></tr><tr><td>画布(Canvas)</td><td>public Canvas(GraphicsConfigurationconfig);</td><td>重写Canvas类的paint()方法实现完成图形处理；实现MouseListener和KeyListener接口监听Canvas组件的鼠标和键盘事件</td></tr><tr><td>文本框(TextField)</td><td>TextField ft=new TextField(16);//宽度为16个字符</td><td>文本框只能显示一行，按Enter键时产生ActionEvent事件，通过ActionListener接口中的actionPerformed()方法处理事件</td></tr><tr><td>文本域(TextAera)</td><td>TextArea ta=new TextArea(“Textarea”,4,10);//4行10列</td><td>可显示多行多列文本和滚动条</td></tr><tr><td>列表框(List)</td><td>List list=new List(4,false);//4行，不允许多选</td><td>提供多个文本选项，支持滚动条，可以浏览多项</td></tr><tr><td>对话框(Dialog)</td><td></td><td>Window类的子类</td></tr><tr><td>文件对话框(FileDialog)</td><td>Filedialog fd=new Filedialog(frm,”fileddilog”);</td><td>当用户想打开或存储文件时，可使用文件对话框进行操作</td></tr><tr><td>菜单栏(MenuBar)</td><td>MenuBar mb=new MenuBar();</td><td>通过frm.setMenuBar(mb)语句可将菜单mb设置为Frame对象frm的主菜单</td></tr><tr><td>下拉菜单(Menu)</td><td>Menu m=new Menu(“Menu”);</td><td>通过mb.add(m)可将m下拉列表添加到菜单栏中</td></tr><tr><td>菜单项(MenuItem)</td><td>MenuItem mi=new MenuItem(“Openit”);</td><td>通过mi.add(mi)将菜单项mi添加到下一个下拉列表m中。</td></tr><tr><td>颜色(Color)</td><td>//非构造方法，两种方法设置组件背景色setBackground(Color.BLUE);setBackground(newColor(100,100,100));</td><td>通过setForeground()方法设置组件前景色，通过setBackground()方法设置组件背景色。颜色值可使用Color类的颜色常量来设置，也可通过指定RGB颜色对象值设置</td></tr><tr><td>字体(Font)</td><td>Font font=new Font(“宋体”,Font.BOLD,10);//宋体，10号，加粗</td><td>按顺序向Font()构造方法传递有关字体设置的参数</td></tr></tbody></table><hr><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p><a href="https://baike.baidu.com/item/%E5%AE%B9%E5%99%A8/2797468">容器</a>(Container)也是一个类，实际上是Component的子类，因此<a href="https://baike.baidu.com/item/%E5%AE%B9%E5%99%A8/2797468">容器</a>本身也是一个组件，具有组件的所有性质，但是它的主要功能是容纳其它组件和容器。容器可以简化图形化界面的设计，以整体结构来布置界面。所有的容器都可以通过add()方法向容器中添加组件。常用的容器3种：Panel, Frame, Applet。</p><h3 id="框架-Frame"><a href="#框架-Frame" class="headerlink" title="框架(Frame)"></a><a href="https://baike.baidu.com/item/%E6%A1%86%E6%9E%B6">框架</a>(Frame)</h3><p><a href="https://baike.baidu.com/item/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95">构造方法</a>：</p><p><code>Frame frm = </code>new<code> </code>Frame(<code>&quot;New Window&quot;</code>);</p><p>要生成一个窗口，通常使用Window的子类Frame类进行实例化，而不是直接使用Window 类，框架的外观就像平常Windows系统下的窗口，有标题、<a href="https://baike.baidu.com/item/%E8%BE%B9%E6%A1%86">边框</a>、<a href="https://baike.baidu.com/item/%E8%8F%9C%E5%8D%95">菜单</a>和大小等。setSize()方法可以设置框架尺寸的大小，setVisibe()方法可以设置窗口的可见性。</p><h3 id="面板-Panel"><a href="#面板-Panel" class="headerlink" title="面板(Panel)"></a><a href="https://baike.baidu.com/item/%E9%9D%A2%E6%9D%BF">面板</a>(Panel)</h3><p>构造方法：</p><p><code>Panel pnl = ``new</code> <code>Panel();</code></p><p>面板是一种透明的容器，没有标题和边框。与Frame 不同，Panel不能作为最外层的容器单独存在，它首先必须作为一个组件放置在其他容器（一般为Frame）中，然后把组件添加到它里面。在java.swing中则是<a href="https://baike.baidu.com/item/JPanel">JPanel</a>。</p><h3 id="小程序-Applet"><a href="#小程序-Applet" class="headerlink" title="小程序(Applet)"></a><a href="https://baike.baidu.com/item/%E5%B0%8F%E7%A8%8B%E5%BA%8F/20056403">小程序</a>(<a href="https://baike.baidu.com/item/Applet">Applet</a>)</h3><p>构造方法：</p><p><code>Applet apt = </code>new<code> </code>Applet();</p><p>框架一般用作Java应用程序的窗口，而Applet是Java小程序的窗口。与Frame不同，Applet是在网页中显示的，也可以通过添加Panel进行组件布局。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个frame框架</span></span><br><span class="line">        Frame frame=<span class="keyword">new</span> Frame();</span><br><span class="line">        <span class="comment">//设置Java窗体组件的名称</span></span><br><span class="line">        frame.setTitle(<span class="string">&quot;JavaGUIComponent&quot;</span>);</span><br><span class="line">        <span class="comment">//设置窗体的顶点位置及其大小</span></span><br><span class="line">        frame.setBounds(<span class="number">20</span>,<span class="number">30</span>,<span class="number">300</span>,<span class="number">280</span>);</span><br><span class="line">        <span class="comment">//设置窗体是否可见</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置窗体背景颜色</span></span><br><span class="line">        frame.setBackground(Color.gray);</span><br><span class="line">        frame.add(<span class="keyword">new</span> List());</span><br><span class="line">        <span class="comment">/*给窗体添加监听器的方法改变窗体状态,监听器的参数是一个内部类，</span></span><br><span class="line"><span class="comment">         *     内部类定义了窗体关闭的处理方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent we)</span> </span>&#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//创建一个panel面板</span></span><br><span class="line">        Panel panel=<span class="keyword">new</span> Panel();</span><br><span class="line">        <span class="comment">//给panel面板添加文本框、文本域、列表、单选按钮、复选按钮、画布、标签、字体大小、事件、滚动条</span></span><br><span class="line">        panel.add(<span class="keyword">new</span> TextField(<span class="number">20</span>));</span><br><span class="line">        panel.add(<span class="keyword">new</span> Button(<span class="string">&quot;Click me!&quot;</span>));</span><br><span class="line">         </span><br><span class="line">        frame.add(panel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h2><p>布局管理器（LayoutManager）：每个容器都有一个布局管理器，当容器需要对某个组件进行定位或判断其大小、尺寸时，就会调用其对应的布局管理器。使用布局管理器可以实现跨平台的特性，并且获得动态的布局效果。布局管理器负责管理组件的排列顺序、大小和位置。不同的布局管理器使用不同的布局策略，容器可以通过选择不同的布局管理器来决定如何布局。</p><h4 id="流布局管理器FlowLayout"><a href="#流布局管理器FlowLayout" class="headerlink" title="流布局管理器FlowLayout"></a>流布局管理器FlowLayout</h4><p>FlowLayout是Panel 和 Applet 的默认布局管理器。在该布局管理器中，组件在容器中按照从上到下，从左到右的顺序进行排列，行满后则换行。</p><p>构造方法较多，例如：</p><ul><li>FlowLayout();默认构造方法，设置居中对齐方式，横向和纵向间隔均为默认5<a href="https://baike.baidu.com/item/%E5%83%8F%E7%B4%A0">像素</a></li><li>FlowLayout(FlowLayout.LEFT);设置居左对齐，横向和纵向间隔均为默认5像素</li><li>FlowLayout(FlowLayout.RIGHT,20,40);设置居右对齐，横向间隔20像素，纵向间隔40像</li></ul><h4 id="边边界布局管理器BorderLayout"><a href="#边边界布局管理器BorderLayout" class="headerlink" title="边边界布局管理器BorderLayout"></a>边边界布局管理器BorderLayout</h4><p>构造方法：</p><p><code>BorderLayout bl = ``new</code> <code>BorderLayout();</code></p><p>BorderLayout是Window、Frame和Dialog的默认布局管理器，其将容器分成North、South、East、West和Center 5个区域，每个区域只能放置一个组件。在使用add()方法添加组件到容器时，必须指定将其放置在哪个区域中。使用BorderLayout时，如果容器大小发生变换，组件的相对位置不变。</p><h4 id="网格布局管理器GridLayout"><a href="#网格布局管理器GridLayout" class="headerlink" title="网格布局管理器GridLayout"></a>网格布局管理器GridLayout</h4><p>构造方法：</p><p><code>GridLayout gl = </code>new<code> </code>GridLayout(<code>3</code>,<code>5</code>); ``//3行5列</p><p>GridLayout 可使容器中的各个组件呈网格状布局，平局占据容器的空间，即使容器的大小发生变化，每个组件还是平均占据容器的空间。和FlowLayout一样，GridLayout也是按照从上到下，从左到右的规律进行排列的。</p><h4 id="卡片布局管理器CardLayout"><a href="#卡片布局管理器CardLayout" class="headerlink" title="卡片布局管理器CardLayout"></a>卡片布局管理器CardLayout</h4><p>构造方法：</p><p><code>CardLayout cl = </code>new<code> </code>CardLayout();</p><p>CardLayout能够帮助用户处理两个乃至跟多的成员共享同一显示空间。它把容器分成许多层，每层的显示空间占据整个容器的大小，并且每层之允许反之一个组件，可以通过Panel来实现每层复杂的用户界面。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>使用Frame的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[ ])</span></span>&#123;</span><br><span class="line">MyFrame fr = <span class="keyword">new</span> MyFrame(<span class="string">&quot;Hello Out There!&quot;</span>);</span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line">fr.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"><span class="comment">//设置Frame的大小，缺省为（0，0）</span></span><br><span class="line">fr.setBackground(Color.red);</span><br><span class="line"><span class="comment">//设置Frame的背景，缺省为红色</span></span><br><span class="line">fr.setVisible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//设置Frame为可见，缺省为不可见</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span> <span class="params">(String str)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(str); <span class="comment">//调用父类的构造方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以下是一个FlowLayout示例小程序代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.gan.awt;</span><br><span class="line"><span class="keyword">import</span> java.awt.Button;</span><br><span class="line"><span class="keyword">import</span> java.awt.Frame;</span><br><span class="line"><span class="keyword">import</span> java.awt.Panel;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLayoutManager</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建Frame对象</span></span><br><span class="line">Frame f = <span class="keyword">new</span> Frame();</span><br><span class="line"><span class="comment">// 创建panel容器</span></span><br><span class="line">Panel p = <span class="keyword">new</span> Panel();</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;1&quot;</span>));<span class="comment">// 默认垂直居中，间距为5</span></span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;4&quot;</span>));</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;5&quot;</span>));</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;6&quot;</span>));</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;7&quot;</span>));</span><br><span class="line">p.add(<span class="keyword">new</span> Button(<span class="string">&quot;8&quot;</span>));p.add(<span class="keyword">new</span> Button(<span class="string">&quot;9&quot;</span>));</span><br><span class="line">f.add(p);</span><br><span class="line"><span class="comment">// 设置Frame标题</span></span><br><span class="line">f.setTitle(<span class="string">&quot;我的第二个FlowLayoutManager程序&quot;</span>);</span><br><span class="line"><span class="comment">// 设置Frame尺寸,默认为(0,0) f.setSize(200, 200);</span></span><br><span class="line"><span class="comment">// 设置是否可见，默认为false</span></span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201201240174.png"></p><h1 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h1>]]></content>
      
      
      <categories>
          
          <category> GUI编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GUI编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架</title>
      <link href="/2022/01/19/JAVA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/01/19/JAVA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<center><h1>集合框架</h1></center><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="什么是集合"><a href="#什么是集合" class="headerlink" title="什么是集合"></a>什么是集合</h2><p>集合指的是一种对象的容器，实现了对对象的操作。</p><h2 id="集合和数组的区别"><a href="#集合和数组的区别" class="headerlink" title="集合和数组的区别"></a>集合和数组的区别</h2><ol><li>数组的长度固定， 集合长度不固定。</li><li>数组可以存储基本类型和引用类型，集合只能存储引用类型。</li></ol><h1 id="Collection体系"><a href="#Collection体系" class="headerlink" title="Collection体系"></a>Collection体系</h1><p>集合框架的体系如下</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201191907165.png"></p><h2 id="Collection概念"><a href="#Collection概念" class="headerlink" title="Collection概念"></a>Collection概念</h2><ul><li><p>它是集合体系中最顶端的一个接口是所有集合体系的<code>根</code></p></li><li><p>它代表一组任意类型的对象、无序、无下标、不能重复。</p><p>创建集合类<code>Collection collection = new ArrayList();</code></p></li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li><p>添加元素<code>collection.add();</code></p></li><li><p>删除元素</p><p><code>collection.remove();</code></p><p><code>collection.clear();</code></p></li><li><p>遍历元素</p><ol><li><p>使用增强for循环</p><p><code>for(Object object : collection)&#123;&#125;</code></p></li><li><p>使用迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/haNext(); 有没有下一个元素</span><br><span class="line"><span class="comment">//next(); 获取下一个元素</span></span><br><span class="line"><span class="comment">//remove(); 删除当前元素</span></span><br><span class="line">Iterator it = collection.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">  String object = (String)it.next(); <span class="comment">//强转</span></span><br><span class="line">  <span class="comment">// 可以使用it.remove(); 进行移除元素</span></span><br><span class="line">  <span class="comment">// collection.remove(); 不能用collection其他方法 会报并发修改异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>判断</p><ol><li><p>判断元素是否重复</p><p><code>collection.contains();</code>  </p></li><li><p>判断元素是否存在</p><p><code>collection.isEmpty();</code></p></li></ol></li></ol><hr><h1 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h1><h2 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h2><ul><li><p>List集合是Collection的子接口</p></li><li><p>特点: 有序、有下标、元素可重复</p></li></ul><p>创建集合对象<code>List list = new ArrayList&lt;&gt;();</code></p><h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="1-1添加元素"><a href="#1-1添加元素" class="headerlink" title="1.1添加元素"></a>1.1添加元素</h3><ol><li>添加元素 <code>list.add( );</code> 会对基本类型进行自动装箱</li></ol><h3 id="1-2删除元素"><a href="#1-2删除元素" class="headerlink" title="1.2删除元素"></a>1.2删除元素</h3><ol><li><p>删除元素 可以用索引 <code>list.remove(0)</code></p><p>当删除数字与索引矛盾时 对数字强转</p><p><code>list.remove((Object) 10)</code> 或 <code>list.remove(new Integer(10))</code></p></li></ol><h3 id="1-3遍历"><a href="#1-3遍历" class="headerlink" title="1.3遍历"></a>1.3遍历</h3><ol><li>使用for循环遍历</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lise.size(); i++)&#123;</span><br><span class="line">  sout(list.get(i)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2.使用增强for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object list: collection)&#123; &#125;</span><br></pre></td></tr></table></figure><p>​    3.使用迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterator it = collection.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">  String object = (String)it.next(); <span class="comment">//强转</span></span><br><span class="line">  <span class="comment">// 可以使用it.remove(); 进行移除元素</span></span><br><span class="line">  <span class="comment">// collection.remove(); 不能用collection其他方法 会报并发修改异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    4.使用列表迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ListIterator li = list.listIterator();</span><br><span class="line"><span class="keyword">while</span>(li.hasNext())&#123;</span><br><span class="line">  System.out.println(li.nextIndex() + <span class="string">&quot;:&quot;</span> + li.next()); <span class="comment">//从前往后遍历</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(li.hasPrevious())&#123;</span><br><span class="line">  System.out.println(li.previousIndex() + <span class="string">&quot;:&quot;</span> + li.previous()); <span class="comment">//从后往前遍历</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4获取索引"><a href="#1-4获取索引" class="headerlink" title="1.4获取索引"></a>1.4获取索引</h3><p>获取集合索引<code>list.indexof()</code></p><h3 id="1-5返回子集合"><a href="#1-5返回子集合" class="headerlink" title="1.5返回子集合"></a>1.5返回子集合</h3><p>返回子集合 <code>sublist(x, y);</code> 左闭右开</p><p><code>List subList = list.subList(1, 3);</code> 返回索引 1、2</p><hr><h1 id="List实现类"><a href="#List实现类" class="headerlink" title="List实现类"></a>List实现类</h1><ul><li><p>ArrayList</p><ul><li>数组结构实现，必须要连续空间，查询快、增删慢</li><li>jdk1.2版本，运行效率块、线程不安全</li></ul></li><li><p>Vector</p><ul><li>数组结构实现，查询快、增删慢</li><li>jdk1.0版本，运行</li></ul></li><li><p>LinkedList</p><ul><li>双向链表结构实现，无需连续空间，增删快，查询慢</li></ul></li></ul><hr><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList是List接口的实现类</p><p>创建集合 <code>ArrayList arrayList = new ArrayList&lt;&gt;();</code></p><ol><li>添加元素 <code>arrayList.add();</code></li><li>删除元素 <code>arrayList.remove(new Student(&quot;name&quot;, 10));</code></li></ol><p>这里重写了 equals(this == obj) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">  <span class="comment">//1 判断是不是同一个对象</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span> == obj)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//2 判断是否为空</span></span><br><span class="line">  <span class="keyword">if</span>(obj == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3 判断是否是Student类型</span></span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">    Student == (Student)obj;</span><br><span class="line">    <span class="comment">//4 比较属性</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.name.equals(s.getName()) &amp;&amp; <span class="keyword">this</span>.age == s.getAge())&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//5 不满足条件返回false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>遍历元素</p><ol><li><p>使用迭代器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator it = arrayList.iterator();</span><br><span class="line">while(it.hasNext())&#123;</span><br><span class="line">  Student s = (Student)it.next(); //强转</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>列表迭代器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ListIterator li = arrayList.listIterator();</span><br><span class="line">while(li.hasNext())&#123;</span><br><span class="line">  Student s = (Student)li.next(); //从前往后遍历</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while(li.hasPrevious())&#123;</span><br><span class="line">  Student s = (Student)li.previous();//从后往前遍历</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>判断</p><p><code>arrayList.contains();</code> 和 <code>arrayList.isEmpty();</code></p></li><li><p>查找</p><p><code>arrayList.indexof();</code></p></li></ol><p><strong>原码分析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_CAPACITY = <span class="number">10</span>; <span class="comment">//默认容量</span></span><br><span class="line"><span class="comment">//注意：如果没有向集合中添加任何元素时，容量0，添加一个后，容量为10</span></span><br><span class="line"><span class="comment">//每次扩容是原来的1.5倍</span></span><br><span class="line">elementData存放元素的数组</span><br><span class="line">size 实际元素个数</span><br></pre></td></tr></table></figure><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>创建集合 <code>Vector vector = new Vector&lt;&gt;();</code></p><p>增加、删除、判断同上</p><p>遍历中枚举器遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Enumeration en = vector.elements();</span><br><span class="line"><span class="keyword">while</span>(en.hasMoreElements())&#123;</span><br><span class="line">  String o = (String)en.nextElement();</span><br><span class="line">  sout(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>由于年代久远基本上用不到这个集合</code></p><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>创建链表集合<code>LinkedList li = new LinkedList&lt;&gt;();</code></p><p>常用方法与List一致</p><hr><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>概念：参数化类型、类型安全的集合，强制集合元素的类型必须一致</p><p>特点：</p><ul><li><p>编译时即可检查，而非运行时抛出异常</p></li><li><p>访问时，不必类型转换（拆箱）</p></li><li><p>不同泛型之间应用不能相互赋值，泛型不存在多态</p></li><li><p>本质是参数化类型，把类型作为参数传递</p></li><li><p>常见形式有泛型类、泛型接口、泛型方法</p></li><li><p>语法 T成为类型占位符，表示一种引用类型，可以写多个逗号隔开</p></li><li><p>好处 1. 提高代码重用性 2. 防止类型转换异常，提高代码安全性</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写一个泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGeneric</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//使用泛型T</span></span><br><span class="line">  <span class="comment">//1 创建变量</span></span><br><span class="line">  T t;</span><br><span class="line">  <span class="comment">//2 泛型作为方法的参数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">    sout(t);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3 泛型作为方法的返回值</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getT</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用泛型类创建对象</span></span><br><span class="line">    <span class="comment">// 注意： 1. 泛型只能使用引用类型</span></span><br><span class="line">    <span class="comment">// 2. 不用泛型类型对象之间不能相互赋值</span></span><br><span class="line">    MyGeneric&lt;String&gt; myGeneric = <span class="keyword">new</span> MyGeneric&lt;String&gt;();</span><br><span class="line">    myGeneric.t = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    myGeneric.show(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    String string = myGeneric.getT();</span><br><span class="line">    </span><br><span class="line">    MyGeneric&lt;Integer&gt; myGeneric2 = <span class="keyword">new</span> MyGeneric&lt;Integer&gt;();</span><br><span class="line">    myGeneric2.t = <span class="number">100</span>;</span><br><span class="line">    myGeneric2.show(<span class="number">200</span>);</span><br><span class="line">    Integer integer = myGeneric2.getT();</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>注意：不能泛型静态常量</p><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericMethod</span></span>&#123;</span><br><span class="line">  <span class="comment">//泛型方法</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">show</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">    sout(<span class="string">&quot;泛型方法&quot;</span> + t);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">MyGenericMethod myGenericMethod = <span class="keyword">new</span> MyGenericMethod();</span><br><span class="line">myGenericMethod.show(<span class="string">&quot;字符串&quot;</span>);<span class="comment">// 自动类型为字符串</span></span><br><span class="line">myGenericMethod.show(<span class="number">200</span>);<span class="comment">// integer类型</span></span><br><span class="line">myGenericMethod.show(<span class="number">3.14</span>);<span class="comment">// double类型</span></span><br></pre></td></tr></table></figure><h1 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h1><p>特点：无序、无下标、元素不可重复</p><p>方法：全部继承自Collection中的方法</p><p>增、删、遍历、判断与collection一致</p><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>存储结构：哈希表（数组+链表+红黑树）</p><p>存储过程（重复依据）</p><ol><li>根据hashCode计算保存的位置，如果位置为空，直接保存，若不为空，进行第二步</li><li>再执行equals方法，如果equals为true，则认为是重复，否则形成链表</li></ol><p>特点</p><ul><li>基于HashCode计算元素存放位置<ul><li>利用31这个质数，减少散列冲突<ul><li>31提高执行效率 <code>31 * i = (i &lt;&lt; 5) - i</code> 转为移位操作</li></ul></li><li>当存入元素的哈希码相同时，会调用equals进行确认，如果结果为true，则拒绝后者存入</li></ul></li></ul><p>新建集合 <code>HashSet&lt;String&gt; hashSet = new HashSet&lt;String&gt;();</code></p><p>添加元素 <code>hashSet.add( );</code></p><p>删除元素 <code>hashSet.remove( );</code></p><p>遍历操作</p><ol><li><p>增强for <code>for( type type : hashSet)</code></p></li><li><p>迭代器 <code>Iterator&lt;String&gt; it = hashSet.iterator( );</code></p></li></ol><p>判断 <code>hashSet.contains( );</code> <code>hashSet.isEmpty();</code></p><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><p>特点</p><ul><li>基于排列顺序实现元素不重复</li><li>实现SortedSet接口，对集合元素自动排序</li><li>元素对象的类型必须实现Comparable接口，指定排序规则</li><li>通过CompareTo方法确定是否为重复元素</li></ul><p>存储结构：红黑树</p><p>创建集合 <code>TreeSet&lt;String&gt; treeSet = new TreeSet&lt;&gt;()</code></p><p>添加元素 <code>treeSet.add();</code></p><p>删除元素 <code>treeSet.remove();</code></p><p>遍历 1. 增强for 2. 迭代器</p><p>判断 <code>treeSet.contains();</code></p><p>补充：TreeSet集合的使用</p><p>Comparator 实现定制比较（比较器）</p><p>Comparable 可比较的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写compare</span></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n1 = o1.getAge()-o2.getAge();</span><br><span class="line">  <span class="keyword">int</span> n2 = o1.getName().comareTo(o2.getName());</span><br><span class="line">  <span class="keyword">return</span> n1 == <span class="number">0</span> ? n2 : n1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map接口的特点</p><ol><li>用于存储任意键值对（key - value） </li><li> 键：无序、无下标、不允许重复（唯一） </li><li> 值：无序、无下标、允许重复</li></ol><p>方法：</p><ol><li>V put(K key, V value) 将对象存到集合中，关联键值 </li><li>Object get(Object key) 根据键获得对应的值 </li><li> Set<K> 返回所有的Key </li><li> Collection<V> values() 返回包含所有值的Collection集合 </li><li> Set&lt;Map.Entry&lt;K, V&gt;&gt; 键值匹配的Set集合</li></ol><h2 id="Map接口的使用"><a href="#Map接口的使用" class="headerlink" title="Map接口的使用"></a>Map接口的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Map集合</span></span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 1. 添加元素</span></span><br><span class="line">map.put(<span class="string">&quot;cn&quot;</span>, <span class="string">&quot;中国&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;uk&quot;</span>, <span class="string">&quot;英国&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;cn&quot;</span>, <span class="string">&quot;zhongguo&quot;</span>); <span class="comment">// 会替换第一个 </span></span><br><span class="line"><span class="comment">// 2. 删除</span></span><br><span class="line">map.remove(<span class="string">&quot;uk&quot;</span>);</span><br><span class="line"><span class="comment">// 3. 遍历</span></span><br><span class="line"><span class="comment">// 3.1 使用KeySet()</span></span><br><span class="line"><span class="comment">//Set&lt;String&gt; keyset = map.keySet(); // 所有Key的set集合</span></span><br><span class="line"><span class="keyword">for</span>(String key : map.keyset)&#123;</span><br><span class="line">  sout(key + <span class="string">&quot;---&quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.2 使用entrySet()</span></span><br><span class="line"><span class="comment">//Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, String&gt; entry : map.entries)&#123;</span><br><span class="line">  sout(entry.getKey() + <span class="string">&quot;---&quot;</span> + entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>存储结构：哈希表（数组+链表+红黑树）</p><p>使用key可使hashcode和equals作为重复</p><p>增、删、遍历、判断与上述一致</p><p>原码分析总结：</p><ol><li>HashMap刚创建时，table是null，节省空间，当添加第一个元素时，table容量调整为16</li><li>当元素个数大于阈值（16*0.75 = 12）时，会进行扩容，扩容后的大小为原来的两倍，目的是减少调整元素的个数</li><li>jdk1.8 当每个链表长度 &gt;8 ，并且数组元素个数 ≥64时，会调整成红黑树，目的是提高效率</li><li>jdk1.8 当链表长度 &lt;6 时 调整成链表</li><li>jdk1.8 以前，链表时头插入，之后为尾插入</li></ol><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><p>线程安全，运行效率慢；不允许null作为key或是value</p><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p>hashtable的子类，要求key和value都是string，通常用于配置文件的读取</p><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>实现了SortedMap接口（是map的子接口），可以对key自动排序</p><h1 id="Collection工具类"><a href="#Collection工具类" class="headerlink" title="Collection工具类"></a>Collection工具类</h1><p>概念：集合工具类，定义了除了存取以外的集合常用方法</p><p>直接二分查找<code>int i = Collections.binarySearch(list, x);</code> 成功返回索引</p><p>其他方法 ： <strong>copy复制、reverse反转、shuffle打乱</strong></p><p>代码演示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list转成数组</span></span><br><span class="line">Integer[] arr = list.toArray(<span class="keyword">new</span> Integer[<span class="number">10</span>]);</span><br><span class="line">sout(arr.length);</span><br><span class="line">sout(Array.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组转成集合</span></span><br><span class="line"><span class="comment">// 此时为受限集合，不能 添加和删除！</span></span><br><span class="line">String[] name = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; list2 = Arrays.asList(names);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把基本类型数组转为集合时，需要修改为包装类</span></span><br><span class="line">Integer[] nums = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list3 = Arrays.asList(nums);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> JAVA集合框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法解析</title>
      <link href="/2022/01/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/01/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<center><h1>    排序算法    </h1></center><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>排序算法是《数据结构与算法》中最基本的算法之一。</p><p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。用一张图概括：</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201191325070.png"></p><h1 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h1><h2 id="1-1叙述"><a href="#1-1叙述" class="headerlink" title="1.1叙述"></a>1.1叙述</h2><p><strong>冒泡排序（Bubble Sort）</strong>也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><h2 id="1-2算法演示"><a href="#1-2算法演示" class="headerlink" title="1.2算法演示"></a>1.2算法演示</h2><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201191328801.gif"></p><p><strong>最快的时候</strong>：输入数据已经是 <code>正序</code> , 这时候只需要循环确定一遍，时间复杂度为 <code>O(n)</code></p><p><strong>最慢的时候</strong>：输入数据是 <code>反序</code> ，这时候需要嵌套式循环移动，时间复杂度为 <code>O(n^2)</code></p><h2 id="1-3代码实现"><a href="#1-3代码实现" class="headerlink" title="1.3代码实现"></a>1.3代码实现</h2><p>1.升序排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序法</span></span><br><span class="line"><span class="comment"> *  比较数组中，两个相邻的元素，如果第一个数比第二个数大，我们就交换他们的位置</span></span><br><span class="line"><span class="comment"> *  每一次比较都会产生一个最大的数或者最小的数</span></span><br><span class="line"><span class="comment"> *  下一轮则可以少一次排序</span></span><br><span class="line"><span class="comment"> *  依次循环直到结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] xort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line"><span class="comment">//        临时变量</span></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line"><span class="comment">//        外层循环，判断要走多少次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">//            内层循环 比较两个数，如果第一个数比第二个数大则交换位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[j+<span class="number">1</span>] &lt; array[j])&#123;  <span class="comment">// 比较符号决定排序的顺序</span></span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、降序排序法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序法</span></span><br><span class="line"><span class="comment"> *  比较数组中，两个相邻的元素，如果第一个数比第二个数大，我们就交换他们的位置</span></span><br><span class="line"><span class="comment"> *  每一次比较都会产生一个最大的数或者最小的数</span></span><br><span class="line"><span class="comment"> *  下一轮则可以少一次排序</span></span><br><span class="line"><span class="comment"> *  依次循环直到结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] xort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line"><span class="comment">//        临时变量</span></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line"><span class="comment">//        外层循环，判断要走多少次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">//            内层循环 比较两个数，如果第一个数比第二个数大则交换位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[j+<span class="number">1</span>] &gt; array[j])&#123;  <span class="comment">// 比较符号决定排序的顺序</span></span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3、代码测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">42</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">23</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] array2 = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">42</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">23</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] xort = xort(array);</span><br><span class="line">    <span class="keyword">int</span>[] xort2 = xort2(array2);</span><br><span class="line">    System.out.println(<span class="string">&quot;升序:&quot;</span>+Arrays.toString(xort));</span><br><span class="line">    System.out.println(<span class="string">&quot;降序:&quot;</span>+Arrays.toString(xort2));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、测试结果</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201191404062.png"></p><h1 id="2、选择排序"><a href="#2、选择排序" class="headerlink" title="2、选择排序"></a>2、选择排序</h1><h2 id="2-1叙述"><a href="#2-1叙述" class="headerlink" title="2.1叙述"></a>2.1叙述</h2><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处就是不占用额外的内存空间。</p><h2 id="2-2-排序原理"><a href="#2-2-排序原理" class="headerlink" title="2.2 排序原理"></a>2.2 排序原理</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</p><p>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p><p>重复第二步，直到所有元素均排序完毕。</p><h2 id="2-3算法演示"><a href="#2-3算法演示" class="headerlink" title="2.3算法演示"></a>2.3算法演示</h2><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202201191406550.gif"></p><p>无论什么数据进去都是 <code>O(n²)</code> 的时间复杂度</p><h2 id="2-4-代码实现"><a href="#2-4-代码实现" class="headerlink" title="2.4 代码实现"></a>2.4 代码实现</h2><h1 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h1><h1 id="4、希尔排序"><a href="#4、希尔排序" class="headerlink" title="4、希尔排序"></a>4、希尔排序</h1><h1 id="5、归并排序"><a href="#5、归并排序" class="headerlink" title="5、归并排序"></a>5、归并排序</h1><h1 id="6、快速排序"><a href="#6、快速排序" class="headerlink" title="6、快速排序"></a>6、快速排序</h1><h1 id="7、堆排序"><a href="#7、堆排序" class="headerlink" title="7、堆排序"></a>7、堆排序</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓内置动画属性</title>
      <link href="/2021/12/20/%E5%8A%A8%E7%94%BB%E5%B1%9E%E6%80%A7API/"/>
      <url>/2021/12/20/%E5%8A%A8%E7%94%BB%E5%B1%9E%E6%80%A7API/</url>
      
        <content type="html"><![CDATA[<center><h1>    动画属性API    </h1></center><h1 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h1><ul><li>属性动画ViewPropertyAnimator类</li></ul><ol><li><p>调用方法</p><ol><li><p>控件名.animate().动作;</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201546823.png"></p></li></ol><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201547741.jpg"></p></li><li><p>动画时常默认是500ms</p><ul><li>改变动画时长</li><li><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201550589.jpg"></li></ul></li><li><p>速度模型</p><ul><li><p>InterPolator    内插(速度设置器)</p><p>1、设置动画匀速运动</p><ul><li><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201552851.jpg"></li></ul><p>2、设置前摇和回弹的InterPolator</p><ul><li><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201553022.jpg"></li></ul></li></ul></li><li><p>设置监听器</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201553983.jpg"></p></li></ol><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p><h1 id="详细请看"><a href="#详细请看" class="headerlink" title="详细请看"></a>详细请看</h1><p><a href="https://rengwuxian.com/ui-1-6/">动画属性API</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓RelativeLayout组合图片</title>
      <link href="/2021/12/20/RelativeLayout%E7%BB%84%E5%90%88%E5%9B%BE%E7%89%87/"/>
      <url>/2021/12/20/RelativeLayout%E7%BB%84%E5%90%88%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<center><h1>    RelativeLayout组合图片    </h1></center><h1 id="资源准备"><a href="#资源准备" class="headerlink" title="资源准备"></a>资源准备</h1><ul><li>创建一个xml布局文件，将所需的图片组合成一个图像</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201501589.jpg"></p><h1 id="自定义RelativeLayout"><a href="#自定义RelativeLayout" class="headerlink" title="自定义RelativeLayout"></a>自定义RelativeLayout</h1><ol><li><p>创建一个类让他继承于RelativeLayout并且实现它的三个构造方法</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201504885.jpg"></p></li><li><p>自定义一个方法并实现布局文件加载(要有上下文参数)</p><p><code>注意:</code> 要在上面上个构造方法中分别调用你这个自定义的方法</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201506551.png"></p></li><li><p>在主布局文件中使用该定义的控件对象</p><p><code>在这使用的是Android Studio3.0版本</code></p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201510021.jpg"></p></li></ol><h1 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h1><ul><li>为自定义VIew添加图片旋转动画效果</li></ul><ol><li><p>在自定义的类文件中创建一个方法，并接收一个动画数据</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201520696.jpg"></p></li><li><p>将接收的数据转成自己想要的数据类型</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201520288.jpg"></p></li><li><p>创建动画类对象(Object Animator)</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201520041.jpg"></p></li><li><p>在调用自定义控件的类文件中调用方法</p><p> <img src="https://gitee.com/airgwl/upic/raw/master//img/202112201520295.jpg"></p></li></ol><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201521791.jpg"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓渐变色进度条</title>
      <link href="/2021/12/20/%E6%B8%90%E5%8F%98%E8%89%B2%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
      <url>/2021/12/20/%E6%B8%90%E5%8F%98%E8%89%B2%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<center><h1>    渐变色进度条    </h1></center><h1 id="导入ProgressBar"><a href="#导入ProgressBar" class="headerlink" title="导入ProgressBar"></a>导入ProgressBar</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201448414.jpg"></p><h1 id="在style文件下自定义progress样式"><a href="#在style文件下自定义progress样式" class="headerlink" title="在style文件下自定义progress样式"></a>在style文件下自定义progress样式</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201449192.png"></p><h1 id="编写进度条的背景样式"><a href="#编写进度条的背景样式" class="headerlink" title="编写进度条的背景样式"></a>编写进度条的背景样式</h1><ul><li><p>后景</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201450234.png"></p></li></ul><h1 id="创建前景样式"><a href="#创建前景样式" class="headerlink" title="创建前景样式"></a>创建前景样式</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201731766.jpg"></p><h1 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201452789.png"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓Spinner下拉框字体</title>
      <link href="/2021/12/20/Spinner%E4%B8%8B%E6%8B%89%E6%A1%86%E5%AD%97%E4%BD%93/"/>
      <url>/2021/12/20/Spinner%E4%B8%8B%E6%8B%89%E6%A1%86%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<center><H1>Spinner下拉框字体</H1></center><h1 id="创建布局"><a href="#创建布局" class="headerlink" title="创建布局"></a>创建布局</h1><ul><li>创建一个布局文件写入TextView控件</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201725915.jpg"></p><h1 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h1><ul><li>在类文件中创建适配器将适配器装载到spinner中</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201725757.jpg"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓CheckBox选择框</title>
      <link href="/2021/12/20/CheckBox%E8%83%8C%E6%99%AF/"/>
      <url>/2021/12/20/CheckBox%E8%83%8C%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<center> <h1>CheckBox背景框</h1></center><ul><li>button属性指定他的点击和未点击的背景属性</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201436406.jpg"></p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201431185.png"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓PopWindow弹窗</title>
      <link href="/2021/12/20/PopWindow%E5%BC%B9%E7%AA%97/"/>
      <url>/2021/12/20/PopWindow%E5%BC%B9%E7%AA%97/</url>
      
        <content type="html"><![CDATA[<center><H1>PopWindow弹窗</H1></center><h1 id="资源准备"><a href="#资源准备" class="headerlink" title="资源准备"></a>资源准备</h1><p>1、创建xml布局文件并布局好控件</p><p><img src="C:\Users\gwl\AppData\Roaming\Typora\typora-user-images\image-20211220141318381.png" alt="image-20211220141318381"></p><p>2、在使用对象文件中加载布局文件</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201414194.png"></p><h1 id="实例化PopWindow"><a href="#实例化PopWindow" class="headerlink" title="实例化PopWindow"></a>实例化PopWindow</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201415527.png"></p><h1 id="控件的查找"><a href="#控件的查找" class="headerlink" title="控件的查找"></a>控件的查找</h1><ol><li>根据布局文件加载器返回的对象来进行控件的查找</li><li><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201417629.png"></li></ol><h1 id="显示自定义的布局文件"><a href="#显示自定义的布局文件" class="headerlink" title="显示自定义的布局文件"></a>显示自定义的布局文件</h1><ol><li><p>显示</p><p><img src="C:\Users\gwl\AppData\Roaming\Typora\typora-user-images\image-20211220141856300.png" alt="image-20211220141856300"></p></li><li><p>隐藏<img src="C:\Users\gwl\AppData\Roaming\Typora\typora-user-images\image-20211220141940535.png" alt="image-20211220141940535"></p></li></ol><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="C:\Users\gwl\AppData\Roaming\Typora\typora-user-images\image-20211220142035087.png" alt="image-20211220142035087"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓ActionBar导航条</title>
      <link href="/2021/12/20/ActionBar%E5%AF%BC%E8%88%AA%E6%9D%A1/"/>
      <url>/2021/12/20/ActionBar%E5%AF%BC%E8%88%AA%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<center><H1>ActionBar导航条</H1></center><h1 id="实例化控件"><a href="#实例化控件" class="headerlink" title="实例化控件"></a>实例化控件</h1><ul><li><p>实例化控件ActionBar获取支持操作栏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ActionBar bar = getSupportActionBar();</span><br><span class="line">注意:</span><br><span class="line">需要继承AppCompatActivity类</span><br></pre></td></tr></table></figure></li></ul><h1 id="选择操作栏"><a href="#选择操作栏" class="headerlink" title="选择操作栏"></a>选择操作栏</h1><ul><li><p>选择操作栏(有好几个布局选择一个接近需求的行)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bar.setNavigationMode(ActionBar.NAYGATION_MODETABS);</span><br></pre></td></tr></table></figure></li></ul><h1 id="传入数据"><a href="#传入数据" class="headerlink" title="传入数据"></a>传入数据</h1><ul><li><p>传入数据、设置监听事件、点击事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bar.addTab(bar.newTab().setText(<span class="string">&quot;传感器数据&quot;</span>).setTabListener(<span class="keyword">this</span>)); <span class="comment">// 需要在类中实现TabListener接口</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201347162.png"></p></li></ul><h1 id="设置Fragment"><a href="#设置Fragment" class="headerlink" title="设置Fragment"></a>设置Fragment</h1><ul><li>与fragment碎片同步滑动</li><li>自定义的ViewPage控件去监听屏幕事件</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201407596.jpg"></p><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201406173.png"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能家居设备预算表</title>
      <link href="/2021/12/05/%E9%A2%84%E7%AE%97%E8%A1%A8/"/>
      <url>/2021/12/05/%E9%A2%84%E7%AE%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<center><h1>    预算表    </h1></center><h1 id="设备预算"><a href="#设备预算" class="headerlink" title="设备预算"></a>设备预算</h1><ul><li><p>首先要知道设备的含税售价以及不含税售价就需要知道<code>成本总价</code>、<code>毛利率</code>以及<code>增值税</code>。</p><ul><li><p>例如成本价为250、毛利率为20%、增值税为17%。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">需要它们之间是如何计算的：</span><br><span class="line">    价格（不含税）＝价格（含税）÷（1-毛利率），税指的是增值税</span><br><span class="line">    价格（含税）＝价格（不含税）×（1+增值税)</span><br><span class="line"> 也就是说：</span><br><span class="line">成本价(不含税) = 250÷(1-20%) = 312.5</span><br><span class="line">成本价(含税) = 成本价(不含税)x(1+17%) = 365.625</span><br></pre></td></tr></table></figure><ul><li>所以不含税售价=312.5 含税售价=365.625</li></ul></li></ul></li></ul><p>智能家居预算表案例规范:</p><table><thead><tr><th>序号</th><th>名称</th><th>数量</th><th>单位</th><th>单价</th><th>成本总价</th><th>销售总价（不含税）</th><th>销售总价（含税)</th></tr></thead><tbody><tr><td>1</td><td>烟雾探测器</td><td>1</td><td>台</td><td>158</td><td>158</td><td>197.5</td><td>231.075</td></tr><tr><td>2</td><td>人体红外探测器</td><td>1</td><td>台</td><td>269</td><td>269</td><td>336.25</td><td>393.4125</td></tr><tr><td>3</td><td>二氧化碳检测器</td><td>1</td><td>台</td><td>980</td><td>980</td><td>1225</td><td>1433.25</td></tr><tr><td>4</td><td>PM2.5监测器</td><td>1</td><td>台</td><td>990</td><td>990</td><td>1237.5</td><td>1447.875</td></tr><tr><td>5</td><td>报警灯</td><td>1</td><td>台</td><td>250</td><td>250</td><td>312.5</td><td>365.625</td></tr><tr><td>6</td><td>换气扇</td><td>1</td><td>台</td><td>450</td><td>450</td><td>562.5</td><td>658.125</td></tr><tr><td>7</td><td>电视机</td><td>1</td><td>台</td><td>2800</td><td>2800</td><td>3500</td><td>4095</td></tr><tr><td>8</td><td>温湿度模块</td><td>1</td><td>台</td><td>280</td><td>280</td><td>350</td><td>409.5</td></tr><tr><td>9</td><td>光照度模块</td><td>1</td><td>台</td><td>458</td><td>458</td><td>572.5</td><td>669.825</td></tr><tr><td>10</td><td>气压传感器</td><td>1</td><td>台</td><td>250</td><td>250</td><td>312.5</td><td>365.625</td></tr><tr><td>11</td><td>空调</td><td>1</td><td>台</td><td>3500</td><td>3500</td><td>4375</td><td>5118.75</td></tr><tr><td>12</td><td>DVD模块</td><td>1</td><td>台</td><td>450</td><td>450</td><td>562.5</td><td>658.125</td></tr><tr><td>13</td><td>窗帘电机模块</td><td>1</td><td>台</td><td>350</td><td>350</td><td>437.5</td><td>511.875</td></tr><tr><td>14</td><td>射灯</td><td>2</td><td>台</td><td>50</td><td>100</td><td>125</td><td>146.25</td></tr><tr><td>15</td><td>网络摄像头</td><td>1</td><td>台</td><td>800</td><td>800</td><td>1000</td><td>1170</td></tr><tr><td>16</td><td>人脸识别模块</td><td>1</td><td>台</td><td>800</td><td>800</td><td>1000</td><td>1170</td></tr><tr><td>17</td><td>可视对讲机</td><td>1</td><td>台</td><td>800</td><td>800</td><td>1000</td><td>1170</td></tr><tr><td>18</td><td>A8网关</td><td>1</td><td>台</td><td>3000</td><td>3000</td><td>3750</td><td>4387.5</td></tr><tr><td>19</td><td>智能网关</td><td>1</td><td>台</td><td>1800</td><td>1800</td><td>2250</td><td>2632.5</td></tr><tr><td>20</td><td>红黑电源线</td><td>30</td><td>米</td><td>3.8</td><td>114</td><td>142.5</td><td>166.725</td></tr><tr><td>21</td><td>PVC缠绕管</td><td>30</td><td>米</td><td>0.5</td><td>15</td><td>18.75</td><td>21.9375</td></tr><tr><td>22</td><td>5类双绞线</td><td>10</td><td>米</td><td>1.5</td><td>15</td><td>18.75</td><td>21.9375</td></tr><tr><td>23</td><td>RJ45水晶头</td><td>20</td><td>个</td><td>1</td><td>20</td><td>25</td><td>29.25</td></tr><tr><td>24</td><td>工业控制用计算机</td><td>3</td><td>台</td><td>8000</td><td>24000</td><td>30000</td><td>35100</td></tr><tr><td>25</td><td>施工设备折旧费</td><td>1</td><td>组</td><td>500</td><td>500</td><td>625</td><td>731.25</td></tr><tr><td>26</td><td>其他耗材</td><td>1</td><td>组</td><td>200</td><td>200</td><td>250</td><td>292.5</td></tr><tr><td>27</td><td>劳动力成本</td><td>3</td><td>人天</td><td>500</td><td>1500</td><td>1875</td><td>2193.75</td></tr><tr><td>总计</td><td></td><td></td><td></td><td></td><td></td><td></td><td>65591.6625</td></tr><tr><td>注：</td><td>公司项目毛利率</td><td>20</td><td>%</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>增值税率</td><td>17</td><td>%</td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="关于第三阶段请看github"><a href="#关于第三阶段请看github" class="headerlink" title="关于第三阶段请看github"></a>关于第三阶段请看github</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SmartHome(第一阶段) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SmartHome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓自定义View折线图</title>
      <link href="/2021/11/15/Android%E6%8A%98%E7%BA%BF%E5%9B%BE/"/>
      <url>/2021/11/15/Android%E6%8A%98%E7%BA%BF%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<center><H1>使用最快速简单方式自定义View动态折线图</H1></center><h1 id="创建自定义类"><a href="#创建自定义类" class="headerlink" title="创建自定义类"></a>创建自定义类</h1><ul><li>创建类让此类继承于View</li></ul><h1 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h1><p>​    当类继承View时需要重写它里面的三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZheXianView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(context);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ZheXianView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(context, attrs);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ZheXianView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​    此时需要在视图窗口中画线条就需要重写onDraw方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定义四个点的坐标"><a href="#定义四个点的坐标" class="headerlink" title="定义四个点的坐标"></a>定义四个点的坐标</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201530200.jpg"></p><h1 id="在重写onDraw方法中添加画笔"><a href="#在重写onDraw方法中添加画笔" class="headerlink" title="在重写onDraw方法中添加画笔"></a>在重写onDraw方法中添加画笔</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201532776.jpg"></p><h1 id="编写线程"><a href="#编写线程" class="headerlink" title="编写线程"></a>编写线程</h1><ul><li>编写线程让界面一直更新从而达到动态折线图的效果</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201535394.jpg"></p><h1 id="handler信息发送"><a href="#handler信息发送" class="headerlink" title="handler信息发送"></a>handler信息发送</h1><ul><li><p>在构造函数中使用handler进行信息的发送</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201538680.jpg"></p></li></ul><h1 id="添加控件"><a href="#添加控件" class="headerlink" title="添加控件"></a>添加控件</h1><ul><li>在布局文件中使用自定义的View控件</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201539548.jpg"></p><h1 id="模拟数据"><a href="#模拟数据" class="headerlink" title="模拟数据"></a>模拟数据</h1><ul><li>在类文件中使用线程进行线程模拟</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201539264.jpg"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java继承</title>
      <link href="/2021/11/06/Java%E7%BB%A7%E6%89%BF/"/>
      <url>/2021/11/06/Java%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<center><h1>Java继承</h1></center><h1 id="继承的实现"><a href="#继承的实现" class="headerlink" title="继承的实现"></a>继承的实现</h1><ul><li><p>继承的概念</p><ul><li>继承是面向对象三大特征之一，可以使子类具有父类的属性和方法，还可以在子类中重新定义，以及追加和方法实现继承的格式</li></ul></li><li><p>继承通过extends实现</p><ul><li>格式: class 子类 extends 父类{}<ul><li>举例: class Dog extends Animal{}</li></ul></li></ul></li><li><p>继承带来的好处:</p><ul><li>继承可以让类与类之间产生关系，子夫类关系，产生子类后，子类则可以使用父类中私有的成员。</li></ul></li><li><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;show方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;method方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象，调用方法</span></span><br><span class="line">Fu f = <span class="keyword">new</span> Fu();</span><br><span class="line">f.show();</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.method();</span><br><span class="line">z.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="继承的好处"><a href="#继承的好处" class="headerlink" title="继承的好处"></a>继承的好处</h2><ul><li>继承的好处<ul><li>提高代码的复用性</li><li>提高代码的维护性</li></ul></li><li>继承弊端<ul><li>继承让类与类之间产生了联系，类的耦合性增强了，当父类发生改变时子类实现也不得不跟着改变，削弱了子类的独立性</li></ul></li><li>继承的应用场景<ul><li>使用继承，需要考虑类与类之间的是否存在is…a关系, 不能盲目使用继承<ul><li>is..a的关系，谁是谁的一种，例如: 老师和学生是人的一种，那人就是父类，学生和老师就是子类</li></ul></li></ul></li></ul><hr><h1 id="继承中的成员访问特点"><a href="#继承中的成员访问特点" class="headerlink" title="继承中的成员访问特点"></a>继承中的成员访问特点</h1><h2 id="继承中变量访问的特点"><a href="#继承中变量访问的特点" class="headerlink" title="继承中变量访问的特点"></a>继承中变量访问的特点</h2><ul><li><p>在子类方法中访问一个变量，采用的是就近原则</p><ol><li>子类局部范文找</li><li>子类成员范围找</li><li>父类成员范围找</li><li>如果都没找到则报错(不考虑父类的父类)</li></ol></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.show(); <span class="comment">// 输出show方法中的局部变量30</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><ul><li><p>this和super关键字</p><ul><li>this 代表本类对象的引用</li><li>super 代表父类存储空间的标识(可以理解为父类对象引用)</li></ul></li><li><p>this和super的使用分别</p><ul><li>成员变量<ul><li>this 成员变量 - 访问本类成员变量</li><li>super 成员变量 - 访问父类成员变量</li></ul></li><li>成员方法<ul><li>this.成员方法 - 访问本类成员方法</li><li>super.成员方法 - 访问父类成员方法 </li></ul></li></ul></li><li><p>构造方法</p><ul><li>this(…)  - 访问本类构造方法</li><li>super(…) - 访问父类构造方法</li></ul></li></ul><hr><h1 id="继承中构造方法的访问特点"><a href="#继承中构造方法的访问特点" class="headerlink" title="继承中构造方法的访问特点"></a>继承中构造方法的访问特点</h1><p><strong>注意</strong>：子类中所有的构造方法默认都会访问父类中无参的构造方法</p><p>​    子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化，原因在于，每一个子类构造方法的第一条语句默认是: <strong>super()</strong></p><p>​    如果父类中没有无参构造方法，只带有参构造方法的情况下可以通过super关键字去显示调用父类的带参数构造方法或者在父类中自己提供一个无参构造方法。</p><hr><h2 id="继承中成员方法的访问特点"><a href="#继承中成员方法的访问特点" class="headerlink" title="继承中成员方法的访问特点"></a>继承中成员方法的访问特点</h2><p>通过子类对象访问一个方法</p><ol><li>子类成员范围找</li><li>父类成员范围找</li><li>如果都没有则报错(不考虑父类的父类)</li></ol><hr><h2 id="super内存"><a href="#super内存" class="headerlink" title="super内存"></a>super内存</h2><ul><li>对象在堆内存中会单独在一块super区域，用来存放父类的数据</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202111061833846.png"></p><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><ol><li>​    方法重写概念<ul><li>方法出现了和父类一模一样的方法声明(<strong>方法名一样，参数列表也必须一样</strong>)</li></ul></li><li>方法重写应用场景<ul><li>当子类需要父类的功能，而功能主体类有自己特有内容时，可以重写父类中的方法，这样即沿袭了父类的功能，又定义了子类特有的内容</li></ul></li><li>Override注解<ul><li>用来检测当前方法，是否是重写的方法，起到了[校验]的作用</li></ul></li></ol><hr><h2 id="方法重写的注意事项"><a href="#方法重写的注意事项" class="headerlink" title="方法重写的注意事项"></a>方法重写的注意事项</h2><ul><li><p>方法重写的注意事项</p><ol><li>私有方法不能被重写(父类私有成员子类是不能继承的)</li><li>子类访问权限不能更低(public &gt; 默认 &gt; 私有)</li></ol></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu中show()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu中method()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="comment">/* 编译【出错】，子类不能重写父类私有的方法*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi中show()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 编译【出错】，子类重写父类方法的时候，访问权限需要大于等于父类 */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi中method()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 编译【通过】，子类重写父类方法的时候，访问权限需要大于等于父类 */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi中method()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Java中继承的注意事项"><a href="#Java中继承的注意事项" class="headerlink" title="Java中继承的注意事项"></a>Java中继承的注意事项</h2><ul><li><p>Java中继承的注意事项</p><ol><li>Java中只支持单继承，不支持多继承</li><li>Java中支持多层继承</li></ol></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Granddad</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;爷爷爱喝酒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Granddad</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;爸爸爱抽烟&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mother</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;妈妈爱跳舞&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="comment">// 此时，Son类中就同时拥有drink方法以及smoke方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><ol><li>包的概念<ul><li>包就是文件夹，用来管理类文件的</li></ul></li><li>包的定义格式<ul><li>package包名;(多级包用.分开)</li><li>例如: package.com.test.dome;</li></ul></li><li>带包编译和带包运行<ul><li>带包编译: javac -d .类名.java<ul><li>例如: javac -d .com.test.dome.Hellorld.java</li></ul></li><li>带包运行: java包名+类名<ul><li>例如:java.com.test.dome.Hellword</li></ul></li></ul></li></ol><hr><h2 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h2><ul><li>导包的意义<ul><li>使用不同包下的类时，使用的时候要写类的全路径</li></ul></li><li>导包的格式<ul><li>格式:import 包名;</li></ul></li></ul><hr><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202111061853046.png"></p><hr><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul><li>final关键字的作用<ul><li>final代表最终的意思，可以修饰成员方法，成员变量，类</li></ul></li><li>final修饰类、方法、变量的效果<ul><li>final修饰类：该类不能被继承(不能有子类、但是可以有父类)</li><li>final修饰方法： 该方法不能被重写</li><li>final修饰变量：表明该变量是一个常量，不能再次赋值</li></ul></li></ul><hr><h2 id="final修饰局部变量"><a href="#final修饰局部变量" class="headerlink" title="final修饰局部变量"></a>final修饰局部变量</h2><ul><li><p>final修饰基本数据类型变量</p><ul><li>final修饰之的基本类型的数据值不能发生改变</li></ul></li><li><p>final修饰引用数据类型变量</p><ul><li><p>final修饰指的是引用类型的地址不能发生改变，但是地址里边的内容是可以放生改变的</p></li><li><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">final</span> Student s = <span class="keyword">new</span> Student(<span class="number">23</span>);</span><br><span class="line">s = <span class="keyword">new</span> Student(<span class="number">24</span>); <span class="comment">// 错误</span></span><br><span class="line">s.setAge(<span class="number">24</span>); <span class="comment">// 正确</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul><li>static的概念<ul><li>static关键字是静态的意思，可以修饰[成员方法]、[成员变量]</li></ul></li><li>static修饰的特点<ol><li>被类的所有对象共享，这也是我们判断是否使用静态关键字的条件</li><li>可以通过类名调用，当然也可以通过对象调用</li></ol></li></ul><hr><h2 id="static访问特点"><a href="#static访问特点" class="headerlink" title="static访问特点"></a>static访问特点</h2><ul><li>static的访问特点<ul><li>非静态的成员方法<ul><li>能访问静态的成员变量</li><li>能访问非静态的成员变量</li><li>能访问静态的成员方法</li><li>能访问非静态的成员方法</li></ul></li><li>静态成员方法<ul><li>能访问静态成员变量</li><li>能访问静态的成员方法</li></ul></li><li>总结<ul><li>静态成员只能访问静态成员</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能家居设备安装方案</title>
      <link href="/2021/11/04/%E8%AE%BE%E5%A4%87%E5%AE%89%E8%A3%85%E6%96%B9%E6%A1%88/"/>
      <url>/2021/11/04/%E8%AE%BE%E5%A4%87%E5%AE%89%E8%A3%85%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<center><h1>    设备安装方案    </h1></center><h1 id="1、引言"><a href="#1、引言" class="headerlink" title="1、引言"></a>1、引言</h1><ul><li>根据贵公司的需求，以智能家居样板操作间为承载平台，为了方便顾客现场体验，我们积极设想并设计出设备安装部署方案</li></ul><h1 id="2、传感器设备物理地址编辑"><a href="#2、传感器设备物理地址编辑" class="headerlink" title="2、传感器设备物理地址编辑"></a>2、传感器设备物理地址编辑</h1><ul><li><p>为了更好的部署智能家居样板间，我们设计了联网设备的物理地址、panid、板号、通道号。</p></li><li><p>具体请参考1-1传感器设备物理地址编辑</p></li><li><center>1-1传感器设备物理地址编辑</center><table><thead><tr><th align="center">序号</th><th align="center">设备名称</th><th align="center">物理地址</th><th align="center">panId</th><th align="center">板号</th><th align="center">通道号</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">温湿度传感器</td><td align="center">00-00-00-00-1B-11-13-01</td><td align="center">01</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">02</td><td align="center">大气压传感器</td><td align="center">00-00-00-00-1B-11-13-02</td><td align="center">02</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">03</td><td align="center">二氧化氮检测器</td><td align="center">00-00-00-00-1B-11-13-03</td><td align="center">03</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">04</td><td align="center">pm2.5检测器</td><td align="center">00-00-00-00-1B-11-13-04</td><td align="center">04</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">05</td><td align="center">燃气检测器</td><td align="center">00-00-00-00-1B-11-13-05</td><td align="center">05</td><td align="center">1B-11</td><td align="center">13</td></tr><tr><td align="center">06</td><td align="center">人体红外探测器</td><td align="center">00-00-00-00-1B-11-13-06</td><td align="center">06</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">07</td><td align="center">光照传感器</td><td align="center">00-00-00-00-1B-11-13-07</td><td align="center">07</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">08</td><td align="center">烟雾传感器</td><td align="center">00-00-00-00-1B-11-13-08</td><td align="center">08</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">09</td><td align="center">报警的</td><td align="center">00-00-00-00-1B-11-13-9</td><td align="center">09</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">10</td><td align="center">换气扇</td><td align="center">00-00-00-00-1B-11-13-10</td><td align="center">10</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">11</td><td align="center">射灯</td><td align="center">00-00-00-00-1B-11-13-10</td><td align="center">11</td><td align="center"></td><td align="center"></td></tr></tbody></table></li></ul><h1 id="3、计算机网络设备IP编辑"><a href="#3、计算机网络设备IP编辑" class="headerlink" title="3、计算机网络设备IP编辑"></a>3、计算机网络设备IP编辑</h1><ul><li><p>为了更好控制联网设备，我们设计了ip进行对设备的联网控制</p></li><li><p>具体请参考1-2计算机网络设备ip编辑</p></li><li><center>1-2计算机网络设备ip编辑</center><table><thead><tr><th align="center">序号</th><th align="center">设备名称</th><th align="center">网络设备IP</th><th align="right">子网掩码</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">服务器</td><td align="center">18.0.10.1</td><td align="right"></td></tr><tr><td align="center">02</td><td align="center">路由器</td><td align="center">18.0.10.2</td><td align="right">255.255.255.0</td></tr><tr><td align="center">03</td><td align="center">A8智能网关</td><td align="center">18.0.10.3</td><td align="right"></td></tr><tr><td align="center">04</td><td align="center">嵌入式移动开发箱</td><td align="center">18.0.10.4</td><td align="right"></td></tr></tbody></table></li></ul><h1 id="4、安装工期及进度"><a href="#4、安装工期及进度" class="headerlink" title="4、安装工期及进度"></a>4、安装工期及进度</h1><ul><li>我们以智能家居样板操作间作为施工，具体开工时间是10与18日结束时期是10月18日，周期为3小时。</li></ul><h1 id="5、安装注意事项"><a href="#5、安装注意事项" class="headerlink" title="5、安装注意事项"></a>5、安装注意事项</h1><ul><li>为了防止安装时出现安全隐患，我们将严格遵守电工规范，断电操作，注意电路正负极，注意接线柱的电压变化，安装时注意团队配合，在他人登梯子的时候必须有人扶助梯子，穿着专业的服饰。</li></ul><h1 id="6、项目施工基本条件及注意事项"><a href="#6、项目施工基本条件及注意事项" class="headerlink" title="6、项目施工基本条件及注意事项"></a>6、项目施工基本条件及注意事项</h1><ul><li>为了方便贵公司参观，我们会将智能家居操作样板间提前部署在贵公司，届时期间可能会有断电、断网的情况发生、由于有些电器安装比较困难，安装时可能会伴随着噪音，我们会尽快完工希望贵公司理解。</li></ul><h1 id="7、合理优化方案"><a href="#7、合理优化方案" class="headerlink" title="7、合理优化方案"></a>7、合理优化方案</h1><ul><li>由于考虑到贵公司不是此方面的专业，我们根据需求将提出如下几点建议<ol><li>为了方便顾客操作，建议购买红外转发器从而使设备更好的控制。</li><li>购入更多的传感器，并将数据加以统计分析。</li><li>定期联系我们对智能电器设备的检查与维护。</li><li>可为智能设备单独分化一个网络频段使网络控制设备更加的稳定。</li></ol></li></ul><h1 id="关于第三阶段请看github"><a href="#关于第三阶段请看github" class="headerlink" title="关于第三阶段请看github"></a>关于第三阶段请看github</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SmartHome(第一阶段) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SmartHome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis入门(四)</title>
      <link href="/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E5%9B%9B)/"/>
      <url>/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<center><h1>注解开发</h1></center><h1 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h1><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><ul><li>大家之前都学过面向对象编程，也学习过接口，但是在真正开发中，很多时候我们会选择面向接口编程</li><li>原因是:<ul><li>解耦合</li><li>可扩展性</li><li>提高复用</li><li>分层开发</li><li>上层不用管具体的的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好</li></ul></li><li>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象写作完成的，在这种情况下，各个对象内部是如何实现自己的，对系统设计人员说就不那么重要了；</li><li>而各个对象之间协作关系成为系统设计的关键，小到不同类之间的通信，大到各种模块的交互，在系统设计之初都是要着重考虑的，这也是系统设计的住哟啊工作内容，面向接口编程就是指按照这种思想来编程的</li><li>关于接口的理解<ul><li>接口从更深层次的理解，应是定义(规范, 约束)与实现(实名分离的原则)的分离</li><li>接口的本身反映了系统设计人员对系统的抽象理解</li><li>接口应有两类<ul><li>第一类是对一个个体的抽象，它可对应为一个抽象体</li><li>第二类是对一个个体某一方面的抽象，即形成一个抽象面</li><li>一个体有可能有多个抽象面， 抽象体与抽象面是有区别的</li></ul></li></ul></li><li>三个面向区别<ul><li>面向对象是指，我们考虑东西的时候，以一个对象为单位，考虑它的属性及方法</li><li>面向过程是指，我们考虑问题的时候，以一个具体流程为单位(事物过程)，考虑它的实现</li><li>接口设计与非接口设计是指对复用技术而言，与面向对象(过程)不是一个问题更多的体现就是对系统整体的架构</li></ul></li></ul><hr><h2 id="使用注解开发-1"><a href="#使用注解开发-1" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><ul><li><p>注解在接口上实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">   <span class="function">List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>需要在核心配置文件中绑定接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.gwl.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.selectAll().forEach(System.out::println);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>本质: 反射机制</p></li><li><p>底层: 动态代理</p></li></ul><h1 id="注解完成增删改查"><a href="#注解完成增删改查" class="headerlink" title="注解完成增删改查"></a>注解完成增删改查</h1><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><ul><li><p><code>我们必须要把注解类绑定注册到mybatis核心配置文件中</code></p></li><li><p>我们可以在工具类创建的时候实现自动提交事物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h2><ul><li><p>接口加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into user(id, name, owd) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.addUser(<span class="keyword">new</span> User(<span class="number">8</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;123&quot;</span>));</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><ul><li><p>接口加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dele</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">     MybatisUtils.getSqlSession().getMapper(UserMapper.class).dele(<span class="number">9</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><ul><li><p>接口加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update user set name=#&#123;name&#125;, owd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MybatisUtils.getSqlSession()</span><br><span class="line">            .getMapper(UserMapper.class)</span><br><span class="line">            .update(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;ll&quot;</span>, <span class="string">&quot;zxcv&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><ul><li><p>接口加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    方法存在多个参数， 所有的参数前面必须加上@Param(&quot;id&quot;)注解</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User userById = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(userById);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Param-注解"><a href="#Param-注解" class="headerlink" title="@Param()注解"></a>@Param()注解</h2><ul><li>基本类型或者String类型 需要加上</li><li>引用类型不需要</li><li>如果只有一个基本类型的话 可以忽略</li><li>我们在sql中引用的就是我们这里的@Param()中这顶的属性名</li></ul><hr><h1 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h1><ul><li>多个学生 对应一个老师</li><li>对于学生而言 多个学生关联一个老师【多对一】</li><li>对于老师而言 集合 一个老师有很多学生【一对多】</li></ul><h2 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.gwl.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        复杂查询的属性， 我们需要单独处理， association对象 collection集合--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentAll2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname from student s, teacher t where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h1><ul><li><p>比如一个老师拥有多个学生</p><ul><li><p>按照结果嵌套处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.id tid</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.id = t.id and t.id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    按照结果查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;student&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按照查询嵌套处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">select * from teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArratList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">get</span>&quot;<span class="attr">getStudentByTeacherId</span>&quot; <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultTpye</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">  select * from student where tid = #&#123;tid&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>association 多对一</p></li><li><p>collection 一对多</p></li><li><p>javaType &amp; ofTpye</p><ul><li>JavaType 用来指定实体类中属性的类型</li><li>ofType 用来指定映射到List或者集合中的pojo类型 泛型中的约束类型</li></ul></li></ul></li></ul><hr><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1>]]></content>
      
      
      <categories>
          
          <category> mybatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据存储框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSwitch和循环语句</title>
      <link href="/2021/11/04/switch%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2021/11/04/switch%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<center> <h1>Switch和循环语句</h1></center><h1 id="switch语句结构"><a href="#switch语句结构" class="headerlink" title="switch语句结构"></a>switch语句结构</h1><ul><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    ... </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>首先计算出表达式的值</p></li><li><p>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束</p></li><li><p>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉</p><p><code>如果switch中得case，没有对应break的话，则会出现case穿透的现象</code></p><blockquote><p>case穿透就是不结束语句直接去判断下一条语句</p></blockquote></li></ol></li></ul><hr><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><ul><li><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul><li><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形成死循环</p></li><li><p>for循环格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句;条件判断语句;条件控制语句) &#123;</span><br><span class="line">  循环体语句; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>格式解释：</p><ul><li>初始化语句： 用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样</li><li>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一</li><li>循环体语句： 用于表示循环反复执行的内容，简单说就是循环反复执行的事情直执行下去</li><li>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</li></ul></li><li><p>执行流程</p><ol><li>执行初始化语句</li><li>执行条件判断语句，看其结果是true还是false<ol><li>如果是false，循环结束</li><li>如果是true，继续执行</li></ol></li><li>执行循环体语句</li><li>执行条件控制语句</li><li>回到2继续</li></ol></li></ul></blockquote></li></ul></li></ul><hr><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><ul><li><h2 id="while循环完整格式"><a href="#while循环完整格式" class="headerlink" title="while循环完整格式"></a>while循环完整格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">初始化语句; </span><br><span class="line"><span class="keyword">while</span> (条件判断语句) &#123;</span><br><span class="line">  循环体语句; 条件控制语句; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h2 id="while循环执行流程"><a href="#while循环执行流程" class="headerlink" title="while循环执行流程"></a>while循环执行流程</h2><ol><li>执行初始化语句</li><li>执行条件判断语句，看其结果是true还是false<ol><li>如果是false，循环结束</li><li>如果是true，继续执行</li></ol></li><li>执行循环体语句</li><li>执行条件控制语句</li><li>回到2继续</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需求：在控制台输出5次&quot;HelloWorld&quot; </span></span><br><span class="line">    <span class="comment">//for循环实现 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;--------&quot;</span>); </span><br><span class="line">    <span class="comment">//while循环实现 </span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>; <span class="keyword">while</span>(j&lt;=<span class="number">5</span>) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>); </span><br><span class="line">      j++; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="do…while循环结构"><a href="#do…while循环结构" class="headerlink" title="do…while循环结构"></a>do…while循环结构</h1><ul><li><h2 id="完整格式"><a href="#完整格式" class="headerlink" title="完整格式"></a>完整格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  循环体语句;</span><br><span class="line">  条件控制语句; </span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br></pre></td></tr></table></figure></li><li><h2 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li>执行初始化语句</li><li>执行循环体语句</li><li>执行条件控制语句</li><li>执行条件判断语句，看其结果是true还是false<ol><li>如果是false，循环结束</li><li>如果是true，继续执行</li></ol></li><li>回到2继续</li></ol></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//需求：在控制台输出5次&quot;HelloWorld&quot; </span></span><br><span class="line">    <span class="comment">//for循环实现 f</span></span><br><span class="line">    or(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;--------&quot;</span>); </span><br><span class="line">    <span class="comment">//do...while循环实现 </span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>; <span class="keyword">do</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>); </span><br><span class="line">      j++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(j&lt;=<span class="number">5</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="三种循环的区别"><a href="#三种循环的区别" class="headerlink" title="三种循环的区别"></a>三种循环的区别</h1><ul><li><h2 id="三种循环的区别-1"><a href="#三种循环的区别-1" class="headerlink" title="三种循环的区别"></a>三种循环的区别</h2><ul><li>for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）</li><li>do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</li></ul></li><li><h2 id="for循环和while的区别"><a href="#for循环和while的区别" class="headerlink" title="for循环和while的区别"></a>for循环和while的区别</h2><ul><li>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了</li><li>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用</li></ul></li><li><h2 id="死循环（无限循环）的三种格式"><a href="#死循环（无限循环）的三种格式" class="headerlink" title="死循环（无限循环）的三种格式"></a>死循环（无限循环）的三种格式</h2><ol><li> for(;;){}</li><li>while(true){}</li><li>do {} while(true);</li></ol></li></ul><hr><h1 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h1><ul><li>跳转控制语句（break）<ul><li>跳出循环，结束循环</li></ul></li><li>跳转控制语句（continue）<ul><li>跳过本次循环，继续下次循环</li></ul></li><li><code>continue只能在循环中进行使用</code></li></ul><hr><h1 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h1><ul><li><p>循环嵌套概述：在循环中，继续定义循环</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">  <span class="comment">//外循环控制小时的范围，内循环控制分钟的范围 </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> hour = <span class="number">0</span>; hour &lt; <span class="number">24</span>; hour++) &#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> minute = <span class="number">0</span>; minute &lt; <span class="number">60</span>; minute++) &#123; </span><br><span class="line">      System.out.println(hour + <span class="string">&quot;时&quot;</span> + minute + <span class="string">&quot;分&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;--------&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>整个内循环，就是外循环的一个循环体，内部循环体没有执行完毕，外循环是不会继续向下执行的</li><li>外循环执行一次，内循环执行一圈</li></ul></blockquote></li></ul><hr><h1 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h1><ul><li><h2 id="Random产生随机数"><a href="#Random产生随机数" class="headerlink" title="Random产生随机数"></a>Random产生随机数</h2></li><li><p>Random类似Scanner，也是Java提供好的API，内部提供了产生随机数的功能</p><ul><li>API可以理解为Java已经写好的代码</li></ul></li><li><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li><p>导包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br></pre></td></tr></table></figure></li><li><p>创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Random r = <span class="keyword">new</span> Random();</span><br></pre></td></tr></table></figure></li><li><p>产生随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = r.nextInt(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><blockquote><p> 10代表的是一个范围，如果括号写10，产生的随机数就是0-9，括号写20，参数的随机数则是0-19</p></blockquote></li></ol></li><li><p>示例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//创建对象 </span></span><br><span class="line">    Random r = <span class="keyword">new</span> Random(); </span><br><span class="line">    <span class="comment">//用循环获取10个随机数 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123; </span><br><span class="line">      <span class="comment">//获取随机数 </span></span><br><span class="line">      <span class="keyword">int</span> number = r.nextInt(<span class="number">10</span>); </span><br><span class="line">      System.out.println(<span class="string">&quot;number:&quot;</span> + number); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//需求：获取一个1-100之间的随机数 </span></span><br><span class="line">    <span class="keyword">int</span> x = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>; </span><br><span class="line">    System.out.println(x); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis入门(三)</title>
      <link href="/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%B8%89)/"/>
      <url>/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<center><h1>核心配置文件</h1></center><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="configuration配置"><a href="#configuration配置" class="headerlink" title="configuration配置"></a>configuration配置</h2><ul><li>配置文档的顶层结构<ul><li>properties属性</li><li>settings设置</li><li>typeAliases类型别名</li><li>typeHandlers类型处理器</li><li>objectFactory对象工厂</li><li>plugins插件</li><li>environments环境配置<ul><li>environment环境变量<ul><li>transactionManager事物管理器</li><li>dataSource数据源</li></ul></li><li>databaseldProvider数据库厂标识</li><li>mapper映射器</li></ul></li></ul></li></ul><hr><h2 id="配置环境-evironments"><a href="#配置环境-evironments" class="headerlink" title="配置环境(evironments)"></a>配置环境(evironments)</h2><ul><li>Mybatis 可以配置成适应多种环境<ul><li>即使可以配置多个环境，但每个SqlSessionFactory实例只能选者一种环境</li></ul></li><li>Mybatis默认的事物管理器是 jdbc， 连接池: POOLED</li></ul><h2 id="属性-properties"><a href="#属性-properties" class="headerlink" title="属性(properties)"></a>属性(properties)</h2><ul><li><p>我们可以通关properties属性来实现应用配置文件</p><ul><li><p>resources文件夹中编写peoperties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span> = <span class="string">jdbc:mysql://localhost:3307/mybatis?userSSL=true&amp;amp;userUnicode&amp;amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="meta">jdbc.user</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span> = <span class="string">gwl2003.520</span></span><br></pre></td></tr></table></figure></li><li><p>通过properties标签引入配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="别名-typeAliases"><a href="#别名-typeAliases" class="headerlink" title="别名(typeAliases)"></a>别名(typeAliases)</h2><ul><li><p>类型别名是为java类型设置一个短的名字</p></li><li><p>存在的意义仅在于用来减少完全限定名的沉余 </p></li><li><p><code>类使用别名后，原来的类名不能用，全部都得换</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    给实体类起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>也可以指定一个包名，Mybatis会在包名下搜索需要的JavaBean</p><ul><li><p>扫描实体类的包，它的默认别名就为这个类的类名首写字母</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.gwl.pojo.User&quot; alias=&quot;user&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.gwl.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实体类比较少的时候使用第一种方式， 如果实体类比较多的话推荐使用第二种</p><ul><li><p>第一种可以自定义别名， 第二种不行，如果非要修改需要在实体类上增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//别名注解</span></span><br><span class="line"><span class="meta">@Alias(&quot;hello&quot;)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202110081553921.png"></p></li></ul><hr><h2 id="设置-sttings"><a href="#设置-sttings" class="headerlink" title="设置(sttings)"></a>设置(sttings)</h2><p>这是mybatis中重要的调整设置, 它会改变mybatis的运行行为</p><p>日志的实现</p><p><img src="https://gitee.com/airgwl/upic/raw/master/img/image-20211008161107186.png" alt="image-20211008161107186"></p><p>缓存和懒加载</p><p>![image-20211008161224925](/Users/gwl/Library/Application Support/typora-user-images/image-20211008161224925.png)</p><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><ul><li><p>typerHandlers(类处理器)</p></li><li><p>objectFactory(对象工厂)</p></li><li><p>plugins插件</p><ul><li>mybatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ul></li></ul><h2 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h2><ul><li><p>MapperRegistry: 注册绑定我们的Mapper文件</p><ul><li>方式一</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mybatis-user-config.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>方式二:使用class文件绑定注册</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.gwl.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>方式二注意点:<ul><li>接口和他的mapper配置文件必须同名</li><li>接口和他的mapper配置文件必须要在同一包下</li></ul></li></ul></blockquote><ul><li><p>方式三：使用扫描包进行注入绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;mybatis-user-config.xml&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper class=&quot;com.gwl.mapper.UserMapper&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.gwl.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>方式二注意点:<ul><li>接口和他的mapper配置文件必须同名</li><li>接口和他的mapper配置文件必须要在同一包下</li></ul></li></ul></blockquote></li></ul></li></ul><hr><h1 id="ResultMap结果集映射"><a href="#ResultMap结果集映射" class="headerlink" title="ResultMap结果集映射"></a>ResultMap结果集映射</h1><ul><li><p><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</p></li><li><p>当实体类中的字段名和数据库的字段名不匹配时不用resultMap是这样的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    user_id             as &quot;id&quot;,</span><br><span class="line">    user_name           as &quot;userName&quot;,</span><br><span class="line">    hashed_password     as &quot;hashedPassword&quot;</span><br><span class="line">  from some_table</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当使用resultMap时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resultMap的实体类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--实体类的字段数据库中的字段--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;owd&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在标签中使用resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resultMap的id--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h2><ul><li><p>如果一个数据库操作，出现了异常，我们需要排错，日志就是最好的助手</p><p><img src="https://gitee.com/airgwl/upic/raw/master/img/image-20211008194625011.png" alt="image-20211008194625011"></p><ul><li>SLF4J</li><li>LOG4J </li><li> LOG4J2 </li><li> JDK_LOGGING </li><li> COMMONS_LOGGING</li><li> STDOUT_LOGGING</li><li> NO_LOGGING</li></ul></li><li><p>在mybatis核心配置文件中配置日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>日志打印信息</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master/img/image-20211008195654898.png" alt="image-20211008195654898"></p></li></ul><h2 id="LOG4J"><a href="#LOG4J" class="headerlink" title="LOG4J"></a>LOG4J</h2><ul><li><p>什么是LOG4J</p><ul><li>log4j是apache的一个开源项目，通过使用log4j，我们可以控制日志信息输送的目的是控制台、文件、GUI组件 </li><li>我们也可以控制每一条日志的输出格式</li><li>我们通过每一条日志信息的级别，我们能够更加细致地控制日志生成的过程</li><li>通过一个配置文件来灵活的进行配置，而不需要修改代码</li></ul></li><li><p>使用步骤</p><ol><li><p>导入jar包或者maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在mybatis核心配置文件中配置LOG4J</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        标准的日志工厂--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写log4j.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">【%c】-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/java.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">【%p】【%d&#123;yy-MM-dd&#125;】【%c】%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><ul><li><p>日志输出样式</p><p><img src="https://gitee.com/airgwl/upic/raw/master/img/image-20211008202826129.png" alt="image-20211008202826129"></p></li></ul></li><li><p>简单使用步骤</p><ol><li><p>在要使用LOG4J的类中导入包<code>import org.apache.log4j.Logger;</code></p></li><li><p>日志对象 参数为当前类的class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest.class);</span><br></pre></td></tr></table></figure></li><li><p>日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug:进入类testLog4j&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error:进入了testLog4j&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul><hr><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><ul><li><h2 id="为了减少数据的处理量所以采用分页进行数据展示"><a href="#为了减少数据的处理量所以采用分页进行数据展示" class="headerlink" title="为了减少数据的处理量所以采用分页进行数据展示"></a>为了减少数据的处理量所以采用分页进行数据展示</h2></li><li><p>mysql中使用LImit分页的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user limit 起始startIndex, pageSize;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用Sql语句实现分页"><a href="#使用Sql语句实现分页" class="headerlink" title="使用Sql语句实现分页"></a>使用Sql语句实现分页</h2><ol><li><p>接口 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    分页</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String, Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from user limit #&#123;startIndex&#125;, #&#123;pageSize&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">       UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">       Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;startIndex&quot;</span>, <span class="number">1</span>);</span><br><span class="line">       map.put(<span class="string">&quot;pageSize&quot;</span>, <span class="number">2</span>);</span><br><span class="line">       <span class="keyword">for</span> (User user : mapper.getUserByLimit(map)) &#123;</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="RowBounds分页"><a href="#RowBounds分页" class="headerlink" title="RowBounds分页"></a>RowBounds分页</h2><ul><li><p>不在使用SQL分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRowBounds</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">       List&lt;User&gt; user = sqlSession.selectList(<span class="string">&quot;com.com.gwl.mapper.UserMapper.getUserRowBounds&quot;</span>, <span class="keyword">null</span>, <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">       user.forEach(System.out::println);</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><ul><li>Mybatis分页插件PageHelp<ul><li><a href="https://pagehelper.github.io/docs/howtouse/">点我查看帮助手册</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> mybatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据存储框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis入门(一)</title>
      <link href="/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%B8%80)/"/>
      <url>/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<center><h1>Mybatis入门(一)</h1></center><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h2><ul><li>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录</li></ul><hr><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="安装Mybatis"><a href="#安装Mybatis" class="headerlink" title="安装Mybatis"></a>安装Mybatis</h2><ul><li><p>要使用 MyBatis， 只需将 <a href="https://github.com/mybatis/mybatis-3/releases">mybatis-x.x.x.jar</a> 文件置于类路径（classpath）中即可</p></li><li><p>如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个Mybatis程序</h2><ul><li>思路<ol><li>搭建环境</li><li>导入mybatis</li><li>编写代码</li><li>测试</li></ol></li></ul><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure></li><li><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">&quot;id&quot; <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,</span><br><span class="line">  &quot;name&quot; <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  &quot;pwd&quot; <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>插入测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id, name, pwd) <span class="keyword">values</span>(&quot;1&quot;, &quot;java&quot;, &quot;123456&quot;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="导入mybatis"><a href="#导入mybatis" class="headerlink" title="导入mybatis"></a>导入mybatis</h2><ul><li><p>新建一个普通的maven项目</p></li><li><p>删除src目录</p></li><li><p>导入mysql、mybatis、junit这三个坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个子模块</p></li><li><p>在resources下创建配置文件并配置</p><ul><li>数据库url要设置字符才不会出现存储中文乱码现象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3307/mybatis?userSSL=true<span class="symbol">&amp;amp;</span>userUnicode<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;gwl2003.520&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加注册中心   --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mybatis-user-mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写mybatis工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从 SqlSessionFactory 中获取 SqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream resourceAsStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//User实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String owd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> owd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOwd</span><span class="params">(String owd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.owd = owd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UserMapper&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, owd=&#x27;&quot;</span> + owd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在resources目录下实现接口配置文件(文件名随意)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.gwl.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在Test目录下编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; user = mapper.getUser();</span><br><span class="line">        user.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>启动运行代码</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> mybatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据存储框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis入门(二)</title>
      <link href="/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%BA%8C)/"/>
      <url>/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<center><h1>Mybatis入门(二)</h1></center><h1 id="Mybatis增删改查"><a href="#Mybatis增删改查" class="headerlink" title="Mybatis增删改查"></a>Mybatis增删改查</h1><ul><li>选择，查询语句<ul><li>id: 就是应对的namespace中的方法名</li><li>resultType: Sql语句的执行返回值</li><li>prarmeterType: 参数类型</li></ul></li><li><code>增删改需要提交事物</code></li></ul><hr><h2 id="Select语句"><a href="#Select语句" class="headerlink" title="Select语句"></a>Select语句</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User userById = mapper.getUserById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(userById);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Insert语句"><a href="#Insert语句" class="headerlink" title="Insert语句"></a>Insert语句</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  插入用户insert</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user (id, name, owd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;owd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.addUser(<span class="keyword">new</span> User(<span class="number">6</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;12345&quot;</span>));</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Update语句"><a href="#Update语句" class="headerlink" title="Update语句"></a>Update语句</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upDataUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;upDataUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       update user set name=#&#123;name&#125;, owd=#&#123;owd&#125; where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updataUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.upDataUser(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;hh&quot;</span>, <span class="string">&quot;1234&quot;</span>));</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Delete语句"><a href="#Delete语句" class="headerlink" title="Delete语句"></a>Delete语句</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    删除一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">       delete from user where id = 2;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dele</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.deleteUser(<span class="number">2</span>);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="传递Map集合"><a href="#传递Map集合" class="headerlink" title="传递Map集合"></a>传递Map集合</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map方式</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUserDate</span><span class="params">(Map&lt;String, Object&gt; hmp)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUserDate&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into user (id, name, owd) values (#&#123;userid&#125;, #&#123;username&#125;, #&#123;userpwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inserUserDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; hmp = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    hmp.put(<span class="string">&quot;userid&quot;</span>, <span class="number">7</span>);</span><br><span class="line">    hmp.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">    hmp.put(<span class="string">&quot;userpwd&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    mapper.insertUserDate(hmp);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>map的主键要和mapper中的#&#123;&#125;里面的值一一对应</code></li><li>map传递参数，直接在sql中取出key</li><li>对象传递参数，直接在sql中取对象的属性</li><li>只有一个基本类型参数的情况下，可以直接在sql中取到</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> mybatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据存储框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运算符号和分支语句</title>
      <link href="/2021/11/04/Java%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7%E5%92%8C%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2021/11/04/Java%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7%E5%92%8C%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<center><h1>运算符和分支语句</h1></center><h2 id="运算法和表达式"><a href="#运算法和表达式" class="headerlink" title="运算法和表达式"></a>运算法和表达式</h2><ul><li><p>运算符: 对常量或者变量进行操作的符号</p></li><li><p>表达式: 用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式 </p></li><li><p>不同运算副连接的表达式体现的是不同类型的表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br></pre></td></tr></table></figure><blockquote><p>+ :是运算符</p><p>a+b: 是表达式， 由于+是算术运算符，所以这个表达式叫算术表达式</p></blockquote></li></ul><hr><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><ul><li><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>两数相加</td></tr><tr><td>-</td><td>减</td><td>两数相减</td></tr><tr><td>*</td><td>乘</td><td>两数相乘</td></tr><tr><td>/</td><td>除</td><td>两数相除</td></tr><tr><td>%</td><td>取余</td><td>获取两个数据做除法的余数</td></tr></tbody></table></li><li><blockquote><p>/和%的区别: 两个数据做除法, /取结果的商, %取结果的余数</p><p>整数操作只能得到整数, 想要得到小数, 必须有浮点数参与运算</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">System.out.println(a/b); <span class="comment">// 输出结果3</span></span><br><span class="line">System.out.println(a%b); <span class="comment">//输出结果1</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="字符的-操作"><a href="#字符的-操作" class="headerlink" title="字符的+操作"></a><strong>字符</strong>的+操作</h2><ul><li><p>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值</p><ul><li><p>‘a’ – 97 a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加</p></li><li><p>‘A’ – 65 A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加</p></li><li><p>‘0’ – 48 0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少</span></span><br><span class="line"><span class="keyword">char</span> ch1 = <span class="string">&#x27;a&#x27;</span>; </span><br><span class="line">System.out.println(ch1 + <span class="number">1</span>); <span class="comment">// 输出98，97 + 1 = 98 </span></span><br><span class="line"><span class="keyword">char</span> ch2 = <span class="string">&#x27;A&#x27;</span>; </span><br><span class="line">System.out.println(ch2 + <span class="number">1</span>); <span class="comment">// 输出66，65 + 1 = 66 </span></span><br><span class="line"><span class="keyword">char</span> ch3 = <span class="string">&#x27;0&#x27;</span>; </span><br><span class="line">System.out.println(ch3 + <span class="number">1</span>); <span class="comment">// 输出49，48 + 1 = 49</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升</p><ul><li><h2 id="提升规则"><a href="#提升规则" class="headerlink" title="提升规则"></a>提升规则</h2><ul><li><p>byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。</p></li><li><p>整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型</p></li><li><p>等级顺序：byte,short,char –&gt; int –&gt; long –&gt; flfloat –&gt; double</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">20</span>; <span class="comment">// byte b3 = b1 + b2;</span></span><br><span class="line"><span class="comment">// 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失 精度</span></span><br><span class="line"><span class="keyword">int</span> i3 = b1 + b2; <span class="comment">// 应该使用int接收 </span></span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>) (b1 + b2); <span class="comment">// 或者将结果强制转换为byte类型 </span></span><br><span class="line">------------------------------- </span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> num2 = <span class="number">20.0</span>;</span><br><span class="line"><span class="keyword">double</span> num3 = num1 + num2; <span class="comment">// 使用double接收，因为num1会自动提升为double类型</span></span><br></pre></td></tr></table></figure><blockquote><p>tips：正是由于上述原因，所以在程序开发中我们很少使用byte或者short类型定义整数。也很少会使用char类型定</p><p>义字符，而使用字符串类型，更不会使用char类型做算术运算。</p></blockquote></li></ul></li></ul></li></ul><hr><h2 id="字符串的-操作"><a href="#字符串的-操作" class="headerlink" title="字符串的+操作"></a><strong>字符串</strong>的+操作</h2><ul><li><p>当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;java&quot;</span>+ <span class="number">666</span>); <span class="comment">// 输出：java666</span></span><br></pre></td></tr></table></figure></li><li><p>在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右逐个执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="number">99</span> + <span class="string">&quot;年&quot;</span>); <span class="comment">// 输出：199年黑马 </span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;java&quot;</span> + <span class="number">3</span> + <span class="number">4</span>); <span class="comment">// 输出：3java34 </span></span><br><span class="line"><span class="comment">// 可以使用小括号改变运算的优先级 </span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;java&quot;</span> + (<span class="number">3</span> + <span class="number">4</span>)); <span class="comment">// 输出：3java7</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ul><li><p>赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</p></li><li><table><thead><tr><th align="center"><strong>符号</strong></th><th align="center"><strong>作用</strong></th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">赋值</td><td align="center">a=10，将10赋值给变量a</td></tr><tr><td align="center">+=</td><td align="center">加后赋值</td><td align="center">a+=b，将a+b的值给a</td></tr><tr><td align="center">-=</td><td align="center">减后赋值</td><td align="center">a-=b，将a-b的值给a</td></tr><tr><td align="center">*=</td><td align="center">乘后赋值</td><td align="center">a*=b，将a×b的值给a</td></tr><tr><td align="center">/=</td><td align="center">除后赋值</td><td align="center">a/=b，将a÷b的商给a</td></tr><tr><td align="center">%=</td><td align="center">取余后赋值</td><td align="center">a%=b，将a÷b的余数给a</td></tr></tbody></table><blockquote><p>扩展的赋值运算符隐含了强制类型转换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line">s = s + <span class="number">10</span>; <span class="comment">// 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度 </span></span><br><span class="line">s += <span class="number">10</span>; <span class="comment">// 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10);</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><ul><li><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>自增</td><td>变量的值加1</td></tr><tr><td>–</td><td>自减</td><td>变量的值减1</td></tr></tbody></table></li><li><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h2><ul><li>++和– 既可以放在变量的后边，也可以放在变量的前边</li><li>单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的</li><li>参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–</li><li>参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作</li></ul></li><li><p>最常见的用法：单独使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>; i++; <span class="comment">// 单独使用 </span></span><br><span class="line">System.out.println(<span class="string">&quot;i:&quot;</span> + i); <span class="comment">// i:11 </span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line">++j; <span class="comment">// 单独使用 </span></span><br><span class="line">System.out.println(<span class="string">&quot;j:&quot;</span> + j); <span class="comment">// j:11 </span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> y = x++; <span class="comment">// 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1 </span></span><br><span class="line">System.out.println(<span class="string">&quot;x:&quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y); <span class="comment">// x:11，y:10 </span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> n = ++m; <span class="comment">// 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1 </span></span><br><span class="line">System.out.println(<span class="string">&quot;m:&quot;</span> + m + <span class="string">&quot;, m:&quot;</span> + m); <span class="comment">// m:11，m:11</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><ul><li><p>关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td>!=</td><td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td></tr><tr><td>&gt;</td><td>a&gt;b，判断a是否大于b，成立为true，不成立为false</td></tr><tr><td>&gt;=</td><td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td>&lt;</td><td>a&lt;b，判断a是否小于b，成立为true，不成立为false</td></tr><tr><td>&lt;=</td><td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table><blockquote><p>关系运算符的结果都是boolean类型，要么是true，要么是false</p><p>千万不要把**“==”误写成“=”，”==”**是判断是否相等的关系，”=”是赋值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;<span class="keyword">int</span> b = <span class="number">20</span>;System.out.println(a == b); <span class="comment">// false System.out.println(a != b); // true System.out.println(a &gt; b); // false System.out.println(a &gt;= b); // false System.out.println(a &lt; b); // true System.out.println(a &lt;= b); // true// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量 boolean flag = a &gt; b; System.out.println(flag); // 输出false</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li><p>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false</p><table><thead><tr><th align="center">符号</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">逻辑与</td><td align="center">a&amp;b，a和b都是true，结果为true，否则为false</td></tr><tr><td align="center">|</td><td align="center">逻辑或</td><td align="center">a|b, a和b都是false, 结果为false, 否则为true</td></tr><tr><td align="center">^</td><td align="center">逻辑异或</td><td align="center">a^b，a和b结果不同为true，相同为false</td></tr><tr><td align="center">!</td><td align="center">逻辑非</td><td align="center">!a，结果和a的结果正好相反</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义变量 int i = 10; int j = 20; int k = 30; //&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为false System.out.println((i &gt; j) &amp; (i &gt; k)); //false &amp; false,输出false System.out.println((i &lt; j) &amp; (i &gt; k)); //true &amp; false,输出false System.out.println((i &gt; j) &amp; (i &lt; k)); //false &amp; true,输出false System.out.println((i &lt; j) &amp; (i &lt; k)); //true &amp; true,输出true System.out.println(&quot;--------&quot;);//| “或”，或者的关系，只要表达式中有一个值为true，结果即为true System.out.println((i &gt; j) | (i &gt; k)); //false | false,输出false System.out.println((i &lt; j) | (i &gt; k)); //true | false,输出true System.out.println((i &gt; j) | (i &lt; k)); //false | true,输出true System.out.println((i &lt; j) | (i &lt; k)); //true | true,输出true System.out.println(&quot;--------&quot;);//^ “异或”，相同为false，不同为true System.out.println((i &gt; j) ^ (i &gt; k)); //false ^ false,输出false System.out.println((i &lt; j) ^ (i &gt; k)); //true ^ false,输出trueSystem.out.println((i &gt; j) ^ (i &lt; k)); //false ^ true,输出true System.out.println((i &lt; j) ^ (i &lt; k)); //true ^ true,输出false System.out.println(&quot;--------&quot;);//! “非”，取反 System.out.println((i &gt; j)); //false System.out.println(!(i &gt; j)); //!false，,输出true</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h2><ul><li><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>短路与</td><td>作用和&amp;相同，但是有短路效果</td></tr><tr><td>||</td><td>短路或</td><td>作用和</td></tr></tbody></table><p>在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式将不再参与运算。</p><ul><li><p>逻辑与&amp;，无论左边真假，右边都要执行</p></li><li><p>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行</p></li><li><p>逻辑或|，无论左边真假，右边都要执行</p></li><li><p>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;<span class="keyword">int</span> y = <span class="number">4</span>;System.out.println((x++ &gt; <span class="number">4</span>) &amp; (y++ &gt; <span class="number">5</span>)); <span class="comment">// 两个表达都会运算 System.out.println(x); // 4 System.out.println(y); // 5 System.out.println((x++ &gt; 4) &amp;&amp; (y++ &gt; 5)); // 左边已经可以确定结果为false，右边不参与运算 System.out.println(x); // 4 System.out.println(y); // 4</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><ul><li><h2 id="三元运算符语法格式"><a href="#三元运算符语法格式" class="headerlink" title="三元运算符语法格式"></a>三元运算符语法格式</h2><ul><li><p><code>关系表达式 ? 表达式1 : 表达式2;</code></p></li><li><p>问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;<span class="keyword">int</span> b = <span class="number">20</span>;<span class="keyword">int</span> c = a &gt; b ? a : b; <span class="comment">// 判断 a&gt;b 是否为真，如果为真取a的值，如果为假，取b的值</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h2><ul><li><h2 id="以通过-Scanner-类来获取用户的输入"><a href="#以通过-Scanner-类来获取用户的输入" class="headerlink" title="以通过 Scanner 类来获取用户的输入"></a>以通过 Scanner 类来获取用户的输入</h2><ol><li><p>导包, Scanner 类在java.util包下，所以需要将该类导入, 导包的语句需要定义在类的上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure></li><li><p>创建scanner对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">// 创建Scanner对象，sc表示变量名，其他均不可变</span></span><br></pre></td></tr></table></figure></li><li><p>接收数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = sc.nextInt(); <span class="comment">// 表示将键盘录入的值作为int数返回。</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//创建对象 </span></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in); </span><br><span class="line">    <span class="comment">//接收数据 </span></span><br><span class="line">    <span class="keyword">int</span> x = sc.nextInt(); </span><br><span class="line">    <span class="comment">//输出数据 </span></span><br><span class="line">    System.out.println(<span class="string">&quot;x:&quot;</span> + x); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><ul><li><h2 id="流程控制语句分类"><a href="#流程控制语句分类" class="headerlink" title="流程控制语句分类"></a>流程控制语句分类</h2><ul><li><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2></li><li>分支结构(if, switch)</li><li>循环结构(for, while, do…while)</li></ul></li><li><h2 id="顺序结构-1"><a href="#顺序结构-1" class="headerlink" title="顺序结构"></a>顺序结构</h2><ul><li><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的</p></li><li><p>顺序结构的流程图:</p><center>   <img src="https://gitee.com/airgwl/upic/raw/master//img/202110061500594.png" width="30%">   </center></li></ul></li></ul><p>​        </p><ul><li><h1 id="if语句格式1"><a href="#if语句格式1" class="headerlink" title="if语句格式1"></a>if语句格式1</h1><ul><li><h2 id="if语句格式"><a href="#if语句格式" class="headerlink" title="if语句格式"></a>if语句格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式： <span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">  语句体; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>首先计算关系表达式的值</p></li><li><p>如果关系表达式的值为true就执行语句体</p></li><li><p>如果关系表达式的值为false就不执行语句体</p></li><li><p>继续执行后面的语句内容</p><center><img src="https://gitee.com/airgwl/upic/raw/master//img/202110061513111.png" width="50%"></center></li><li><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;开始&quot;</span>); <span class="comment">//定义两个变量 </span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>; </span><br><span class="line">    <span class="comment">//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b </span></span><br><span class="line">    <span class="keyword">if</span>(a == b) &#123; System.out.println(<span class="string">&quot;a等于b&quot;</span>); &#125;</span><br><span class="line">    <span class="comment">//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c </span></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">if</span>(a == c) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;a等于c&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;结束&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h1 id="if语句格式2"><a href="#if语句格式2" class="headerlink" title="if语句格式2"></a>if语句格式2</h1></li><li><h2 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>首先计算关系表达式的值</p></li><li><p>如果关系表达式的值为true就执行语句体1</p></li><li><p>如果关系表达式的值为false就执行语句体2</p></li><li><p>继续执行后面的语句内容</p><center><img src="https://gitee.com/airgwl/upic/raw/master//img/202110061527744.png" width="50%"></center></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo02</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;开始&quot;</span>); </span><br><span class="line">  <span class="comment">//定义两个变量 </span></span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line">  <span class="keyword">int</span> b = <span class="number">20</span>; </span><br><span class="line">  b = <span class="number">5</span>; <span class="comment">//需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b </span></span><br><span class="line">  <span class="keyword">if</span>(a &gt; b) &#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;a的值大于b&quot;</span>); </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;a的值不大于b&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><h1 id="if语句格式3"><a href="#if语句格式3" class="headerlink" title="if语句格式3"></a>if语句格式3</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式： </span><br><span class="line">  <span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123; </span><br><span class="line">    语句体<span class="number">1</span>; </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>; </span><br><span class="line">  &#125;…<span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><h2 id="执行流程-2"><a href="#执行流程-2" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>首先计算关系表达式1的值</p></li><li><p>如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</p></li><li><p>如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</p></li><li><p>…</p></li><li><p>如果没有任何关系表达式为true，就执行语句体n+1</p><center>    <img src="https://gitee.com/airgwl/upic/raw/master//img/202110061541304.png"/> </center></li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象</title>
      <link href="/2021/11/04/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/11/04/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<center><H1>面向对象</H1></center><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><ul><li><p>客观存在的事物称为对象，所以常常说万物皆对象</p></li><li><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li>类的理解<ul><li>类是对现实生活中一类具有共同属性行为的事物的抽象</li><li>类是对象的数据行为，类是具有共同属性行为的一组对象集合</li><li>简单理解 类就是对现实事物的一种描述</li></ul></li><li>类的组成<ul><li>属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）</li><li>行为：指事物能执行的操作，例如：手机事物（打电话，发短信）</li></ul></li></ul></li><li><h2 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h2><ul><li>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>对象：是能够看得到摸的着的真实存在的实体</li><li>简单理解：类是对事物的一种描述，对象则为具体存在的事物</li></ul></li></ul><hr><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><ul><li><h2 id="类的组成是由属性和行为两部分组成"><a href="#类的组成是由属性和行为两部分组成" class="headerlink" title="类的组成是由属性和行为两部分组成"></a>类的组成是由属性和行为两部分组成</h2><ul><li>属性：在类中通过成员变量来体现（类中方法外的变量）</li><li>行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）</li></ul></li><li><h2 id="类的定义步骤"><a href="#类的定义步骤" class="headerlink" title="类的定义步骤"></a>类的定义步骤</h2><ol><li><p>定义类</p></li><li><p>编写类的成员变量</p><ol><li><p>编写类的成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123; </span><br><span class="line">  <span class="comment">// 成员变量 </span></span><br><span class="line">  变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>； </span><br><span class="line">  变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;</span><br><span class="line">  …</span><br><span class="line">  <span class="comment">// 成员方法 </span></span><br><span class="line">  方法<span class="number">1</span>; </span><br><span class="line">  方法<span class="number">2</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 手机类：</span></span><br><span class="line"><span class="comment">     类名：</span></span><br><span class="line"><span class="comment">      手机(Phone) </span></span><br><span class="line"><span class="comment">      成员变量：</span></span><br><span class="line"><span class="comment">      品牌(brand) </span></span><br><span class="line"><span class="comment">      价格(price) </span></span><br><span class="line"><span class="comment">      成员方法： </span></span><br><span class="line"><span class="comment">      打电话(call)</span></span><br><span class="line"><span class="comment">      发短信(sendMessage) */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123; </span><br><span class="line">  <span class="comment">//成员变量 </span></span><br><span class="line">  String brand; </span><br><span class="line">  <span class="keyword">int</span> price; </span><br><span class="line">  <span class="comment">//成员方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;打电话&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;发短信&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul><hr><h2 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h2><ul><li><p>创建对象的格式:</p><ul><li>类名 对象名 = new 类名();</li></ul></li><li><p>调用成员的格式</p><ul><li>对象名.成员变量</li><li>对象名.成员方法();</li></ul></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建对象格式：</span></span><br><span class="line"><span class="comment">      类名 对象名 = new 类名();</span></span><br><span class="line"><span class="comment">      范例：Phone p = new Phone(); </span></span><br><span class="line"><span class="comment">      使用对象</span></span><br><span class="line"><span class="comment">          1：使用成员变量 </span></span><br><span class="line"><span class="comment">              格式：对象名.变量名 </span></span><br><span class="line"><span class="comment">              范例：p.brand </span></span><br><span class="line"><span class="comment">          2：使用成员方法 </span></span><br><span class="line"><span class="comment">             格式：对象名.方法名() </span></span><br><span class="line"><span class="comment">             范例：p.call() </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    Phone p = <span class="keyword">new</span> Phone(); <span class="comment">//使用成员变量</span></span><br><span class="line">    System.out.println(p.brand); </span><br><span class="line">    System.out.println(p.price); </span><br><span class="line">    p.brand = <span class="string">&quot;小米&quot;</span>;</span><br><span class="line">    p.price = <span class="number">2999</span>; </span><br><span class="line">    System.out.println(p.brand); </span><br><span class="line">    System.out.println(p.price); </span><br><span class="line">    <span class="comment">//使用成员方法 </span></span><br><span class="line">    p.call(); </span><br><span class="line">    p.sendMessage(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h1><ul><li>成员变量和局部变量的区别<ul><li>类中位置不同 成员变量（类中方法外）局部变量（方法内部或方法声明上）</li><li>内存中位置不同：成员变量（堆内存）局部变量（栈内存）</li><li>生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失）</li><li>初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）</li></ul></li></ul><hr><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><ul><li><h2 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h2><ul><li><p>private是一个修饰符 可以用来修饰成员(成员变量，成员方法)</p></li><li><p>被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</p><ul><li><p>提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</p></li><li><p>提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 学生类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">  <span class="comment">//成员变量 </span></span><br><span class="line">  String name; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">  <span class="comment">//提供get/set方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span> || a&gt;<span class="number">120</span>) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;你给的年龄有误&quot;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      age = a; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//成员方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 学生测试类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//创建对象 </span></span><br><span class="line">    Student s = <span class="keyword">new</span> Student(); </span><br><span class="line">    <span class="comment">//给成员变量赋值 </span></span><br><span class="line">    s.name = <span class="string">&quot;林青霞&quot;</span>; </span><br><span class="line">    s.setAge(<span class="number">30</span>); </span><br><span class="line">    <span class="comment">//调用show方法 </span></span><br><span class="line">    s.show(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr></li><li><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2></li><li><ul><li><p>this修饰的变量指代成员变量， 其主要作用是(区分局部变量和成员变量的重名问题)</p><ul><li><p>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</p></li><li><p>方法的形参没有与成员变量同名，不带this的变量指的是成员变量</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; t</span><br><span class="line">    his.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(name + <span class="string">&quot;,&quot;</span> + age); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>this代表当前调用方法的引用，哪个对象调用的方法，this就代表哪一个对象</p></blockquote></li></ul></li></ul><hr></li><li><h2 id="封装的思想"><a href="#封装的思想" class="headerlink" title="封装的思想"></a>封装的思想</h2><ol><li>封装的概述 是面向对象三大特征之一(封装、继承、多态)是面向对象编程语言对客观世界的模拟，客观世界米成员变量都是隐藏在对象内部的，外界是无法操作的</li><li> 封装原则 将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问 成员变量private，提供对应的getXxx()/setXxx()方法</li><li>封装好处 通过方法来控制成员变量的操作，提高了代码的安全性 把代码用方法进行封装，提高了代码的复用性</li></ol></li></ul><hr><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><ul><li><h2 id="构造方法的概述"><a href="#构造方法的概述" class="headerlink" title="构造方法的概述"></a>构造方法的概述</h2><ul><li><p>构造方法是一种特殊的方法</p></li><li><p>作用</p><ul><li>创建对象</li></ul></li><li><p>格式</p><ul><li><code>public class 类名&#123;修饰符 类名( 参数 ) &#123;&#125; &#125;</code></li></ul></li><li><p>功能</p><ul><li>主要完成对象的初始化</li></ul></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">  <span class="comment">//构造方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;无参构造方法&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(name + <span class="string">&quot;,&quot;</span> + age); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试类 */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象 </span></span><br><span class="line">    Student s = <span class="keyword">new</span> Student(); </span><br><span class="line">    s.show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr></li><li><h2 id="构造方法的注意事项"><a href="#构造方法的注意事项" class="headerlink" title="构造方法的注意事项"></a>构造方法的注意事项</h2><ul><li><p>构造方法创建</p><ul><li>如果没有定义构造方法 系统将会给出一个默认的无参构造方法 如果定义了构造方法 系统将不再提供默认的构造方法</li></ul></li><li><p>构造方法的重载</p><ul><li>如果自定义了带参构造方法 还要使用无参构造方法 就必须再写一个无参构造方法</li></ul></li><li><p>推荐的使用方式</p><ul><li>无论是否使用，都手工书写午餐构造方法</li></ul></li><li><p>重要功能</p><ul><li>可以使用带参构造，为成员变量进行初始化</li></ul></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 学生类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">  <span class="comment">//创建对象 </span></span><br><span class="line">  Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">  s1.show(); </span><br><span class="line">  <span class="comment">//public Student(String name) </span></span><br><span class="line">  Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;java&quot;</span>); </span><br><span class="line">  s2.show(); </span><br><span class="line">  <span class="comment">//public Student(int age) </span></span><br><span class="line">  Student s3 = <span class="keyword">new</span> Student(<span class="number">30</span>);</span><br><span class="line">  s3.show(); </span><br><span class="line">  <span class="comment">//public Student(String name,int age) </span></span><br><span class="line">  Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;java&quot;</span>,<span class="number">30</span>);</span><br><span class="line">  s4.show(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法</title>
      <link href="/2021/11/04/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/11/04/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<center><h1>Java基础语法</h1></center><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li><p>注释是对代码的解释和说明文字, 可以提高程序的可读性, 因此在程序中添加必要的注释文字十分重要。</p><ul><li><p>Java中的注释分为三种</p><p>1、第一种单行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释</span></span><br></pre></td></tr></table></figure><p>2、第二种多行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   这是多行注释文字</span></span><br><span class="line"><span class="comment">   这是多行注释文字</span></span><br><span class="line"><span class="comment">   这是多行注释文字 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：多行注释不能嵌套使用。</span></span><br><span class="line"><span class="comment">//文档注释。文档注释以 /** 开始，以 */ 结束</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul><li>关键字是指java语言赋予了特殊含义的单词<ul><li>关键字的特点<ol><li>关键字母全部小写</li><li>常用的代码编辑器对关键字都有高亮显示，比如现在我们能看到的public、class、static等</li></ol></li></ul></li></ul><hr><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li><p>常量: 在程序运行过程中, 其值不可发生改变的量</p></li><li><p>Java中常量的分类</p><ol><li>字符串常量 用双引号扩起来(可以包括0个、一个或多个), 例如“a”、“abc”、“中国”等</li><li>整数常量 整数, 例如: -10、0、88等</li><li>小数常量 小数、例如: -55、1.0、88.88等</li><li>字符串常量 用单引号括起来的一个字符, 例如:”a”, “5”,  “B”、“中”等</li><li>布尔常量 布尔值, 表示真假, 只有两个值true和false</li><li>空常量 一个特殊的值， 空值, 值为null</li></ol><ul><li><p>除常量以外, 其他常量均可使用输出语句直接输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="number">10</span>); <span class="comment">//输出一个整数</span></span><br><span class="line">    System.out.prinln(<span class="number">5.5</span>);<span class="comment">//输出一个小数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>计算机存储单元<ul><li>我们知道计算机是可以用来存储数据的, 但是无论是内存还是硬盘, 计算机存储设备的最小信息单元叫“位(<strong>bit</strong>)”, 我们又称之“比特位”, 通常用小写的字母“b”表示。而计算机中最基本的存储单元叫“字节(<strong>byte</strong>)”, 通常用大写的字母“B”表示, 字节是由连续的8个位组成。</li><li>除了字节外还有一些常用的存储单位, 其换算单位如下:<ul><li>1B(字节) = 8bit</li><li>1kb = 1024B</li><li>1MB = 1024B</li><li>1GB = 1024MB</li><li>!TB = 1024GB</li></ul></li></ul></li></ul><hr><h2 id="Java中的数据类型"><a href="#Java中的数据类型" class="headerlink" title="Java中的数据类型"></a>Java中的数据类型</h2><ul><li><p>Java是一个强类型语言, Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型两种。</p></li><li><p>Java中的基本数据类型：</p><ul><li><p>​    </p><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">内存占用</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">整数类型</td><td align="center">byte</td><td align="center">1</td><td align="center">-128~127</td></tr><tr><td align="center"></td><td align="center">short</td><td align="center">2</td><td align="center">-32768~32767</td></tr><tr><td align="center"></td><td align="center">int(默认)</td><td align="center">4</td><td align="center">-2的31次方到2的31次方-1</td></tr><tr><td align="center"></td><td align="center">long</td><td align="center">8</td><td align="center">-2的63次方到2的63次方-1</td></tr><tr><td align="center">浮点型</td><td align="center">float</td><td align="center">4</td><td align="center">负数: -3.402823E+38到-1.401298E-45 正数: 1.401298E-45到3.402823E+38</td></tr><tr><td align="center"></td><td align="center">double(默认)</td><td align="center">8</td><td align="center">负数：-1.797693E+308到-4.9000000E-324 正数：4.9000000E-324 到 1.797693E+308</td></tr><tr><td align="center">字符类型</td><td align="center">char</td><td align="center">2</td><td align="center">0-65535</td></tr><tr><td align="center">布尔类型</td><td align="center">boolean</td><td align="center">1</td><td align="center">true、false</td></tr></tbody></table><blockquote><p>“e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。</p><p>在java中整数默认是int类型，浮点数默认是double类型。”</p></blockquote></li></ul></li></ul><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>变量 在程序运行过程中, 其值可以发生改变的量</p></li><li><p>从本质上讲, 变量是内存中的一小块区域, 其值可以在一定范围内变化。</p></li><li><p>变量的定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = 初始化值; <span class="comment">//声明变量并赋值</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">Sytem.out.println(age);</span><br></pre></td></tr></table></figure><ul><li>或者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先声明, 后赋值(使用前赋值即可)</span></span><br><span class="line">数据类型 初始化名;</span><br><span class="line">变量名 = 初始化值;</span><br><span class="line"><span class="keyword">double</span> money;</span><br><span class="line">money = <span class="number">55.5</span>;</span><br><span class="line">System.out.println(money);</span><br></pre></td></tr></table></figure><ul><li>还可以在同一行定义多个数据类型的变量, 中间使用逗号隔开。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>; <span class="comment">// 定义int类型的变量a和b，中间使用逗号隔开</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line"><span class="keyword">int</span> c,d; <span class="comment">// 声明int类型的变量c和d，中间使用逗号隔开</span></span><br><span class="line">c = <span class="number">30</span>;</span><br><span class="line">d = <span class="number">40</span>;</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure><p>通过变量名直接访问即可使用该变量</p></li><li><p><strong>变量使用的注意事项</strong></p><ol><li>在同一对花括号中 变量名不能重复</li><li>变量在使用之前  必须初始化(赋值)</li><li>定义long类型的变量时, 需要在整数的后面加L(大小写均可)。因为整数默认时int类型, 整数太大可能超过int范围</li><li>定义fliat类型的变量时, 需要在小数的后面加F(大小写均可)。因为浮点的默认类型时double, doble的取值范围是大于float的, 类型不兼容</li></ol></li></ul><hr><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li><p>标识符是用户编程时使用的名字, 用于给类、方法、变量、常量、等命名</p></li><li><p>Java中标识符的组成</p><ul><li>由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字</li><li>不能使用java中的关键字作为标识符</li><li>标识符对大小写敏感（区分大小写）</li></ul></li><li><p>Java中标识符的命名约定</p><ul><li>小驼峰式命名：变量名、方法名</li><li>首字母小写，从第二个单词开始每个单词的首字母大写</li><li>大驼峰式命名：类名</li><li>每个单词的首字母都大写</li><li>标识符的命名最好可以做到见名知意<ul><li>例如：username、studentNumber等</li></ul></li></ul></li></ul><hr><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li><p>在Java中，一些数据类型之间是可以互相转换的，分为两种情况: 自动类型转换和强制类型转换</p><ul><li><p> 自动类型转换</p></li><li><p>把一个表示数据范围小的数据或者变量赋值给另一个表示数据范围大的变量。这种转换方式时自动的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> num = <span class="number">10</span>; <span class="comment">//将int类型的10赋值给double类型</span></span><br><span class="line">System.out.println(num); <span class="comment">//输出10.0</span></span><br></pre></td></tr></table></figure></li><li><p>强制类型转换</p><ul><li><p>把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量</p></li><li><p>强制类型转换格式: 目标数据类型 变量名 = (目标数据类型)值或者变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> num1 = <span class="number">5.5</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = (<span class="keyword">int</span>) num1; <span class="comment">// 将double类型的num1强制转换为int类型</span></span><br></pre></td></tr></table></figure><blockquote><p>“表示数据范围从小到大图”</p></blockquote><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202110061045855.png"></p><ul><li><p>说明:</p><ol><li><p>char类型的数据转换为int类型是按照码表上中对应的int值进行计算的。比如在ASCLL码中, ‘a‘对应97</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println(a); <span class="comment">//将输出97</span></span><br></pre></td></tr></table></figure></li><li><p>整数默认的是int类型, byte、short和char类型数据参与运算会自动转换为int类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">byte</span> b3 = b1 + b2;<span class="comment">// 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。</span></span><br><span class="line"><span class="comment">// 修改为: </span></span><br><span class="line"><span class="keyword">int</span> num = b1 + b2;</span><br><span class="line"><span class="comment">// 或者： </span></span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>) (b1 + b2);</span><br></pre></td></tr></table></figure></li><li><p>boolean类型不能与其他基本数据类型相互转换。</p></li></ol></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组</title>
      <link href="/2021/11/04/Java%E6%95%B0%E7%BB%84/"/>
      <url>/2021/11/04/Java%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<center><H1>数组</H1></center><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li><h2 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h2><ul><li>数组就是存储数据长度固定的容器, 存储多个数据的数据类型要一致</li></ul></li><li><h2 id="数组定义格式"><a href="#数组定义格式" class="headerlink" title="数组定义格式"></a>数组定义格式</h2><ul><li><p>第一种</p><ul><li>数据类型[] 数组名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr; </span><br><span class="line"><span class="keyword">double</span>[] arr; </span><br><span class="line"><span class="keyword">char</span>[] arr;</span><br></pre></td></tr></table></figure></li><li><p>第二种</p><ul><li>数据类型 数组名[]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[]; <span class="keyword">double</span> arr[]; <span class="keyword">char</span> arr[];</span><br></pre></td></tr></table></figure></li></ul></li><li><p>什么是动态初始化格式</p><p>数组动态初始化就是只给数组长度，由系统给出默认初始化值</p></li><li><p>动态初始化格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[数组长度];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><blockquote><ul><li>等号左边<ul><li>int:数组的数据类型</li><li>[]:代表这是一个数组</li><li>arr:代表数组的名称</li></ul></li><li>等号右边<ul><li>new:为数组开辟内存空间</li><li>int:数组的数据类型</li><li>[]:代表这是一个数组</li><li>3:代表数组的长度</li></ul></li></ul></blockquote></li><li><h2 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h2><ul><li><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li><p>每一个存储到数组的元素，都会自动的拥有一个编号，从0开始</p></li><li><p>这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素</p></li><li><p>访问数组元素格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引]</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; </span><br><span class="line">    <span class="comment">//输出数组名 </span></span><br><span class="line">    System.out.println(arr); </span><br><span class="line">    <span class="comment">//[I@880ec60 //输出数组中的元素</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><ul><li><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><ul><li>内存是计算机中的重要原件，临时存储区域，作用是运行程序</li><li>我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的</li><li>必须放进内存中才能运行，运行完毕后会清空内存</li><li>Java虚拟机要运行程序，必须要对内存进行空间的分配和管理</li></ul></li><li><h2 id="Java中的内存分配"><a href="#Java中的内存分配" class="headerlink" title="Java中的内存分配"></a>Java中的内存分配</h2><ul><li><p>目前我们只需要记住两个内存, 分别是: 栈内存和堆内存</p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>寄存器</td><td>给cpu与开发无关</td></tr><tr><td>本地方法栈</td><td>JVM在使用操作系统功能的时候使用，与开发无关</td></tr><tr><td>方法区</td><td>存储可以运行的class文件</td></tr><tr><td>堆内存</td><td>存储对象或者数组, new来创建, 都存在堆内存</td></tr><tr><td>方法栈</td><td>方法运行时使用的内存，比如main方法运行，进入方法栈中执行</td></tr></tbody></table></li></ul></li></ul><hr><h1 id="静态初始化格式"><a href="#静态初始化格式" class="headerlink" title="静态初始化格式"></a>静态初始化格式</h1><ul><li><p>完整版格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>, 元素<span class="number">2</span>， ......&#125;;</span><br></pre></td></tr></table></figure></li><li><p>简化版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>, 元素<span class="number">2</span>, ....&#125;;</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//定义数组 </span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; </span><br><span class="line">    <span class="comment">//输出数组名 </span></span><br><span class="line">    System.out.println(arr); </span><br><span class="line">    <span class="comment">//输出数组中的元素 </span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h1><ul><li><p>数组遍历：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest01</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; </span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">4</span>]); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用循环改进代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest01</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//定义数组 </span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;; </span><br><span class="line">    <span class="comment">//使用通用的遍历格式 f</span></span><br><span class="line">    or(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">      System.out.println(arr[x]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法</title>
      <link href="/2021/11/04/Java%E6%96%B9%E6%B3%95/"/>
      <url>/2021/11/04/Java%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<center><H1>方法</H1></center><h1 id="方法的概述"><a href="#方法的概述" class="headerlink" title="方法的概述"></a>方法的概述</h1><ul><li>方法是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集<ul><li>方法必须先创建才可以使用，该过程称为方法的定义</li><li>方法创建后并不是直接可以运存的，需要手动使用后，才执行，该过程成为方法的调用</li></ul></li></ul><hr><h1 id="方法的定义和调用"><a href="#方法的定义和调用" class="headerlink" title="方法的定义和调用"></a>方法的定义和调用</h1><ul><li><h2 id="无参方法的定义和调用"><a href="#无参方法的定义和调用" class="headerlink" title="无参方法的定义和调用"></a>无参方法的定义和调用</h2><ul><li><p>定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 ( ) &#123;</span><br><span class="line">  <span class="comment">// 方法体; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span> <span class="params">( )</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 方法体; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名();</span><br></pre></td></tr></table></figure></li><li><p>范例:</p></li><li><p>```java<br>method();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &gt; 方法必须先定义，后调用，否则程序将报错</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># 带参数的方法定义和调用</span><br><span class="line"></span><br><span class="line">- ## 定义格式</span><br><span class="line"></span><br><span class="line">  - 参数: 由数据类型和变量名组成-数据类型 变量名</span><br><span class="line"></span><br><span class="line">  - 参数范例: int a</span><br><span class="line"></span><br><span class="line">    ```java</span><br><span class="line">    public static void 方法名 (参数1) &#123;</span><br><span class="line">      方法体;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void 方法名 (参数1, 参数2, 参数3...) &#123;</span><br><span class="line">      方法体; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isEvenNumber</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123; </span><br><span class="line">  ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>方法定义时， 参数中的数据类型与变量名都不能缺, 缺少任意一个程序都将报错</li><li><code>方法定义的时候，多个参数之间使用(,)分隔</code></li></ul></blockquote></li><li><p>调用格式</p><ul><li><p>方法名(参数);</p></li><li><p>方法名(参数1， 参数2);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isEvenNumber(<span class="number">10</span>);</span><br><span class="line">getMax(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><ul><li>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错</li></ul></li></ul></li></ul></li></ul><hr><h1 id="行参和实惨"><a href="#行参和实惨" class="headerlink" title="行参和实惨"></a>行参和实惨</h1><ul><li><p>行参：方法定义中的参数</p><ul><li>等同于变量定义的格式, 例如:int number</li></ul></li><li><p>实惨: 方法调用中的参数</p><ul><li>等同于使用变量或常量: 例如: 10 number</li></ul></li></ul><hr><h1 id="带参数返回值方法的定义和调用"><a href="#带参数返回值方法的定义和调用" class="headerlink" title="带参数返回值方法的定义和调用"></a>带参数返回值方法的定义和调用</h1><ul><li><p>定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 数据类型 方法名 ( 参数 ) &#123; </span><br><span class="line">  <span class="keyword">return</span> 数据 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>范例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEvenNumber</span><span class="params">( <span class="keyword">int</span> number )</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span> </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span> ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错</p></blockquote></li><li><p>调用格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法名 ( 参数 );</span><br><span class="line">数据类型 变量名 = 方法名 ( 参数 );</span><br></pre></td></tr></table></figure></li><li><p>范例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isEvenNumber ( <span class="number">5</span> );</span><br><span class="line"><span class="keyword">boolean</span> flag = isEvenNumber ( <span class="number">5</span> );</span><br></pre></td></tr></table></figure><blockquote><p>方法的返回值通常会使用变量接收, 否则该返回值将毫无意义</p></blockquote></li></ul><hr><h1 id="方法的注意事项"><a href="#方法的注意事项" class="headerlink" title="方法的注意事项"></a>方法的注意事项</h1><ol><li>方法不能嵌套</li><li>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</li></ol><hr><h1 id="方法的通用格式"><a href="#方法的通用格式" class="headerlink" title="方法的通用格式"></a>方法的通用格式</h1><ul><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数) &#123; </span><br><span class="line">  方法体; <span class="keyword">return</span> 数据 ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>public static 修饰符<ul><li>返回值类型 方法操作完毕之后返回的数据的数据类型</li><li>如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return</li></ul></li></ul></blockquote><table><thead><tr><th>方法名</th><th>调用方法时候使用的标识</th></tr></thead><tbody><tr><td>参数</td><td>由数据类型和变量名组成，多个参数之间用逗号隔开</td></tr><tr><td>方法体</td><td>完成功能的代码块</td></tr><tr><td>return</td><td>如果方法操作完毕，有数据返回，用于把数据返回给调用者</td></tr></tbody></table></li><li><p>定义方法时要做到两个明确</p><ul><li>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型</li><li>明确参数：主要是明确参数的类型和数量</li></ul></li><li><p>调用方法时的注意:</p><ul><li>void类型方法，直接调用</li><li>非void类型的方法，推荐用变量接收调用</li></ul></li></ul><hr><h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><ul><li><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p></li><li><p>多个方法在同一个类中</p></li><li><p>多个方法具有相同的方法名</p></li><li><p>多个方法的参数不相同，类型不同或者数量不同</p><blockquote><ul><li>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</li><li>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载</li></ul></blockquote></li><li><p>范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a , <span class="keyword">int</span> b)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>错误范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">  &#125;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; <span class="comment">/*错误原因：重载与返回值无关*/</span> </span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo01</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo02</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123; <span class="comment">/*错误原因：这是两个类的两个fn方法*/</span> </span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="方法的参数传递"><a href="#方法的参数传递" class="headerlink" title="方法的参数传递"></a>方法的参数传递</h1><h2 id="参数基本类型传递"><a href="#参数基本类型传递" class="headerlink" title="参数基本类型传递"></a>参数基本类型传递</h2><ul><li><p>示例</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo01</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">100</span>; </span><br><span class="line">    System.out.println(<span class="string">&quot;调用change方法前：&quot;</span> + number);</span><br><span class="line">    change(number); System.out.println(<span class="string">&quot;调用change方法后：&quot;</span> + number); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123; </span><br><span class="line">    number = <span class="number">200</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>基本数据类型的参数，形式参数的改变，不影响实际参数</p></blockquote></li></ul><h2 id="引用数据类型传递"><a href="#引用数据类型传递" class="headerlink" title="引用数据类型传递"></a>引用数据类型传递</h2><ul><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo02</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;; </span><br><span class="line">    System.out.println(<span class="string">&quot;调用change方法前：&quot;</span> + arr[<span class="number">1</span>]); </span><br><span class="line">    change(arr); </span><br><span class="line">    System.out.println(<span class="string">&quot;调用change方法后：&quot;</span> + arr[<span class="number">1</span>]); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123; </span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">200</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于引用类型的参数 形式参数的改变 影响实际参数的值</p></blockquote></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java环境变量的配置</title>
      <link href="/2021/11/04/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2021/11/04/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<center><h1>Java的环境变量</h1></center><p><strong>操作系统：win10     64位。</strong><br><strong>Java版本是AZUL：1.8</strong></p><ol><li><p>以jdk1.8为例</p><p>根据你的电脑版本下载jdk, 选择你所需要的路径进行安装</p><ul><li>win64位的直接安装exe文件直接双击下一步安装就好了</li><li><a href="https://www.azul.com/downloads/?package=jdk">点我下载jdk1.8</a></li><li><img src="https://gitee.com/airgwl/upic/raw/master//img/202110052234127.png"></li></ul></li><li><p>azul这个公司下发布的jdk是不需要搭建环境变量的</p></li></ol><ol start="3"><li><p>验证jdk的完整性</p><ol><li>打开cmd输入<code>java -version</code> 查看是否有显示版本信息</li></ol><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202110052059481.png"></p></li><li><p>完成✅</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
