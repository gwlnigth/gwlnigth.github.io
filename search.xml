<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安卓内置动画属性</title>
      <link href="/2021/12/20/%E5%8A%A8%E7%94%BB%E5%B1%9E%E6%80%A7API/"/>
      <url>/2021/12/20/%E5%8A%A8%E7%94%BB%E5%B1%9E%E6%80%A7API/</url>
      
        <content type="html"><![CDATA[<center><h1>    动画属性API    </h1></center><h1 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h1><ul><li>属性动画ViewPropertyAnimator类</li></ul><ol><li><p>调用方法</p><ol><li><p>控件名.animate().动作;</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201546823.png"></p></li></ol><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201547741.jpg"></p></li><li><p>动画时常默认是500ms</p><ul><li>改变动画时长</li><li><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201550589.jpg"></li></ul></li><li><p>速度模型</p><ul><li><p>InterPolator    内插(速度设置器)</p><p>1、设置动画匀速运动</p><ul><li><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201552851.jpg"></li></ul><p>2、设置前摇和回弹的InterPolator</p><ul><li><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201553022.jpg"></li></ul></li></ul></li><li><p>设置监听器</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201553983.jpg"></p></li></ol><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p><h1 id="详细请看"><a href="#详细请看" class="headerlink" title="详细请看"></a>详细请看</h1><p><a href="https://rengwuxian.com/ui-1-6/">动画属性API</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓RelativeLayout组合图片</title>
      <link href="/2021/12/20/RelativeLayout%E7%BB%84%E5%90%88%E5%9B%BE%E7%89%87/"/>
      <url>/2021/12/20/RelativeLayout%E7%BB%84%E5%90%88%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<center><h1>    RelativeLayout组合图片    </h1></center><h1 id="资源准备"><a href="#资源准备" class="headerlink" title="资源准备"></a>资源准备</h1><ul><li>创建一个xml布局文件，将所需的图片组合成一个图像</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201501589.jpg"></p><h1 id="自定义RelativeLayout"><a href="#自定义RelativeLayout" class="headerlink" title="自定义RelativeLayout"></a>自定义RelativeLayout</h1><ol><li><p>创建一个类让他继承于RelativeLayout并且实现它的三个构造方法</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201504885.jpg"></p></li><li><p>自定义一个方法并实现布局文件加载(要有上下文参数)</p><p><code>注意:</code> 要在上面上个构造方法中分别调用你这个自定义的方法</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201506551.png"></p></li><li><p>在主布局文件中使用该定义的控件对象</p><p><code>在这使用的是Android Studio3.0版本</code></p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201510021.jpg"></p></li></ol><h1 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h1><ul><li>为自定义VIew添加图片旋转动画效果</li></ul><ol><li><p>在自定义的类文件中创建一个方法，并接收一个动画数据</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201520696.jpg"></p></li><li><p>将接收的数据转成自己想要的数据类型</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201520288.jpg"></p></li><li><p>创建动画类对象(Object Animator)</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201520041.jpg"></p></li><li><p>在调用自定义控件的类文件中调用方法</p><p> <img src="https://gitee.com/airgwl/upic/raw/master//img/202112201520295.jpg"></p></li></ol><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201521791.jpg"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓渐变色进度条</title>
      <link href="/2021/12/20/%E6%B8%90%E5%8F%98%E8%89%B2%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
      <url>/2021/12/20/%E6%B8%90%E5%8F%98%E8%89%B2%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<center><h1>    渐变色进度条    </h1></center><h1 id="导入ProgressBar"><a href="#导入ProgressBar" class="headerlink" title="导入ProgressBar"></a>导入ProgressBar</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201448414.jpg"></p><h1 id="在style文件下自定义progress样式"><a href="#在style文件下自定义progress样式" class="headerlink" title="在style文件下自定义progress样式"></a>在style文件下自定义progress样式</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201449192.png"></p><h1 id="编写进度条的背景样式"><a href="#编写进度条的背景样式" class="headerlink" title="编写进度条的背景样式"></a>编写进度条的背景样式</h1><ul><li><p>后景</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201450234.png"></p></li></ul><h1 id="创建前景样式"><a href="#创建前景样式" class="headerlink" title="创建前景样式"></a>创建前景样式</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201731766.jpg"></p><h1 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201452789.png"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓Spinner下拉框字体</title>
      <link href="/2021/12/20/Spinner%E4%B8%8B%E6%8B%89%E6%A1%86%E5%AD%97%E4%BD%93/"/>
      <url>/2021/12/20/Spinner%E4%B8%8B%E6%8B%89%E6%A1%86%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<center><H1>Spinner下拉框字体</H1></center><h1 id="创建布局"><a href="#创建布局" class="headerlink" title="创建布局"></a>创建布局</h1><ul><li>创建一个布局文件写入TextView控件</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201725915.jpg"></p><h1 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h1><ul><li>在类文件中创建适配器将适配器装载到spinner中</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201725757.jpg"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓CheckBox选择框</title>
      <link href="/2021/12/20/CheckBox%E8%83%8C%E6%99%AF/"/>
      <url>/2021/12/20/CheckBox%E8%83%8C%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<center> <h1>CheckBox背景框</h1></center><ul><li>button属性指定他的点击和未点击的背景属性</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201436406.jpg"></p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201431185.png"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p>[gwl/SmartHomeV5 (gitee.com)](</p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓PopWindow弹窗</title>
      <link href="/2021/12/20/PopWindow%E5%BC%B9%E7%AA%97/"/>
      <url>/2021/12/20/PopWindow%E5%BC%B9%E7%AA%97/</url>
      
        <content type="html"><![CDATA[<center><H1>PopWindow弹窗</H1></center><h1 id="资源准备"><a href="#资源准备" class="headerlink" title="资源准备"></a>资源准备</h1><p>1、创建xml布局文件并布局好控件</p><p><img src="C:\Users\gwl\AppData\Roaming\Typora\typora-user-images\image-20211220141318381.png" alt="image-20211220141318381"></p><p>2、在使用对象文件中加载布局文件</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201414194.png"></p><h1 id="实例化PopWindow"><a href="#实例化PopWindow" class="headerlink" title="实例化PopWindow"></a>实例化PopWindow</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201415527.png"></p><h1 id="控件的查找"><a href="#控件的查找" class="headerlink" title="控件的查找"></a>控件的查找</h1><ol><li>根据布局文件加载器返回的对象来进行控件的查找</li><li><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201417629.png"></li></ol><h1 id="显示自定义的布局文件"><a href="#显示自定义的布局文件" class="headerlink" title="显示自定义的布局文件"></a>显示自定义的布局文件</h1><ol><li><p>显示</p><p><img src="C:\Users\gwl\AppData\Roaming\Typora\typora-user-images\image-20211220141856300.png" alt="image-20211220141856300"></p></li><li><p>隐藏<img src="C:\Users\gwl\AppData\Roaming\Typora\typora-user-images\image-20211220141940535.png" alt="image-20211220141940535"></p></li></ol><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="C:\Users\gwl\AppData\Roaming\Typora\typora-user-images\image-20211220142035087.png" alt="image-20211220142035087"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓ActionBar导航条</title>
      <link href="/2021/12/20/ActionBar%E5%AF%BC%E8%88%AA%E6%9D%A1/"/>
      <url>/2021/12/20/ActionBar%E5%AF%BC%E8%88%AA%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<center><H1>ActionBar导航条</H1></center><h1 id="实例化控件"><a href="#实例化控件" class="headerlink" title="实例化控件"></a>实例化控件</h1><ul><li><p>实例化控件ActionBar获取支持操作栏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ActionBar bar = getSupportActionBar();</span><br><span class="line">注意:</span><br><span class="line">需要继承AppCompatActivity类</span><br></pre></td></tr></table></figure></li></ul><h1 id="选择操作栏"><a href="#选择操作栏" class="headerlink" title="选择操作栏"></a>选择操作栏</h1><ul><li><p>选择操作栏(有好几个布局选择一个接近需求的行)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bar.setNavigationMode(ActionBar.NAYGATION_MODETABS);</span><br></pre></td></tr></table></figure></li></ul><h1 id="传入数据"><a href="#传入数据" class="headerlink" title="传入数据"></a>传入数据</h1><ul><li><p>传入数据、设置监听事件、点击事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bar.addTab(bar.newTab().setText(<span class="string">&quot;传感器数据&quot;</span>).setTabListener(<span class="keyword">this</span>)); <span class="comment">// 需要在类中实现TabListener接口</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201347162.png"></p></li></ul><h1 id="设置Fragment"><a href="#设置Fragment" class="headerlink" title="设置Fragment"></a>设置Fragment</h1><ul><li>与fragment碎片同步滑动</li><li>自定义的ViewPage控件去监听屏幕事件</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201407596.jpg"></p><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201406173.png"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p>[gwl/SmartHomeV5 (gitee.com)](</p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能家居设备预算表</title>
      <link href="/2021/12/05/%E9%A2%84%E7%AE%97%E8%A1%A8/"/>
      <url>/2021/12/05/%E9%A2%84%E7%AE%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<center><h1>    预算表    </h1></center><h1 id="设备预算"><a href="#设备预算" class="headerlink" title="设备预算"></a>设备预算</h1><ul><li><p>首先要知道设备的含税售价以及不含税售价就需要知道<code>成本总价</code>、<code>毛利率</code>以及<code>增值税</code>。</p><ul><li><p>例如成本价为250、毛利率为20%、增值税为17%。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">需要它们之间是如何计算的：</span><br><span class="line">    价格（不含税）＝价格（含税）÷（1-毛利率），税指的是增值税</span><br><span class="line">    价格（含税）＝价格（不含税）×（1+增值税)</span><br><span class="line"> 也就是说：</span><br><span class="line">成本价(不含税) = 250÷(1-20%) = 312.5</span><br><span class="line">成本价(含税) = 成本价(不含税)x(1+17%) = 365.625</span><br></pre></td></tr></table></figure><ul><li>所以不含税售价=312.5 含税售价=365.625</li></ul></li></ul></li></ul><p>智能家居预算表案例规范:</p><table><thead><tr><th>序号</th><th>名称</th><th>数量</th><th>单位</th><th>单价</th><th>成本总价</th><th>销售总价（不含税）</th><th>销售总价（含税)</th></tr></thead><tbody><tr><td>1</td><td>烟雾探测器</td><td>1</td><td>台</td><td>158</td><td>158</td><td>197.5</td><td>231.075</td></tr><tr><td>2</td><td>人体红外探测器</td><td>1</td><td>台</td><td>269</td><td>269</td><td>336.25</td><td>393.4125</td></tr><tr><td>3</td><td>二氧化碳检测器</td><td>1</td><td>台</td><td>980</td><td>980</td><td>1225</td><td>1433.25</td></tr><tr><td>4</td><td>PM2.5监测器</td><td>1</td><td>台</td><td>990</td><td>990</td><td>1237.5</td><td>1447.875</td></tr><tr><td>5</td><td>报警灯</td><td>1</td><td>台</td><td>250</td><td>250</td><td>312.5</td><td>365.625</td></tr><tr><td>6</td><td>换气扇</td><td>1</td><td>台</td><td>450</td><td>450</td><td>562.5</td><td>658.125</td></tr><tr><td>7</td><td>电视机</td><td>1</td><td>台</td><td>2800</td><td>2800</td><td>3500</td><td>4095</td></tr><tr><td>8</td><td>温湿度模块</td><td>1</td><td>台</td><td>280</td><td>280</td><td>350</td><td>409.5</td></tr><tr><td>9</td><td>光照度模块</td><td>1</td><td>台</td><td>458</td><td>458</td><td>572.5</td><td>669.825</td></tr><tr><td>10</td><td>气压传感器</td><td>1</td><td>台</td><td>250</td><td>250</td><td>312.5</td><td>365.625</td></tr><tr><td>11</td><td>空调</td><td>1</td><td>台</td><td>3500</td><td>3500</td><td>4375</td><td>5118.75</td></tr><tr><td>12</td><td>DVD模块</td><td>1</td><td>台</td><td>450</td><td>450</td><td>562.5</td><td>658.125</td></tr><tr><td>13</td><td>窗帘电机模块</td><td>1</td><td>台</td><td>350</td><td>350</td><td>437.5</td><td>511.875</td></tr><tr><td>14</td><td>射灯</td><td>2</td><td>台</td><td>50</td><td>100</td><td>125</td><td>146.25</td></tr><tr><td>15</td><td>网络摄像头</td><td>1</td><td>台</td><td>800</td><td>800</td><td>1000</td><td>1170</td></tr><tr><td>16</td><td>人脸识别模块</td><td>1</td><td>台</td><td>800</td><td>800</td><td>1000</td><td>1170</td></tr><tr><td>17</td><td>可视对讲机</td><td>1</td><td>台</td><td>800</td><td>800</td><td>1000</td><td>1170</td></tr><tr><td>18</td><td>A8网关</td><td>1</td><td>台</td><td>3000</td><td>3000</td><td>3750</td><td>4387.5</td></tr><tr><td>19</td><td>智能网关</td><td>1</td><td>台</td><td>1800</td><td>1800</td><td>2250</td><td>2632.5</td></tr><tr><td>20</td><td>红黑电源线</td><td>30</td><td>米</td><td>3.8</td><td>114</td><td>142.5</td><td>166.725</td></tr><tr><td>21</td><td>PVC缠绕管</td><td>30</td><td>米</td><td>0.5</td><td>15</td><td>18.75</td><td>21.9375</td></tr><tr><td>22</td><td>5类双绞线</td><td>10</td><td>米</td><td>1.5</td><td>15</td><td>18.75</td><td>21.9375</td></tr><tr><td>23</td><td>RJ45水晶头</td><td>20</td><td>个</td><td>1</td><td>20</td><td>25</td><td>29.25</td></tr><tr><td>24</td><td>工业控制用计算机</td><td>3</td><td>台</td><td>8000</td><td>24000</td><td>30000</td><td>35100</td></tr><tr><td>25</td><td>施工设备折旧费</td><td>1</td><td>组</td><td>500</td><td>500</td><td>625</td><td>731.25</td></tr><tr><td>26</td><td>其他耗材</td><td>1</td><td>组</td><td>200</td><td>200</td><td>250</td><td>292.5</td></tr><tr><td>27</td><td>劳动力成本</td><td>3</td><td>人天</td><td>500</td><td>1500</td><td>1875</td><td>2193.75</td></tr><tr><td>总计</td><td></td><td></td><td></td><td></td><td></td><td></td><td>65591.6625</td></tr><tr><td>注：</td><td>公司项目毛利率</td><td>20</td><td>%</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>增值税率</td><td>17</td><td>%</td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="关于第三阶段请看github"><a href="#关于第三阶段请看github" class="headerlink" title="关于第三阶段请看github"></a>关于第三阶段请看github</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SmartHome(第一阶段) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SmartHome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓自定义View折线图</title>
      <link href="/2021/11/15/Android%E6%8A%98%E7%BA%BF%E5%9B%BE/"/>
      <url>/2021/11/15/Android%E6%8A%98%E7%BA%BF%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<center><H1>使用最快速简单方式自定义View动态折线图</H1></center><h1 id="创建自定义类"><a href="#创建自定义类" class="headerlink" title="创建自定义类"></a>创建自定义类</h1><ul><li>创建类让此类继承于View</li></ul><h1 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h1><p>​    当类继承View时需要重写它里面的三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZheXianView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(context);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ZheXianView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(context, attrs);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ZheXianView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​    此时需要在视图窗口中画线条就需要重写onDraw方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定义四个点的坐标"><a href="#定义四个点的坐标" class="headerlink" title="定义四个点的坐标"></a>定义四个点的坐标</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201530200.jpg"></p><h1 id="在重写onDraw方法中添加画笔"><a href="#在重写onDraw方法中添加画笔" class="headerlink" title="在重写onDraw方法中添加画笔"></a>在重写onDraw方法中添加画笔</h1><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201532776.jpg"></p><h1 id="编写线程"><a href="#编写线程" class="headerlink" title="编写线程"></a>编写线程</h1><ul><li>编写线程让界面一直更新从而达到动态折线图的效果</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201535394.jpg"></p><h1 id="handler信息发送"><a href="#handler信息发送" class="headerlink" title="handler信息发送"></a>handler信息发送</h1><ul><li><p>在构造函数中使用handler进行信息的发送</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201538680.jpg"></p></li></ul><h1 id="添加控件"><a href="#添加控件" class="headerlink" title="添加控件"></a>添加控件</h1><ul><li>在布局文件中使用自定义的View控件</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201539548.jpg"></p><h1 id="模拟数据"><a href="#模拟数据" class="headerlink" title="模拟数据"></a>模拟数据</h1><ul><li>在类文件中使用线程进行线程模拟</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202112201539264.jpg"></p><h1 id="Dome请看gitee主页"><a href="#Dome请看gitee主页" class="headerlink" title="Dome请看gitee主页"></a>Dome请看gitee主页</h1><p>[gwl/SmartHomeV5 (gitee.com)](</p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java继承</title>
      <link href="/2021/11/06/Java%E7%BB%A7%E6%89%BF/"/>
      <url>/2021/11/06/Java%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<center><h1>Java继承</h1></center><h1 id="继承的实现"><a href="#继承的实现" class="headerlink" title="继承的实现"></a>继承的实现</h1><ul><li><p>继承的概念</p><ul><li>继承是面向对象三大特征之一，可以使子类具有父类的属性和方法，还可以在子类中重新定义，以及追加和方法实现继承的格式</li></ul></li><li><p>继承通过extends实现</p><ul><li>格式: class 子类 extends 父类{}<ul><li>举例: class Dog extends Animal{}</li></ul></li></ul></li><li><p>继承带来的好处:</p><ul><li>继承可以让类与类之间产生关系，子夫类关系，产生子类后，子类则可以使用父类中私有的成员。</li></ul></li><li><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;show方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;method方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象，调用方法</span></span><br><span class="line">Fu f = <span class="keyword">new</span> Fu();</span><br><span class="line">f.show();</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.method();</span><br><span class="line">z.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="继承的好处"><a href="#继承的好处" class="headerlink" title="继承的好处"></a>继承的好处</h2><ul><li>继承的好处<ul><li>提高代码的复用性</li><li>提高代码的维护性</li></ul></li><li>继承弊端<ul><li>继承让类与类之间产生了联系，类的耦合性增强了，当父类发生改变时子类实现也不得不跟着改变，削弱了子类的独立性</li></ul></li><li>继承的应用场景<ul><li>使用继承，需要考虑类与类之间的是否存在is…a关系, 不能盲目使用继承<ul><li>is..a的关系，谁是谁的一种，例如: 老师和学生是人的一种，那人就是父类，学生和老师就是子类</li></ul></li></ul></li></ul><hr><h1 id="继承中的成员访问特点"><a href="#继承中的成员访问特点" class="headerlink" title="继承中的成员访问特点"></a>继承中的成员访问特点</h1><h2 id="继承中变量访问的特点"><a href="#继承中变量访问的特点" class="headerlink" title="继承中变量访问的特点"></a>继承中变量访问的特点</h2><ul><li><p>在子类方法中访问一个变量，采用的是就近原则</p><ol><li>子类局部范文找</li><li>子类成员范围找</li><li>父类成员范围找</li><li>如果都没找到则报错(不考虑父类的父类)</li></ol></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.show(); <span class="comment">// 输出show方法中的局部变量30</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><ul><li><p>this和super关键字</p><ul><li>this 代表本类对象的引用</li><li>super 代表父类存储空间的标识(可以理解为父类对象引用)</li></ul></li><li><p>this和super的使用分别</p><ul><li>成员变量<ul><li>this 成员变量 - 访问本类成员变量</li><li>super 成员变量 - 访问父类成员变量</li></ul></li><li>成员方法<ul><li>this.成员方法 - 访问本类成员方法</li><li>super.成员方法 - 访问父类成员方法 </li></ul></li></ul></li><li><p>构造方法</p><ul><li>this(…)  - 访问本类构造方法</li><li>super(…) - 访问父类构造方法</li></ul></li></ul><hr><h1 id="继承中构造方法的访问特点"><a href="#继承中构造方法的访问特点" class="headerlink" title="继承中构造方法的访问特点"></a>继承中构造方法的访问特点</h1><p><strong>注意</strong>：子类中所有的构造方法默认都会访问父类中无参的构造方法</p><p>​    子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化，原因在于，每一个子类构造方法的第一条语句默认是: <strong>super()</strong></p><p>​    如果父类中没有无参构造方法，只带有参构造方法的情况下可以通过super关键字去显示调用父类的带参数构造方法或者在父类中自己提供一个无参构造方法。</p><hr><h2 id="继承中成员方法的访问特点"><a href="#继承中成员方法的访问特点" class="headerlink" title="继承中成员方法的访问特点"></a>继承中成员方法的访问特点</h2><p>通过子类对象访问一个方法</p><ol><li>子类成员范围找</li><li>父类成员范围找</li><li>如果都没有则报错(不考虑父类的父类)</li></ol><hr><h2 id="super内存"><a href="#super内存" class="headerlink" title="super内存"></a>super内存</h2><ul><li>对象在堆内存中会单独在一块super区域，用来存放父类的数据</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202111061833846.png"></p><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><ol><li>​    方法重写概念<ul><li>方法出现了和父类一模一样的方法声明(<strong>方法名一样，参数列表也必须一样</strong>)</li></ul></li><li>方法重写应用场景<ul><li>当子类需要父类的功能，而功能主体类有自己特有内容时，可以重写父类中的方法，这样即沿袭了父类的功能，又定义了子类特有的内容</li></ul></li><li>Override注解<ul><li>用来检测当前方法，是否是重写的方法，起到了[校验]的作用</li></ul></li></ol><hr><h2 id="方法重写的注意事项"><a href="#方法重写的注意事项" class="headerlink" title="方法重写的注意事项"></a>方法重写的注意事项</h2><ul><li><p>方法重写的注意事项</p><ol><li>私有方法不能被重写(父类私有成员子类是不能继承的)</li><li>子类访问权限不能更低(public &gt; 默认 &gt; 私有)</li></ol></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu中show()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu中method()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="comment">/* 编译【出错】，子类不能重写父类私有的方法*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi中show()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 编译【出错】，子类重写父类方法的时候，访问权限需要大于等于父类 */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi中method()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 编译【通过】，子类重写父类方法的时候，访问权限需要大于等于父类 */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi中method()方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Java中继承的注意事项"><a href="#Java中继承的注意事项" class="headerlink" title="Java中继承的注意事项"></a>Java中继承的注意事项</h2><ul><li><p>Java中继承的注意事项</p><ol><li>Java中只支持单继承，不支持多继承</li><li>Java中支持多层继承</li></ol></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Granddad</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;爷爷爱喝酒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Granddad</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;爸爸爱抽烟&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mother</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;妈妈爱跳舞&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="comment">// 此时，Son类中就同时拥有drink方法以及smoke方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><ol><li>包的概念<ul><li>包就是文件夹，用来管理类文件的</li></ul></li><li>包的定义格式<ul><li>package包名;(多级包用.分开)</li><li>例如: package.com.test.dome;</li></ul></li><li>带包编译和带包运行<ul><li>带包编译: javac -d .类名.java<ul><li>例如: javac -d .com.test.dome.Hellorld.java</li></ul></li><li>带包运行: java包名+类名<ul><li>例如:java.com.test.dome.Hellword</li></ul></li></ul></li></ol><hr><h2 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h2><ul><li>导包的意义<ul><li>使用不同包下的类时，使用的时候要写类的全路径</li></ul></li><li>导包的格式<ul><li>格式:import 包名;</li></ul></li></ul><hr><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202111061853046.png"></p><hr><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul><li>final关键字的作用<ul><li>final代表最终的意思，可以修饰成员方法，成员变量，类</li></ul></li><li>final修饰类、方法、变量的效果<ul><li>final修饰类：该类不能被继承(不能有子类、但是可以有父类)</li><li>final修饰方法： 该方法不能被重写</li><li>final修饰变量：表明该变量是一个常量，不能再次赋值</li></ul></li></ul><hr><h2 id="final修饰局部变量"><a href="#final修饰局部变量" class="headerlink" title="final修饰局部变量"></a>final修饰局部变量</h2><ul><li><p>final修饰基本数据类型变量</p><ul><li>final修饰之的基本类型的数据值不能发生改变</li></ul></li><li><p>final修饰引用数据类型变量</p><ul><li><p>final修饰指的是引用类型的地址不能发生改变，但是地址里边的内容是可以放生改变的</p></li><li><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">final</span> Student s = <span class="keyword">new</span> Student(<span class="number">23</span>);</span><br><span class="line">s = <span class="keyword">new</span> Student(<span class="number">24</span>); <span class="comment">// 错误</span></span><br><span class="line">s.setAge(<span class="number">24</span>); <span class="comment">// 正确</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul><li>static的概念<ul><li>static关键字是静态的意思，可以修饰[成员方法]、[成员变量]</li></ul></li><li>static修饰的特点<ol><li>被类的所有对象共享，这也是我们判断是否使用静态关键字的条件</li><li>可以通过类名调用，当然也可以通过对象调用</li></ol></li></ul><hr><h2 id="static访问特点"><a href="#static访问特点" class="headerlink" title="static访问特点"></a>static访问特点</h2><ul><li>static的访问特点<ul><li>非静态的成员方法<ul><li>能访问静态的成员变量</li><li>能访问非静态的成员变量</li><li>能访问静态的成员方法</li><li>能访问非静态的成员方法</li></ul></li><li>静态成员方法<ul><li>能访问静态成员变量</li><li>能访问静态的成员方法</li></ul></li><li>总结<ul><li>静态成员只能访问静态成员</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能家居设备安装方案</title>
      <link href="/2021/11/04/%E8%AE%BE%E5%A4%87%E5%AE%89%E8%A3%85%E6%96%B9%E6%A1%88/"/>
      <url>/2021/11/04/%E8%AE%BE%E5%A4%87%E5%AE%89%E8%A3%85%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<center><h1>    设备安装方案    </h1></center><h1 id="1、引言"><a href="#1、引言" class="headerlink" title="1、引言"></a>1、引言</h1><ul><li>根据贵公司的需求，以智能家居样板操作间为承载平台，为了方便顾客现场体验，我们积极设想并设计出设备安装部署方案</li></ul><h1 id="2、传感器设备物理地址编辑"><a href="#2、传感器设备物理地址编辑" class="headerlink" title="2、传感器设备物理地址编辑"></a>2、传感器设备物理地址编辑</h1><ul><li><p>为了更好的部署智能家居样板间，我们设计了联网设备的物理地址、panid、板号、通道号。</p></li><li><p>具体请参考1-1传感器设备物理地址编辑</p></li><li><center>1-1传感器设备物理地址编辑</center><table><thead><tr><th align="center">序号</th><th align="center">设备名称</th><th align="center">物理地址</th><th align="center">panId</th><th align="center">板号</th><th align="center">通道号</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">温湿度传感器</td><td align="center">00-00-00-00-1B-11-13-01</td><td align="center">01</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">02</td><td align="center">大气压传感器</td><td align="center">00-00-00-00-1B-11-13-02</td><td align="center">02</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">03</td><td align="center">二氧化氮检测器</td><td align="center">00-00-00-00-1B-11-13-03</td><td align="center">03</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">04</td><td align="center">pm2.5检测器</td><td align="center">00-00-00-00-1B-11-13-04</td><td align="center">04</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">05</td><td align="center">燃气检测器</td><td align="center">00-00-00-00-1B-11-13-05</td><td align="center">05</td><td align="center">1B-11</td><td align="center">13</td></tr><tr><td align="center">06</td><td align="center">人体红外探测器</td><td align="center">00-00-00-00-1B-11-13-06</td><td align="center">06</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">07</td><td align="center">光照传感器</td><td align="center">00-00-00-00-1B-11-13-07</td><td align="center">07</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">08</td><td align="center">烟雾传感器</td><td align="center">00-00-00-00-1B-11-13-08</td><td align="center">08</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">09</td><td align="center">报警的</td><td align="center">00-00-00-00-1B-11-13-9</td><td align="center">09</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">10</td><td align="center">换气扇</td><td align="center">00-00-00-00-1B-11-13-10</td><td align="center">10</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">11</td><td align="center">射灯</td><td align="center">00-00-00-00-1B-11-13-10</td><td align="center">11</td><td align="center"></td><td align="center"></td></tr></tbody></table></li></ul><h1 id="3、计算机网络设备IP编辑"><a href="#3、计算机网络设备IP编辑" class="headerlink" title="3、计算机网络设备IP编辑"></a>3、计算机网络设备IP编辑</h1><ul><li><p>为了更好控制联网设备，我们设计了ip进行对设备的联网控制</p></li><li><p>具体请参考1-2计算机网络设备ip编辑</p></li><li><center>1-2计算机网络设备ip编辑</center><table><thead><tr><th align="center">序号</th><th align="center">设备名称</th><th align="center">网络设备IP</th><th align="right">子网掩码</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">服务器</td><td align="center">18.0.10.1</td><td align="right"></td></tr><tr><td align="center">02</td><td align="center">路由器</td><td align="center">18.0.10.2</td><td align="right">255.255.255.0</td></tr><tr><td align="center">03</td><td align="center">A8智能网关</td><td align="center">18.0.10.3</td><td align="right"></td></tr><tr><td align="center">04</td><td align="center">嵌入式移动开发箱</td><td align="center">18.0.10.4</td><td align="right"></td></tr></tbody></table></li></ul><h1 id="4、安装工期及进度"><a href="#4、安装工期及进度" class="headerlink" title="4、安装工期及进度"></a>4、安装工期及进度</h1><ul><li>我们以智能家居样板操作间作为施工，具体开工时间是10与18日结束时期是10月18日，周期为3小时。</li></ul><h1 id="5、安装注意事项"><a href="#5、安装注意事项" class="headerlink" title="5、安装注意事项"></a>5、安装注意事项</h1><ul><li>为了防止安装时出现安全隐患，我们将严格遵守电工规范，断电操作，注意电路正负极，注意接线柱的电压变化，安装时注意团队配合，在他人登梯子的时候必须有人扶助梯子，穿着专业的服饰。</li></ul><h1 id="6、项目施工基本条件及注意事项"><a href="#6、项目施工基本条件及注意事项" class="headerlink" title="6、项目施工基本条件及注意事项"></a>6、项目施工基本条件及注意事项</h1><ul><li>为了方便贵公司参观，我们会将智能家居操作样板间提前部署在贵公司，届时期间可能会有断电、断网的情况发生、由于有些电器安装比较困难，安装时可能会伴随着噪音，我们会尽快完工希望贵公司理解。</li></ul><h1 id="7、合理优化方案"><a href="#7、合理优化方案" class="headerlink" title="7、合理优化方案"></a>7、合理优化方案</h1><ul><li>由于考虑到贵公司不是此方面的专业，我们根据需求将提出如下几点建议<ol><li>为了方便顾客操作，建议购买红外转发器从而使设备更好的控制。</li><li>购入更多的传感器，并将数据加以统计分析。</li><li>定期联系我们对智能电器设备的检查与维护。</li><li>可为智能设备单独分化一个网络频段使网络控制设备更加的稳定。</li></ol></li></ul><h1 id="关于第三阶段请看github"><a href="#关于第三阶段请看github" class="headerlink" title="关于第三阶段请看github"></a>关于第三阶段请看github</h1><p><a href="https://gitee.com/airgwl/gznxsmart-home">gwl/SmartHomeV5 (gitee.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SmartHome(第一阶段) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SmartHome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis入门(四)</title>
      <link href="/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E5%9B%9B)/"/>
      <url>/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<center><h1>注解开发</h1></center><h1 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h1><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><ul><li>大家之前都学过面向对象编程，也学习过接口，但是在真正开发中，很多时候我们会选择面向接口编程</li><li>原因是:<ul><li>解耦合</li><li>可扩展性</li><li>提高复用</li><li>分层开发</li><li>上层不用管具体的的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好</li></ul></li><li>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象写作完成的，在这种情况下，各个对象内部是如何实现自己的，对系统设计人员说就不那么重要了；</li><li>而各个对象之间协作关系成为系统设计的关键，小到不同类之间的通信，大到各种模块的交互，在系统设计之初都是要着重考虑的，这也是系统设计的住哟啊工作内容，面向接口编程就是指按照这种思想来编程的</li><li>关于接口的理解<ul><li>接口从更深层次的理解，应是定义(规范, 约束)与实现(实名分离的原则)的分离</li><li>接口的本身反映了系统设计人员对系统的抽象理解</li><li>接口应有两类<ul><li>第一类是对一个个体的抽象，它可对应为一个抽象体</li><li>第二类是对一个个体某一方面的抽象，即形成一个抽象面</li><li>一个体有可能有多个抽象面， 抽象体与抽象面是有区别的</li></ul></li></ul></li><li>三个面向区别<ul><li>面向对象是指，我们考虑东西的时候，以一个对象为单位，考虑它的属性及方法</li><li>面向过程是指，我们考虑问题的时候，以一个具体流程为单位(事物过程)，考虑它的实现</li><li>接口设计与非接口设计是指对复用技术而言，与面向对象(过程)不是一个问题更多的体现就是对系统整体的架构</li></ul></li></ul><hr><h2 id="使用注解开发-1"><a href="#使用注解开发-1" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><ul><li><p>注解在接口上实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">   <span class="function">List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>需要在核心配置文件中绑定接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.gwl.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.selectAll().forEach(System.out::println);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>本质: 反射机制</p></li><li><p>底层: 动态代理</p></li></ul><h1 id="注解完成增删改查"><a href="#注解完成增删改查" class="headerlink" title="注解完成增删改查"></a>注解完成增删改查</h1><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><ul><li><p><code>我们必须要把注解类绑定注册到mybatis核心配置文件中</code></p></li><li><p>我们可以在工具类创建的时候实现自动提交事物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h2><ul><li><p>接口加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into user(id, name, owd) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.addUser(<span class="keyword">new</span> User(<span class="number">8</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;123&quot;</span>));</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><ul><li><p>接口加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dele</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">     MybatisUtils.getSqlSession().getMapper(UserMapper.class).dele(<span class="number">9</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><ul><li><p>接口加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update user set name=#&#123;name&#125;, owd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MybatisUtils.getSqlSession()</span><br><span class="line">            .getMapper(UserMapper.class)</span><br><span class="line">            .update(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;ll&quot;</span>, <span class="string">&quot;zxcv&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><ul><li><p>接口加注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    方法存在多个参数， 所有的参数前面必须加上@Param(&quot;id&quot;)注解</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User userById = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(userById);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Param-注解"><a href="#Param-注解" class="headerlink" title="@Param()注解"></a>@Param()注解</h2><ul><li>基本类型或者String类型 需要加上</li><li>引用类型不需要</li><li>如果只有一个基本类型的话 可以忽略</li><li>我们在sql中引用的就是我们这里的@Param()中这顶的属性名</li></ul><hr><h1 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h1><ul><li>多个学生 对应一个老师</li><li>对于学生而言 多个学生关联一个老师【多对一】</li><li>对于老师而言 集合 一个老师有很多学生【一对多】</li></ul><h2 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.gwl.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        复杂查询的属性， 我们需要单独处理， association对象 collection集合--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentAll2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname from student s, teacher t where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h1><ul><li><p>比如一个老师拥有多个学生</p><ul><li><p>按照结果嵌套处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.id tid</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.id = t.id and t.id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    按照结果查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;student&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按照查询嵌套处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">select * from teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArratList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">get</span>&quot;<span class="attr">getStudentByTeacherId</span>&quot; <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultTpye</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">  select * from student where tid = #&#123;tid&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>association 多对一</p></li><li><p>collection 一对多</p></li><li><p>javaType &amp; ofTpye</p><ul><li>JavaType 用来指定实体类中属性的类型</li><li>ofType 用来指定映射到List或者集合中的pojo类型 泛型中的约束类型</li></ul></li></ul></li></ul><hr><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1>]]></content>
      
      
      <categories>
          
          <category> mybatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据存储框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSwitch和循环语句</title>
      <link href="/2021/11/04/switch%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2021/11/04/switch%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<center> <h1>Switch和循环语句</h1></center><h1 id="switch语句结构"><a href="#switch语句结构" class="headerlink" title="switch语句结构"></a>switch语句结构</h1><ul><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    ... </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>首先计算出表达式的值</p></li><li><p>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束</p></li><li><p>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉</p><p><code>如果switch中得case，没有对应break的话，则会出现case穿透的现象</code></p><blockquote><p>case穿透就是不结束语句直接去判断下一条语句</p></blockquote></li></ol></li></ul><hr><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><ul><li><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul><li><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形成死循环</p></li><li><p>for循环格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句;条件判断语句;条件控制语句) &#123;</span><br><span class="line">  循环体语句; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>格式解释：</p><ul><li>初始化语句： 用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样</li><li>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一</li><li>循环体语句： 用于表示循环反复执行的内容，简单说就是循环反复执行的事情直执行下去</li><li>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</li></ul></li><li><p>执行流程</p><ol><li>执行初始化语句</li><li>执行条件判断语句，看其结果是true还是false<ol><li>如果是false，循环结束</li><li>如果是true，继续执行</li></ol></li><li>执行循环体语句</li><li>执行条件控制语句</li><li>回到2继续</li></ol></li></ul></blockquote></li></ul></li></ul><hr><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><ul><li><h2 id="while循环完整格式"><a href="#while循环完整格式" class="headerlink" title="while循环完整格式"></a>while循环完整格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">初始化语句; </span><br><span class="line"><span class="keyword">while</span> (条件判断语句) &#123;</span><br><span class="line">  循环体语句; 条件控制语句; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h2 id="while循环执行流程"><a href="#while循环执行流程" class="headerlink" title="while循环执行流程"></a>while循环执行流程</h2><ol><li>执行初始化语句</li><li>执行条件判断语句，看其结果是true还是false<ol><li>如果是false，循环结束</li><li>如果是true，继续执行</li></ol></li><li>执行循环体语句</li><li>执行条件控制语句</li><li>回到2继续</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需求：在控制台输出5次&quot;HelloWorld&quot; </span></span><br><span class="line">    <span class="comment">//for循环实现 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;--------&quot;</span>); </span><br><span class="line">    <span class="comment">//while循环实现 </span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>; <span class="keyword">while</span>(j&lt;=<span class="number">5</span>) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>); </span><br><span class="line">      j++; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="do…while循环结构"><a href="#do…while循环结构" class="headerlink" title="do…while循环结构"></a>do…while循环结构</h1><ul><li><h2 id="完整格式"><a href="#完整格式" class="headerlink" title="完整格式"></a>完整格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  循环体语句;</span><br><span class="line">  条件控制语句; </span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br></pre></td></tr></table></figure></li><li><h2 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li>执行初始化语句</li><li>执行循环体语句</li><li>执行条件控制语句</li><li>执行条件判断语句，看其结果是true还是false<ol><li>如果是false，循环结束</li><li>如果是true，继续执行</li></ol></li><li>回到2继续</li></ol></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//需求：在控制台输出5次&quot;HelloWorld&quot; </span></span><br><span class="line">    <span class="comment">//for循环实现 f</span></span><br><span class="line">    or(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;--------&quot;</span>); </span><br><span class="line">    <span class="comment">//do...while循环实现 </span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>; <span class="keyword">do</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld&quot;</span>); </span><br><span class="line">      j++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(j&lt;=<span class="number">5</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="三种循环的区别"><a href="#三种循环的区别" class="headerlink" title="三种循环的区别"></a>三种循环的区别</h1><ul><li><h2 id="三种循环的区别-1"><a href="#三种循环的区别-1" class="headerlink" title="三种循环的区别"></a>三种循环的区别</h2><ul><li>for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）</li><li>do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</li></ul></li><li><h2 id="for循环和while的区别"><a href="#for循环和while的区别" class="headerlink" title="for循环和while的区别"></a>for循环和while的区别</h2><ul><li>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了</li><li>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用</li></ul></li><li><h2 id="死循环（无限循环）的三种格式"><a href="#死循环（无限循环）的三种格式" class="headerlink" title="死循环（无限循环）的三种格式"></a>死循环（无限循环）的三种格式</h2><ol><li> for(;;){}</li><li>while(true){}</li><li>do {} while(true);</li></ol></li></ul><hr><h1 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h1><ul><li>跳转控制语句（break）<ul><li>跳出循环，结束循环</li></ul></li><li>跳转控制语句（continue）<ul><li>跳过本次循环，继续下次循环</li></ul></li><li><code>continue只能在循环中进行使用</code></li></ul><hr><h1 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h1><ul><li><p>循环嵌套概述：在循环中，继续定义循环</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">  <span class="comment">//外循环控制小时的范围，内循环控制分钟的范围 </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> hour = <span class="number">0</span>; hour &lt; <span class="number">24</span>; hour++) &#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> minute = <span class="number">0</span>; minute &lt; <span class="number">60</span>; minute++) &#123; </span><br><span class="line">      System.out.println(hour + <span class="string">&quot;时&quot;</span> + minute + <span class="string">&quot;分&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;--------&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>整个内循环，就是外循环的一个循环体，内部循环体没有执行完毕，外循环是不会继续向下执行的</li><li>外循环执行一次，内循环执行一圈</li></ul></blockquote></li></ul><hr><h1 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h1><ul><li><h2 id="Random产生随机数"><a href="#Random产生随机数" class="headerlink" title="Random产生随机数"></a>Random产生随机数</h2></li><li><p>Random类似Scanner，也是Java提供好的API，内部提供了产生随机数的功能</p><ul><li>API可以理解为Java已经写好的代码</li></ul></li><li><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li><p>导包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br></pre></td></tr></table></figure></li><li><p>创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Random r = <span class="keyword">new</span> Random();</span><br></pre></td></tr></table></figure></li><li><p>产生随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = r.nextInt(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><blockquote><p> 10代表的是一个范围，如果括号写10，产生的随机数就是0-9，括号写20，参数的随机数则是0-19</p></blockquote></li></ol></li><li><p>示例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//创建对象 </span></span><br><span class="line">    Random r = <span class="keyword">new</span> Random(); </span><br><span class="line">    <span class="comment">//用循环获取10个随机数 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123; </span><br><span class="line">      <span class="comment">//获取随机数 </span></span><br><span class="line">      <span class="keyword">int</span> number = r.nextInt(<span class="number">10</span>); </span><br><span class="line">      System.out.println(<span class="string">&quot;number:&quot;</span> + number); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//需求：获取一个1-100之间的随机数 </span></span><br><span class="line">    <span class="keyword">int</span> x = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>; </span><br><span class="line">    System.out.println(x); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis入门(三)</title>
      <link href="/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%B8%89)/"/>
      <url>/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<center><h1>核心配置文件</h1></center><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="configuration配置"><a href="#configuration配置" class="headerlink" title="configuration配置"></a>configuration配置</h2><ul><li>配置文档的顶层结构<ul><li>properties属性</li><li>settings设置</li><li>typeAliases类型别名</li><li>typeHandlers类型处理器</li><li>objectFactory对象工厂</li><li>plugins插件</li><li>environments环境配置<ul><li>environment环境变量<ul><li>transactionManager事物管理器</li><li>dataSource数据源</li></ul></li><li>databaseldProvider数据库厂标识</li><li>mapper映射器</li></ul></li></ul></li></ul><hr><h2 id="配置环境-evironments"><a href="#配置环境-evironments" class="headerlink" title="配置环境(evironments)"></a>配置环境(evironments)</h2><ul><li>Mybatis 可以配置成适应多种环境<ul><li>即使可以配置多个环境，但每个SqlSessionFactory实例只能选者一种环境</li></ul></li><li>Mybatis默认的事物管理器是 jdbc， 连接池: POOLED</li></ul><h2 id="属性-properties"><a href="#属性-properties" class="headerlink" title="属性(properties)"></a>属性(properties)</h2><ul><li><p>我们可以通关properties属性来实现应用配置文件</p><ul><li><p>resources文件夹中编写peoperties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span> = <span class="string">jdbc:mysql://localhost:3307/mybatis?userSSL=true&amp;amp;userUnicode&amp;amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="meta">jdbc.user</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span> = <span class="string">gwl2003.520</span></span><br></pre></td></tr></table></figure></li><li><p>通过properties标签引入配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="别名-typeAliases"><a href="#别名-typeAliases" class="headerlink" title="别名(typeAliases)"></a>别名(typeAliases)</h2><ul><li><p>类型别名是为java类型设置一个短的名字</p></li><li><p>存在的意义仅在于用来减少完全限定名的沉余 </p></li><li><p><code>类使用别名后，原来的类名不能用，全部都得换</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    给实体类起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>也可以指定一个包名，Mybatis会在包名下搜索需要的JavaBean</p><ul><li><p>扫描实体类的包，它的默认别名就为这个类的类名首写字母</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.gwl.pojo.User&quot; alias=&quot;user&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.gwl.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实体类比较少的时候使用第一种方式， 如果实体类比较多的话推荐使用第二种</p><ul><li><p>第一种可以自定义别名， 第二种不行，如果非要修改需要在实体类上增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//别名注解</span></span><br><span class="line"><span class="meta">@Alias(&quot;hello&quot;)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格</p><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202110081553921.png"></p></li></ul><hr><h2 id="设置-sttings"><a href="#设置-sttings" class="headerlink" title="设置(sttings)"></a>设置(sttings)</h2><p>这是mybatis中重要的调整设置, 它会改变mybatis的运行行为</p><p>日志的实现</p><p><img src="https://gitee.com/airgwl/upic/raw/master/img/image-20211008161107186.png" alt="image-20211008161107186"></p><p>缓存和懒加载</p><p>![image-20211008161224925](/Users/gwl/Library/Application Support/typora-user-images/image-20211008161224925.png)</p><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><ul><li><p>typerHandlers(类处理器)</p></li><li><p>objectFactory(对象工厂)</p></li><li><p>plugins插件</p><ul><li>mybatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ul></li></ul><h2 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h2><ul><li><p>MapperRegistry: 注册绑定我们的Mapper文件</p><ul><li>方式一</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mybatis-user-config.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>方式二:使用class文件绑定注册</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.gwl.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>方式二注意点:<ul><li>接口和他的mapper配置文件必须同名</li><li>接口和他的mapper配置文件必须要在同一包下</li></ul></li></ul></blockquote><ul><li><p>方式三：使用扫描包进行注入绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;mybatis-user-config.xml&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper class=&quot;com.gwl.mapper.UserMapper&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.gwl.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>方式二注意点:<ul><li>接口和他的mapper配置文件必须同名</li><li>接口和他的mapper配置文件必须要在同一包下</li></ul></li></ul></blockquote></li></ul></li></ul><hr><h1 id="ResultMap结果集映射"><a href="#ResultMap结果集映射" class="headerlink" title="ResultMap结果集映射"></a>ResultMap结果集映射</h1><ul><li><p><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</p></li><li><p>当实体类中的字段名和数据库的字段名不匹配时不用resultMap是这样的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    user_id             as &quot;id&quot;,</span><br><span class="line">    user_name           as &quot;userName&quot;,</span><br><span class="line">    hashed_password     as &quot;hashedPassword&quot;</span><br><span class="line">  from some_table</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当使用resultMap时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resultMap的实体类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--实体类的字段数据库中的字段--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;owd&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在标签中使用resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resultMap的id--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h2><ul><li><p>如果一个数据库操作，出现了异常，我们需要排错，日志就是最好的助手</p><p><img src="https://gitee.com/airgwl/upic/raw/master/img/image-20211008194625011.png" alt="image-20211008194625011"></p><ul><li>SLF4J</li><li>LOG4J </li><li> LOG4J2 </li><li> JDK_LOGGING </li><li> COMMONS_LOGGING</li><li> STDOUT_LOGGING</li><li> NO_LOGGING</li></ul></li><li><p>在mybatis核心配置文件中配置日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>日志打印信息</li></ul><p><img src="https://gitee.com/airgwl/upic/raw/master/img/image-20211008195654898.png" alt="image-20211008195654898"></p></li></ul><h2 id="LOG4J"><a href="#LOG4J" class="headerlink" title="LOG4J"></a>LOG4J</h2><ul><li><p>什么是LOG4J</p><ul><li>log4j是apache的一个开源项目，通过使用log4j，我们可以控制日志信息输送的目的是控制台、文件、GUI组件 </li><li>我们也可以控制每一条日志的输出格式</li><li>我们通过每一条日志信息的级别，我们能够更加细致地控制日志生成的过程</li><li>通过一个配置文件来灵活的进行配置，而不需要修改代码</li></ul></li><li><p>使用步骤</p><ol><li><p>导入jar包或者maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在mybatis核心配置文件中配置LOG4J</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        标准的日志工厂--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写log4j.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">【%c】-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/java.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">【%p】【%d&#123;yy-MM-dd&#125;】【%c】%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><ul><li><p>日志输出样式</p><p><img src="https://gitee.com/airgwl/upic/raw/master/img/image-20211008202826129.png" alt="image-20211008202826129"></p></li></ul></li><li><p>简单使用步骤</p><ol><li><p>在要使用LOG4J的类中导入包<code>import org.apache.log4j.Logger;</code></p></li><li><p>日志对象 参数为当前类的class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest.class);</span><br></pre></td></tr></table></figure></li><li><p>日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug:进入类testLog4j&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error:进入了testLog4j&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul><hr><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><ul><li><h2 id="为了减少数据的处理量所以采用分页进行数据展示"><a href="#为了减少数据的处理量所以采用分页进行数据展示" class="headerlink" title="为了减少数据的处理量所以采用分页进行数据展示"></a>为了减少数据的处理量所以采用分页进行数据展示</h2></li><li><p>mysql中使用LImit分页的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user limit 起始startIndex, pageSize;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用Sql语句实现分页"><a href="#使用Sql语句实现分页" class="headerlink" title="使用Sql语句实现分页"></a>使用Sql语句实现分页</h2><ol><li><p>接口 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    分页</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String, Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from user limit #&#123;startIndex&#125;, #&#123;pageSize&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">       UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">       Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;startIndex&quot;</span>, <span class="number">1</span>);</span><br><span class="line">       map.put(<span class="string">&quot;pageSize&quot;</span>, <span class="number">2</span>);</span><br><span class="line">       <span class="keyword">for</span> (User user : mapper.getUserByLimit(map)) &#123;</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="RowBounds分页"><a href="#RowBounds分页" class="headerlink" title="RowBounds分页"></a>RowBounds分页</h2><ul><li><p>不在使用SQL分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRowBounds</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">       List&lt;User&gt; user = sqlSession.selectList(<span class="string">&quot;com.com.gwl.mapper.UserMapper.getUserRowBounds&quot;</span>, <span class="keyword">null</span>, <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">       user.forEach(System.out::println);</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><ul><li>Mybatis分页插件PageHelp<ul><li><a href="https://pagehelper.github.io/docs/howtouse/">点我查看帮助手册</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> mybatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据存储框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis入门(二)</title>
      <link href="/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%BA%8C)/"/>
      <url>/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<center><h1>Mybatis入门(二)</h1></center><h1 id="Mybatis增删改查"><a href="#Mybatis增删改查" class="headerlink" title="Mybatis增删改查"></a>Mybatis增删改查</h1><ul><li>选择，查询语句<ul><li>id: 就是应对的namespace中的方法名</li><li>resultType: Sql语句的执行返回值</li><li>prarmeterType: 参数类型</li></ul></li><li><code>增删改需要提交事物</code></li></ul><hr><h2 id="Select语句"><a href="#Select语句" class="headerlink" title="Select语句"></a>Select语句</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User userById = mapper.getUserById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(userById);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Insert语句"><a href="#Insert语句" class="headerlink" title="Insert语句"></a>Insert语句</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  插入用户insert</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user (id, name, owd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;owd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.addUser(<span class="keyword">new</span> User(<span class="number">6</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;12345&quot;</span>));</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Update语句"><a href="#Update语句" class="headerlink" title="Update语句"></a>Update语句</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upDataUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;upDataUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       update user set name=#&#123;name&#125;, owd=#&#123;owd&#125; where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updataUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.upDataUser(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;hh&quot;</span>, <span class="string">&quot;1234&quot;</span>));</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Delete语句"><a href="#Delete语句" class="headerlink" title="Delete语句"></a>Delete语句</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    删除一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">       delete from user where id = 2;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dele</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.deleteUser(<span class="number">2</span>);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="传递Map集合"><a href="#传递Map集合" class="headerlink" title="传递Map集合"></a>传递Map集合</h2><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map方式</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUserDate</span><span class="params">(Map&lt;String, Object&gt; hmp)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUserDate&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into user (id, name, owd) values (#&#123;userid&#125;, #&#123;username&#125;, #&#123;userpwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inserUserDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; hmp = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    hmp.put(<span class="string">&quot;userid&quot;</span>, <span class="number">7</span>);</span><br><span class="line">    hmp.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">    hmp.put(<span class="string">&quot;userpwd&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    mapper.insertUserDate(hmp);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>map的主键要和mapper中的#&#123;&#125;里面的值一一对应</code></li><li>map传递参数，直接在sql中取出key</li><li>对象传递参数，直接在sql中取对象的属性</li><li>只有一个基本类型参数的情况下，可以直接在sql中取到</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> mybatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据存储框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis入门(一)</title>
      <link href="/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%B8%80)/"/>
      <url>/2021/11/04/Mybatis%E5%85%A5%E9%97%A8(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<center><h1>Mybatis入门(一)</h1></center><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h2><ul><li>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录</li></ul><hr><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="安装Mybatis"><a href="#安装Mybatis" class="headerlink" title="安装Mybatis"></a>安装Mybatis</h2><ul><li><p>要使用 MyBatis， 只需将 <a href="https://github.com/mybatis/mybatis-3/releases">mybatis-x.x.x.jar</a> 文件置于类路径（classpath）中即可</p></li><li><p>如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个Mybatis程序</h2><ul><li>思路<ol><li>搭建环境</li><li>导入mybatis</li><li>编写代码</li><li>测试</li></ol></li></ul><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure></li><li><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">&quot;id&quot; <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key,</span><br><span class="line">  &quot;name&quot; <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  &quot;pwd&quot; <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>插入测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id, name, pwd) <span class="keyword">values</span>(&quot;1&quot;, &quot;java&quot;, &quot;123456&quot;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="导入mybatis"><a href="#导入mybatis" class="headerlink" title="导入mybatis"></a>导入mybatis</h2><ul><li><p>新建一个普通的maven项目</p></li><li><p>删除src目录</p></li><li><p>导入mysql、mybatis、junit这三个坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个子模块</p></li><li><p>在resources下创建配置文件并配置</p><ul><li>数据库url要设置字符才不会出现存储中文乱码现象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3307/mybatis?userSSL=true<span class="symbol">&amp;amp;</span>userUnicode<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;gwl2003.520&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加注册中心   --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mybatis-user-mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写mybatis工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从 SqlSessionFactory 中获取 SqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream resourceAsStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//User实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String owd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> owd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOwd</span><span class="params">(String owd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.owd = owd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UserMapper&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, owd=&#x27;&quot;</span> + owd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在resources目录下实现接口配置文件(文件名随意)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.gwl.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.gwl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在Test目录下编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; user = mapper.getUser();</span><br><span class="line">        user.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>启动运行代码</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> mybatis框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据存储框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运算符号和分支语句</title>
      <link href="/2021/11/04/Java%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7%E5%92%8C%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2021/11/04/Java%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7%E5%92%8C%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<center><h1>运算符和分支语句</h1></center><h2 id="运算法和表达式"><a href="#运算法和表达式" class="headerlink" title="运算法和表达式"></a>运算法和表达式</h2><ul><li><p>运算符: 对常量或者变量进行操作的符号</p></li><li><p>表达式: 用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式 </p></li><li><p>不同运算副连接的表达式体现的是不同类型的表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br></pre></td></tr></table></figure><blockquote><p>+ :是运算符</p><p>a+b: 是表达式， 由于+是算术运算符，所以这个表达式叫算术表达式</p></blockquote></li></ul><hr><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><ul><li><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>两数相加</td></tr><tr><td>-</td><td>减</td><td>两数相减</td></tr><tr><td>*</td><td>乘</td><td>两数相乘</td></tr><tr><td>/</td><td>除</td><td>两数相除</td></tr><tr><td>%</td><td>取余</td><td>获取两个数据做除法的余数</td></tr></tbody></table></li><li><blockquote><p>/和%的区别: 两个数据做除法, /取结果的商, %取结果的余数</p><p>整数操作只能得到整数, 想要得到小数, 必须有浮点数参与运算</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">System.out.println(a/b); <span class="comment">// 输出结果3</span></span><br><span class="line">System.out.println(a%b); <span class="comment">//输出结果1</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="字符的-操作"><a href="#字符的-操作" class="headerlink" title="字符的+操作"></a><strong>字符</strong>的+操作</h2><ul><li><p>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值</p><ul><li><p>‘a’ – 97 a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加</p></li><li><p>‘A’ – 65 A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加</p></li><li><p>‘0’ – 48 0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少</span></span><br><span class="line"><span class="keyword">char</span> ch1 = <span class="string">&#x27;a&#x27;</span>; </span><br><span class="line">System.out.println(ch1 + <span class="number">1</span>); <span class="comment">// 输出98，97 + 1 = 98 </span></span><br><span class="line"><span class="keyword">char</span> ch2 = <span class="string">&#x27;A&#x27;</span>; </span><br><span class="line">System.out.println(ch2 + <span class="number">1</span>); <span class="comment">// 输出66，65 + 1 = 66 </span></span><br><span class="line"><span class="keyword">char</span> ch3 = <span class="string">&#x27;0&#x27;</span>; </span><br><span class="line">System.out.println(ch3 + <span class="number">1</span>); <span class="comment">// 输出49，48 + 1 = 49</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升</p><ul><li><h2 id="提升规则"><a href="#提升规则" class="headerlink" title="提升规则"></a>提升规则</h2><ul><li><p>byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。</p></li><li><p>整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型</p></li><li><p>等级顺序：byte,short,char –&gt; int –&gt; long –&gt; flfloat –&gt; double</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">20</span>; <span class="comment">// byte b3 = b1 + b2;</span></span><br><span class="line"><span class="comment">// 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失 精度</span></span><br><span class="line"><span class="keyword">int</span> i3 = b1 + b2; <span class="comment">// 应该使用int接收 </span></span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>) (b1 + b2); <span class="comment">// 或者将结果强制转换为byte类型 </span></span><br><span class="line">------------------------------- </span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> num2 = <span class="number">20.0</span>;</span><br><span class="line"><span class="keyword">double</span> num3 = num1 + num2; <span class="comment">// 使用double接收，因为num1会自动提升为double类型</span></span><br></pre></td></tr></table></figure><blockquote><p>tips：正是由于上述原因，所以在程序开发中我们很少使用byte或者short类型定义整数。也很少会使用char类型定</p><p>义字符，而使用字符串类型，更不会使用char类型做算术运算。</p></blockquote></li></ul></li></ul></li></ul><hr><h2 id="字符串的-操作"><a href="#字符串的-操作" class="headerlink" title="字符串的+操作"></a><strong>字符串</strong>的+操作</h2><ul><li><p>当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;java&quot;</span>+ <span class="number">666</span>); <span class="comment">// 输出：java666</span></span><br></pre></td></tr></table></figure></li><li><p>在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右逐个执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="number">99</span> + <span class="string">&quot;年&quot;</span>); <span class="comment">// 输出：199年黑马 </span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;java&quot;</span> + <span class="number">3</span> + <span class="number">4</span>); <span class="comment">// 输出：3java34 </span></span><br><span class="line"><span class="comment">// 可以使用小括号改变运算的优先级 </span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;java&quot;</span> + (<span class="number">3</span> + <span class="number">4</span>)); <span class="comment">// 输出：3java7</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ul><li><p>赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</p></li><li><table><thead><tr><th align="center"><strong>符号</strong></th><th align="center"><strong>作用</strong></th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">赋值</td><td align="center">a=10，将10赋值给变量a</td></tr><tr><td align="center">+=</td><td align="center">加后赋值</td><td align="center">a+=b，将a+b的值给a</td></tr><tr><td align="center">-=</td><td align="center">减后赋值</td><td align="center">a-=b，将a-b的值给a</td></tr><tr><td align="center">*=</td><td align="center">乘后赋值</td><td align="center">a*=b，将a×b的值给a</td></tr><tr><td align="center">/=</td><td align="center">除后赋值</td><td align="center">a/=b，将a÷b的商给a</td></tr><tr><td align="center">%=</td><td align="center">取余后赋值</td><td align="center">a%=b，将a÷b的余数给a</td></tr></tbody></table><blockquote><p>扩展的赋值运算符隐含了强制类型转换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line">s = s + <span class="number">10</span>; <span class="comment">// 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度 </span></span><br><span class="line">s += <span class="number">10</span>; <span class="comment">// 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10);</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><ul><li><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>自增</td><td>变量的值加1</td></tr><tr><td>–</td><td>自减</td><td>变量的值减1</td></tr></tbody></table></li><li><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h2><ul><li>++和– 既可以放在变量的后边，也可以放在变量的前边</li><li>单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的</li><li>参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–</li><li>参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作</li></ul></li><li><p>最常见的用法：单独使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>; i++; <span class="comment">// 单独使用 </span></span><br><span class="line">System.out.println(<span class="string">&quot;i:&quot;</span> + i); <span class="comment">// i:11 </span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line">++j; <span class="comment">// 单独使用 </span></span><br><span class="line">System.out.println(<span class="string">&quot;j:&quot;</span> + j); <span class="comment">// j:11 </span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> y = x++; <span class="comment">// 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1 </span></span><br><span class="line">System.out.println(<span class="string">&quot;x:&quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y); <span class="comment">// x:11，y:10 </span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> n = ++m; <span class="comment">// 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1 </span></span><br><span class="line">System.out.println(<span class="string">&quot;m:&quot;</span> + m + <span class="string">&quot;, m:&quot;</span> + m); <span class="comment">// m:11，m:11</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><ul><li><p>关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td>!=</td><td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td></tr><tr><td>&gt;</td><td>a&gt;b，判断a是否大于b，成立为true，不成立为false</td></tr><tr><td>&gt;=</td><td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td>&lt;</td><td>a&lt;b，判断a是否小于b，成立为true，不成立为false</td></tr><tr><td>&lt;=</td><td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table><blockquote><p>关系运算符的结果都是boolean类型，要么是true，要么是false</p><p>千万不要把**“==”误写成“=”，”==”**是判断是否相等的关系，”=”是赋值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;<span class="keyword">int</span> b = <span class="number">20</span>;System.out.println(a == b); <span class="comment">// false System.out.println(a != b); // true System.out.println(a &gt; b); // false System.out.println(a &gt;= b); // false System.out.println(a &lt; b); // true System.out.println(a &lt;= b); // true// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量 boolean flag = a &gt; b; System.out.println(flag); // 输出false</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li><p>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false</p><table><thead><tr><th align="center">符号</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">逻辑与</td><td align="center">a&amp;b，a和b都是true，结果为true，否则为false</td></tr><tr><td align="center">|</td><td align="center">逻辑或</td><td align="center">a|b, a和b都是false, 结果为false, 否则为true</td></tr><tr><td align="center">^</td><td align="center">逻辑异或</td><td align="center">a^b，a和b结果不同为true，相同为false</td></tr><tr><td align="center">!</td><td align="center">逻辑非</td><td align="center">!a，结果和a的结果正好相反</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义变量 int i = 10; int j = 20; int k = 30; //&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为false System.out.println((i &gt; j) &amp; (i &gt; k)); //false &amp; false,输出false System.out.println((i &lt; j) &amp; (i &gt; k)); //true &amp; false,输出false System.out.println((i &gt; j) &amp; (i &lt; k)); //false &amp; true,输出false System.out.println((i &lt; j) &amp; (i &lt; k)); //true &amp; true,输出true System.out.println(&quot;--------&quot;);//| “或”，或者的关系，只要表达式中有一个值为true，结果即为true System.out.println((i &gt; j) | (i &gt; k)); //false | false,输出false System.out.println((i &lt; j) | (i &gt; k)); //true | false,输出true System.out.println((i &gt; j) | (i &lt; k)); //false | true,输出true System.out.println((i &lt; j) | (i &lt; k)); //true | true,输出true System.out.println(&quot;--------&quot;);//^ “异或”，相同为false，不同为true System.out.println((i &gt; j) ^ (i &gt; k)); //false ^ false,输出false System.out.println((i &lt; j) ^ (i &gt; k)); //true ^ false,输出trueSystem.out.println((i &gt; j) ^ (i &lt; k)); //false ^ true,输出true System.out.println((i &lt; j) ^ (i &lt; k)); //true ^ true,输出false System.out.println(&quot;--------&quot;);//! “非”，取反 System.out.println((i &gt; j)); //false System.out.println(!(i &gt; j)); //!false，,输出true</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h2><ul><li><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>短路与</td><td>作用和&amp;相同，但是有短路效果</td></tr><tr><td>||</td><td>短路或</td><td>作用和</td></tr></tbody></table><p>在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式将不再参与运算。</p><ul><li><p>逻辑与&amp;，无论左边真假，右边都要执行</p></li><li><p>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行</p></li><li><p>逻辑或|，无论左边真假，右边都要执行</p></li><li><p>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;<span class="keyword">int</span> y = <span class="number">4</span>;System.out.println((x++ &gt; <span class="number">4</span>) &amp; (y++ &gt; <span class="number">5</span>)); <span class="comment">// 两个表达都会运算 System.out.println(x); // 4 System.out.println(y); // 5 System.out.println((x++ &gt; 4) &amp;&amp; (y++ &gt; 5)); // 左边已经可以确定结果为false，右边不参与运算 System.out.println(x); // 4 System.out.println(y); // 4</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><ul><li><h2 id="三元运算符语法格式"><a href="#三元运算符语法格式" class="headerlink" title="三元运算符语法格式"></a>三元运算符语法格式</h2><ul><li><p><code>关系表达式 ? 表达式1 : 表达式2;</code></p></li><li><p>问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;<span class="keyword">int</span> b = <span class="number">20</span>;<span class="keyword">int</span> c = a &gt; b ? a : b; <span class="comment">// 判断 a&gt;b 是否为真，如果为真取a的值，如果为假，取b的值</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h2><ul><li><h2 id="以通过-Scanner-类来获取用户的输入"><a href="#以通过-Scanner-类来获取用户的输入" class="headerlink" title="以通过 Scanner 类来获取用户的输入"></a>以通过 Scanner 类来获取用户的输入</h2><ol><li><p>导包, Scanner 类在java.util包下，所以需要将该类导入, 导包的语句需要定义在类的上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure></li><li><p>创建scanner对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">// 创建Scanner对象，sc表示变量名，其他均不可变</span></span><br></pre></td></tr></table></figure></li><li><p>接收数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = sc.nextInt(); <span class="comment">// 表示将键盘录入的值作为int数返回。</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//创建对象 </span></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in); </span><br><span class="line">    <span class="comment">//接收数据 </span></span><br><span class="line">    <span class="keyword">int</span> x = sc.nextInt(); </span><br><span class="line">    <span class="comment">//输出数据 </span></span><br><span class="line">    System.out.println(<span class="string">&quot;x:&quot;</span> + x); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><ul><li><h2 id="流程控制语句分类"><a href="#流程控制语句分类" class="headerlink" title="流程控制语句分类"></a>流程控制语句分类</h2><ul><li><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2></li><li>分支结构(if, switch)</li><li>循环结构(for, while, do…while)</li></ul></li><li><h2 id="顺序结构-1"><a href="#顺序结构-1" class="headerlink" title="顺序结构"></a>顺序结构</h2><ul><li><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的</p></li><li><p>顺序结构的流程图:</p><center>   <img src="https://gitee.com/airgwl/upic/raw/master//img/202110061500594.png" width="30%">   </center></li></ul></li></ul><p>​        </p><ul><li><h1 id="if语句格式1"><a href="#if语句格式1" class="headerlink" title="if语句格式1"></a>if语句格式1</h1><ul><li><h2 id="if语句格式"><a href="#if语句格式" class="headerlink" title="if语句格式"></a>if语句格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式： <span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">  语句体; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>首先计算关系表达式的值</p></li><li><p>如果关系表达式的值为true就执行语句体</p></li><li><p>如果关系表达式的值为false就不执行语句体</p></li><li><p>继续执行后面的语句内容</p><center><img src="https://gitee.com/airgwl/upic/raw/master//img/202110061513111.png" width="50%"></center></li><li><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;开始&quot;</span>); <span class="comment">//定义两个变量 </span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>; </span><br><span class="line">    <span class="comment">//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b </span></span><br><span class="line">    <span class="keyword">if</span>(a == b) &#123; System.out.println(<span class="string">&quot;a等于b&quot;</span>); &#125;</span><br><span class="line">    <span class="comment">//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c </span></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">if</span>(a == c) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;a等于c&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;结束&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h1 id="if语句格式2"><a href="#if语句格式2" class="headerlink" title="if语句格式2"></a>if语句格式2</h1></li><li><h2 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>首先计算关系表达式的值</p></li><li><p>如果关系表达式的值为true就执行语句体1</p></li><li><p>如果关系表达式的值为false就执行语句体2</p></li><li><p>继续执行后面的语句内容</p><center><img src="https://gitee.com/airgwl/upic/raw/master//img/202110061527744.png" width="50%"></center></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo02</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;开始&quot;</span>); </span><br><span class="line">  <span class="comment">//定义两个变量 </span></span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line">  <span class="keyword">int</span> b = <span class="number">20</span>; </span><br><span class="line">  b = <span class="number">5</span>; <span class="comment">//需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b </span></span><br><span class="line">  <span class="keyword">if</span>(a &gt; b) &#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;a的值大于b&quot;</span>); </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;a的值不大于b&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><h1 id="if语句格式3"><a href="#if语句格式3" class="headerlink" title="if语句格式3"></a>if语句格式3</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式： </span><br><span class="line">  <span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123; </span><br><span class="line">    语句体<span class="number">1</span>; </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>; </span><br><span class="line">  &#125;…<span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><h2 id="执行流程-2"><a href="#执行流程-2" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li><p>首先计算关系表达式1的值</p></li><li><p>如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</p></li><li><p>如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</p></li><li><p>…</p></li><li><p>如果没有任何关系表达式为true，就执行语句体n+1</p><center>    <img src="https://gitee.com/airgwl/upic/raw/master//img/202110061541304.png"/> </center></li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象</title>
      <link href="/2021/11/04/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/11/04/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<center><H1>面向对象</H1></center><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><ul><li><p>客观存在的事物称为对象，所以常常说万物皆对象</p></li><li><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li>类的理解<ul><li>类是对现实生活中一类具有共同属性行为的事物的抽象</li><li>类是对象的数据行为，类是具有共同属性行为的一组对象集合</li><li>简单理解 类就是对现实事物的一种描述</li></ul></li><li>类的组成<ul><li>属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）</li><li>行为：指事物能执行的操作，例如：手机事物（打电话，发短信）</li></ul></li></ul></li><li><h2 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h2><ul><li>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>对象：是能够看得到摸的着的真实存在的实体</li><li>简单理解：类是对事物的一种描述，对象则为具体存在的事物</li></ul></li></ul><hr><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><ul><li><h2 id="类的组成是由属性和行为两部分组成"><a href="#类的组成是由属性和行为两部分组成" class="headerlink" title="类的组成是由属性和行为两部分组成"></a>类的组成是由属性和行为两部分组成</h2><ul><li>属性：在类中通过成员变量来体现（类中方法外的变量）</li><li>行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）</li></ul></li><li><h2 id="类的定义步骤"><a href="#类的定义步骤" class="headerlink" title="类的定义步骤"></a>类的定义步骤</h2><ol><li><p>定义类</p></li><li><p>编写类的成员变量</p><ol><li><p>编写类的成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123; </span><br><span class="line">  <span class="comment">// 成员变量 </span></span><br><span class="line">  变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>； </span><br><span class="line">  变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;</span><br><span class="line">  …</span><br><span class="line">  <span class="comment">// 成员方法 </span></span><br><span class="line">  方法<span class="number">1</span>; </span><br><span class="line">  方法<span class="number">2</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 手机类：</span></span><br><span class="line"><span class="comment">     类名：</span></span><br><span class="line"><span class="comment">      手机(Phone) </span></span><br><span class="line"><span class="comment">      成员变量：</span></span><br><span class="line"><span class="comment">      品牌(brand) </span></span><br><span class="line"><span class="comment">      价格(price) </span></span><br><span class="line"><span class="comment">      成员方法： </span></span><br><span class="line"><span class="comment">      打电话(call)</span></span><br><span class="line"><span class="comment">      发短信(sendMessage) */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123; </span><br><span class="line">  <span class="comment">//成员变量 </span></span><br><span class="line">  String brand; </span><br><span class="line">  <span class="keyword">int</span> price; </span><br><span class="line">  <span class="comment">//成员方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;打电话&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;发短信&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul><hr><h2 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h2><ul><li><p>创建对象的格式:</p><ul><li>类名 对象名 = new 类名();</li></ul></li><li><p>调用成员的格式</p><ul><li>对象名.成员变量</li><li>对象名.成员方法();</li></ul></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建对象格式：</span></span><br><span class="line"><span class="comment">      类名 对象名 = new 类名();</span></span><br><span class="line"><span class="comment">      范例：Phone p = new Phone(); </span></span><br><span class="line"><span class="comment">      使用对象</span></span><br><span class="line"><span class="comment">          1：使用成员变量 </span></span><br><span class="line"><span class="comment">              格式：对象名.变量名 </span></span><br><span class="line"><span class="comment">              范例：p.brand </span></span><br><span class="line"><span class="comment">          2：使用成员方法 </span></span><br><span class="line"><span class="comment">             格式：对象名.方法名() </span></span><br><span class="line"><span class="comment">             范例：p.call() </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    Phone p = <span class="keyword">new</span> Phone(); <span class="comment">//使用成员变量</span></span><br><span class="line">    System.out.println(p.brand); </span><br><span class="line">    System.out.println(p.price); </span><br><span class="line">    p.brand = <span class="string">&quot;小米&quot;</span>;</span><br><span class="line">    p.price = <span class="number">2999</span>; </span><br><span class="line">    System.out.println(p.brand); </span><br><span class="line">    System.out.println(p.price); </span><br><span class="line">    <span class="comment">//使用成员方法 </span></span><br><span class="line">    p.call(); </span><br><span class="line">    p.sendMessage(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h1><ul><li>成员变量和局部变量的区别<ul><li>类中位置不同 成员变量（类中方法外）局部变量（方法内部或方法声明上）</li><li>内存中位置不同：成员变量（堆内存）局部变量（栈内存）</li><li>生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失）</li><li>初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）</li></ul></li></ul><hr><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><ul><li><h2 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h2><ul><li><p>private是一个修饰符 可以用来修饰成员(成员变量，成员方法)</p></li><li><p>被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</p><ul><li><p>提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</p></li><li><p>提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 学生类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">  <span class="comment">//成员变量 </span></span><br><span class="line">  String name; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">  <span class="comment">//提供get/set方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span> || a&gt;<span class="number">120</span>) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;你给的年龄有误&quot;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      age = a; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//成员方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 学生测试类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//创建对象 </span></span><br><span class="line">    Student s = <span class="keyword">new</span> Student(); </span><br><span class="line">    <span class="comment">//给成员变量赋值 </span></span><br><span class="line">    s.name = <span class="string">&quot;林青霞&quot;</span>; </span><br><span class="line">    s.setAge(<span class="number">30</span>); </span><br><span class="line">    <span class="comment">//调用show方法 </span></span><br><span class="line">    s.show(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr></li><li><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2></li><li><ul><li><p>this修饰的变量指代成员变量， 其主要作用是(区分局部变量和成员变量的重名问题)</p><ul><li><p>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</p></li><li><p>方法的形参没有与成员变量同名，不带this的变量指的是成员变量</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; t</span><br><span class="line">    his.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(name + <span class="string">&quot;,&quot;</span> + age); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>this代表当前调用方法的引用，哪个对象调用的方法，this就代表哪一个对象</p></blockquote></li></ul></li></ul><hr></li><li><h2 id="封装的思想"><a href="#封装的思想" class="headerlink" title="封装的思想"></a>封装的思想</h2><ol><li>封装的概述 是面向对象三大特征之一(封装、继承、多态)是面向对象编程语言对客观世界的模拟，客观世界米成员变量都是隐藏在对象内部的，外界是无法操作的</li><li> 封装原则 将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问 成员变量private，提供对应的getXxx()/setXxx()方法</li><li>封装好处 通过方法来控制成员变量的操作，提高了代码的安全性 把代码用方法进行封装，提高了代码的复用性</li></ol></li></ul><hr><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><ul><li><h2 id="构造方法的概述"><a href="#构造方法的概述" class="headerlink" title="构造方法的概述"></a>构造方法的概述</h2><ul><li><p>构造方法是一种特殊的方法</p></li><li><p>作用</p><ul><li>创建对象</li></ul></li><li><p>格式</p><ul><li><code>public class 类名&#123;修饰符 类名( 参数 ) &#123;&#125; &#125;</code></li></ul></li><li><p>功能</p><ul><li>主要完成对象的初始化</li></ul></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">  <span class="comment">//构造方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;无参构造方法&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(name + <span class="string">&quot;,&quot;</span> + age); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试类 */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象 </span></span><br><span class="line">    Student s = <span class="keyword">new</span> Student(); </span><br><span class="line">    s.show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr></li><li><h2 id="构造方法的注意事项"><a href="#构造方法的注意事项" class="headerlink" title="构造方法的注意事项"></a>构造方法的注意事项</h2><ul><li><p>构造方法创建</p><ul><li>如果没有定义构造方法 系统将会给出一个默认的无参构造方法 如果定义了构造方法 系统将不再提供默认的构造方法</li></ul></li><li><p>构造方法的重载</p><ul><li>如果自定义了带参构造方法 还要使用无参构造方法 就必须再写一个无参构造方法</li></ul></li><li><p>推荐的使用方式</p><ul><li>无论是否使用，都手工书写午餐构造方法</li></ul></li><li><p>重要功能</p><ul><li>可以使用带参构造，为成员变量进行初始化</li></ul></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 学生类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">  <span class="comment">//创建对象 </span></span><br><span class="line">  Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">  s1.show(); </span><br><span class="line">  <span class="comment">//public Student(String name) </span></span><br><span class="line">  Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;java&quot;</span>); </span><br><span class="line">  s2.show(); </span><br><span class="line">  <span class="comment">//public Student(int age) </span></span><br><span class="line">  Student s3 = <span class="keyword">new</span> Student(<span class="number">30</span>);</span><br><span class="line">  s3.show(); </span><br><span class="line">  <span class="comment">//public Student(String name,int age) </span></span><br><span class="line">  Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;java&quot;</span>,<span class="number">30</span>);</span><br><span class="line">  s4.show(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法</title>
      <link href="/2021/11/04/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/11/04/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<center><h1>Java基础语法</h1></center><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li><p>注释是对代码的解释和说明文字, 可以提高程序的可读性, 因此在程序中添加必要的注释文字十分重要。</p><ul><li><p>Java中的注释分为三种</p><p>1、第一种单行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释</span></span><br></pre></td></tr></table></figure><p>2、第二种多行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   这是多行注释文字</span></span><br><span class="line"><span class="comment">   这是多行注释文字</span></span><br><span class="line"><span class="comment">   这是多行注释文字 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：多行注释不能嵌套使用。</span></span><br><span class="line"><span class="comment">//文档注释。文档注释以 /** 开始，以 */ 结束</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul><li>关键字是指java语言赋予了特殊含义的单词<ul><li>关键字的特点<ol><li>关键字母全部小写</li><li>常用的代码编辑器对关键字都有高亮显示，比如现在我们能看到的public、class、static等</li></ol></li></ul></li></ul><hr><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li><p>常量: 在程序运行过程中, 其值不可发生改变的量</p></li><li><p>Java中常量的分类</p><ol><li>字符串常量 用双引号扩起来(可以包括0个、一个或多个), 例如“a”、“abc”、“中国”等</li><li>整数常量 整数, 例如: -10、0、88等</li><li>小数常量 小数、例如: -55、1.0、88.88等</li><li>字符串常量 用单引号括起来的一个字符, 例如:”a”, “5”,  “B”、“中”等</li><li>布尔常量 布尔值, 表示真假, 只有两个值true和false</li><li>空常量 一个特殊的值， 空值, 值为null</li></ol><ul><li><p>除常量以外, 其他常量均可使用输出语句直接输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="number">10</span>); <span class="comment">//输出一个整数</span></span><br><span class="line">    System.out.prinln(<span class="number">5.5</span>);<span class="comment">//输出一个小数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>计算机存储单元<ul><li>我们知道计算机是可以用来存储数据的, 但是无论是内存还是硬盘, 计算机存储设备的最小信息单元叫“位(<strong>bit</strong>)”, 我们又称之“比特位”, 通常用小写的字母“b”表示。而计算机中最基本的存储单元叫“字节(<strong>byte</strong>)”, 通常用大写的字母“B”表示, 字节是由连续的8个位组成。</li><li>除了字节外还有一些常用的存储单位, 其换算单位如下:<ul><li>1B(字节) = 8bit</li><li>1kb = 1024B</li><li>1MB = 1024B</li><li>1GB = 1024MB</li><li>!TB = 1024GB</li></ul></li></ul></li></ul><hr><h2 id="Java中的数据类型"><a href="#Java中的数据类型" class="headerlink" title="Java中的数据类型"></a>Java中的数据类型</h2><ul><li><p>Java是一个强类型语言, Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型两种。</p></li><li><p>Java中的基本数据类型：</p><ul><li><p>​    </p><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">内存占用</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">整数类型</td><td align="center">byte</td><td align="center">1</td><td align="center">-128~127</td></tr><tr><td align="center"></td><td align="center">short</td><td align="center">2</td><td align="center">-32768~32767</td></tr><tr><td align="center"></td><td align="center">int(默认)</td><td align="center">4</td><td align="center">-2的31次方到2的31次方-1</td></tr><tr><td align="center"></td><td align="center">long</td><td align="center">8</td><td align="center">-2的63次方到2的63次方-1</td></tr><tr><td align="center">浮点型</td><td align="center">float</td><td align="center">4</td><td align="center">负数: -3.402823E+38到-1.401298E-45 正数: 1.401298E-45到3.402823E+38</td></tr><tr><td align="center"></td><td align="center">double(默认)</td><td align="center">8</td><td align="center">负数：-1.797693E+308到-4.9000000E-324 正数：4.9000000E-324 到 1.797693E+308</td></tr><tr><td align="center">字符类型</td><td align="center">char</td><td align="center">2</td><td align="center">0-65535</td></tr><tr><td align="center">布尔类型</td><td align="center">boolean</td><td align="center">1</td><td align="center">true、false</td></tr></tbody></table><blockquote><p>“e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。</p><p>在java中整数默认是int类型，浮点数默认是double类型。”</p></blockquote></li></ul></li></ul><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>变量 在程序运行过程中, 其值可以发生改变的量</p></li><li><p>从本质上讲, 变量是内存中的一小块区域, 其值可以在一定范围内变化。</p></li><li><p>变量的定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = 初始化值; <span class="comment">//声明变量并赋值</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">Sytem.out.println(age);</span><br></pre></td></tr></table></figure><ul><li>或者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先声明, 后赋值(使用前赋值即可)</span></span><br><span class="line">数据类型 初始化名;</span><br><span class="line">变量名 = 初始化值;</span><br><span class="line"><span class="keyword">double</span> money;</span><br><span class="line">money = <span class="number">55.5</span>;</span><br><span class="line">System.out.println(money);</span><br></pre></td></tr></table></figure><ul><li>还可以在同一行定义多个数据类型的变量, 中间使用逗号隔开。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>; <span class="comment">// 定义int类型的变量a和b，中间使用逗号隔开</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line"><span class="keyword">int</span> c,d; <span class="comment">// 声明int类型的变量c和d，中间使用逗号隔开</span></span><br><span class="line">c = <span class="number">30</span>;</span><br><span class="line">d = <span class="number">40</span>;</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure><p>通过变量名直接访问即可使用该变量</p></li><li><p><strong>变量使用的注意事项</strong></p><ol><li>在同一对花括号中 变量名不能重复</li><li>变量在使用之前  必须初始化(赋值)</li><li>定义long类型的变量时, 需要在整数的后面加L(大小写均可)。因为整数默认时int类型, 整数太大可能超过int范围</li><li>定义fliat类型的变量时, 需要在小数的后面加F(大小写均可)。因为浮点的默认类型时double, doble的取值范围是大于float的, 类型不兼容</li></ol></li></ul><hr><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li><p>标识符是用户编程时使用的名字, 用于给类、方法、变量、常量、等命名</p></li><li><p>Java中标识符的组成</p><ul><li>由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字</li><li>不能使用java中的关键字作为标识符</li><li>标识符对大小写敏感（区分大小写）</li></ul></li><li><p>Java中标识符的命名约定</p><ul><li>小驼峰式命名：变量名、方法名</li><li>首字母小写，从第二个单词开始每个单词的首字母大写</li><li>大驼峰式命名：类名</li><li>每个单词的首字母都大写</li><li>标识符的命名最好可以做到见名知意<ul><li>例如：username、studentNumber等</li></ul></li></ul></li></ul><hr><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li><p>在Java中，一些数据类型之间是可以互相转换的，分为两种情况: 自动类型转换和强制类型转换</p><ul><li><p> 自动类型转换</p></li><li><p>把一个表示数据范围小的数据或者变量赋值给另一个表示数据范围大的变量。这种转换方式时自动的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> num = <span class="number">10</span>; <span class="comment">//将int类型的10赋值给double类型</span></span><br><span class="line">System.out.println(num); <span class="comment">//输出10.0</span></span><br></pre></td></tr></table></figure></li><li><p>强制类型转换</p><ul><li><p>把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量</p></li><li><p>强制类型转换格式: 目标数据类型 变量名 = (目标数据类型)值或者变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> num1 = <span class="number">5.5</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = (<span class="keyword">int</span>) num1; <span class="comment">// 将double类型的num1强制转换为int类型</span></span><br></pre></td></tr></table></figure><blockquote><p>“表示数据范围从小到大图”</p></blockquote><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202110061045855.png"></p><ul><li><p>说明:</p><ol><li><p>char类型的数据转换为int类型是按照码表上中对应的int值进行计算的。比如在ASCLL码中, ‘a‘对应97</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println(a); <span class="comment">//将输出97</span></span><br></pre></td></tr></table></figure></li><li><p>整数默认的是int类型, byte、short和char类型数据参与运算会自动转换为int类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">byte</span> b3 = b1 + b2;<span class="comment">// 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。</span></span><br><span class="line"><span class="comment">// 修改为: </span></span><br><span class="line"><span class="keyword">int</span> num = b1 + b2;</span><br><span class="line"><span class="comment">// 或者： </span></span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>) (b1 + b2);</span><br></pre></td></tr></table></figure></li><li><p>boolean类型不能与其他基本数据类型相互转换。</p></li></ol></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组</title>
      <link href="/2021/11/04/Java%E6%95%B0%E7%BB%84/"/>
      <url>/2021/11/04/Java%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<center><H1>数组</H1></center><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li><h2 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h2><ul><li>数组就是存储数据长度固定的容器, 存储多个数据的数据类型要一致</li></ul></li><li><h2 id="数组定义格式"><a href="#数组定义格式" class="headerlink" title="数组定义格式"></a>数组定义格式</h2><ul><li><p>第一种</p><ul><li>数据类型[] 数组名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr; </span><br><span class="line"><span class="keyword">double</span>[] arr; </span><br><span class="line"><span class="keyword">char</span>[] arr;</span><br></pre></td></tr></table></figure></li><li><p>第二种</p><ul><li>数据类型 数组名[]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[]; <span class="keyword">double</span> arr[]; <span class="keyword">char</span> arr[];</span><br></pre></td></tr></table></figure></li></ul></li><li><p>什么是动态初始化格式</p><p>数组动态初始化就是只给数组长度，由系统给出默认初始化值</p></li><li><p>动态初始化格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[数组长度];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><blockquote><ul><li>等号左边<ul><li>int:数组的数据类型</li><li>[]:代表这是一个数组</li><li>arr:代表数组的名称</li></ul></li><li>等号右边<ul><li>new:为数组开辟内存空间</li><li>int:数组的数据类型</li><li>[]:代表这是一个数组</li><li>3:代表数组的长度</li></ul></li></ul></blockquote></li><li><h2 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h2><ul><li><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li><p>每一个存储到数组的元素，都会自动的拥有一个编号，从0开始</p></li><li><p>这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素</p></li><li><p>访问数组元素格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引]</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; </span><br><span class="line">    <span class="comment">//输出数组名 </span></span><br><span class="line">    System.out.println(arr); </span><br><span class="line">    <span class="comment">//[I@880ec60 //输出数组中的元素</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><ul><li><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><ul><li>内存是计算机中的重要原件，临时存储区域，作用是运行程序</li><li>我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的</li><li>必须放进内存中才能运行，运行完毕后会清空内存</li><li>Java虚拟机要运行程序，必须要对内存进行空间的分配和管理</li></ul></li><li><h2 id="Java中的内存分配"><a href="#Java中的内存分配" class="headerlink" title="Java中的内存分配"></a>Java中的内存分配</h2><ul><li><p>目前我们只需要记住两个内存, 分别是: 栈内存和堆内存</p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>寄存器</td><td>给cpu与开发无关</td></tr><tr><td>本地方法栈</td><td>JVM在使用操作系统功能的时候使用，与开发无关</td></tr><tr><td>方法区</td><td>存储可以运行的class文件</td></tr><tr><td>堆内存</td><td>存储对象或者数组, new来创建, 都存在堆内存</td></tr><tr><td>方法栈</td><td>方法运行时使用的内存，比如main方法运行，进入方法栈中执行</td></tr></tbody></table></li></ul></li></ul><hr><h1 id="静态初始化格式"><a href="#静态初始化格式" class="headerlink" title="静态初始化格式"></a>静态初始化格式</h1><ul><li><p>完整版格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>, 元素<span class="number">2</span>， ......&#125;;</span><br></pre></td></tr></table></figure></li><li><p>简化版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>, 元素<span class="number">2</span>, ....&#125;;</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//定义数组 </span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; </span><br><span class="line">    <span class="comment">//输出数组名 </span></span><br><span class="line">    System.out.println(arr); </span><br><span class="line">    <span class="comment">//输出数组中的元素 </span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h1><ul><li><p>数组遍历：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest01</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; </span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]); </span><br><span class="line">    System.out.println(arr[<span class="number">4</span>]); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用循环改进代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest01</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//定义数组 </span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;; </span><br><span class="line">    <span class="comment">//使用通用的遍历格式 f</span></span><br><span class="line">    or(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">      System.out.println(arr[x]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法</title>
      <link href="/2021/11/04/Java%E6%96%B9%E6%B3%95/"/>
      <url>/2021/11/04/Java%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<center><H1>方法</H1></center><h1 id="方法的概述"><a href="#方法的概述" class="headerlink" title="方法的概述"></a>方法的概述</h1><ul><li>方法是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集<ul><li>方法必须先创建才可以使用，该过程称为方法的定义</li><li>方法创建后并不是直接可以运存的，需要手动使用后，才执行，该过程成为方法的调用</li></ul></li></ul><hr><h1 id="方法的定义和调用"><a href="#方法的定义和调用" class="headerlink" title="方法的定义和调用"></a>方法的定义和调用</h1><ul><li><h2 id="无参方法的定义和调用"><a href="#无参方法的定义和调用" class="headerlink" title="无参方法的定义和调用"></a>无参方法的定义和调用</h2><ul><li><p>定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 ( ) &#123;</span><br><span class="line">  <span class="comment">// 方法体; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span> <span class="params">( )</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 方法体; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名();</span><br></pre></td></tr></table></figure></li><li><p>范例:</p></li><li><p>```java<br>method();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &gt; 方法必须先定义，后调用，否则程序将报错</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># 带参数的方法定义和调用</span><br><span class="line"></span><br><span class="line">- ## 定义格式</span><br><span class="line"></span><br><span class="line">  - 参数: 由数据类型和变量名组成-数据类型 变量名</span><br><span class="line"></span><br><span class="line">  - 参数范例: int a</span><br><span class="line"></span><br><span class="line">    ```java</span><br><span class="line">    public static void 方法名 (参数1) &#123;</span><br><span class="line">      方法体;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void 方法名 (参数1, 参数2, 参数3...) &#123;</span><br><span class="line">      方法体; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isEvenNumber</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123; </span><br><span class="line">  ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>方法定义时， 参数中的数据类型与变量名都不能缺, 缺少任意一个程序都将报错</li><li><code>方法定义的时候，多个参数之间使用(,)分隔</code></li></ul></blockquote></li><li><p>调用格式</p><ul><li><p>方法名(参数);</p></li><li><p>方法名(参数1， 参数2);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isEvenNumber(<span class="number">10</span>);</span><br><span class="line">getMax(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><ul><li>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错</li></ul></li></ul></li></ul></li></ul><hr><h1 id="行参和实惨"><a href="#行参和实惨" class="headerlink" title="行参和实惨"></a>行参和实惨</h1><ul><li><p>行参：方法定义中的参数</p><ul><li>等同于变量定义的格式, 例如:int number</li></ul></li><li><p>实惨: 方法调用中的参数</p><ul><li>等同于使用变量或常量: 例如: 10 number</li></ul></li></ul><hr><h1 id="带参数返回值方法的定义和调用"><a href="#带参数返回值方法的定义和调用" class="headerlink" title="带参数返回值方法的定义和调用"></a>带参数返回值方法的定义和调用</h1><ul><li><p>定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 数据类型 方法名 ( 参数 ) &#123; </span><br><span class="line">  <span class="keyword">return</span> 数据 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>范例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEvenNumber</span><span class="params">( <span class="keyword">int</span> number )</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span> </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span> ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错</p></blockquote></li><li><p>调用格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法名 ( 参数 );</span><br><span class="line">数据类型 变量名 = 方法名 ( 参数 );</span><br></pre></td></tr></table></figure></li><li><p>范例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isEvenNumber ( <span class="number">5</span> );</span><br><span class="line"><span class="keyword">boolean</span> flag = isEvenNumber ( <span class="number">5</span> );</span><br></pre></td></tr></table></figure><blockquote><p>方法的返回值通常会使用变量接收, 否则该返回值将毫无意义</p></blockquote></li></ul><hr><h1 id="方法的注意事项"><a href="#方法的注意事项" class="headerlink" title="方法的注意事项"></a>方法的注意事项</h1><ol><li>方法不能嵌套</li><li>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</li></ol><hr><h1 id="方法的通用格式"><a href="#方法的通用格式" class="headerlink" title="方法的通用格式"></a>方法的通用格式</h1><ul><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数) &#123; </span><br><span class="line">  方法体; <span class="keyword">return</span> 数据 ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>public static 修饰符<ul><li>返回值类型 方法操作完毕之后返回的数据的数据类型</li><li>如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return</li></ul></li></ul></blockquote><table><thead><tr><th>方法名</th><th>调用方法时候使用的标识</th></tr></thead><tbody><tr><td>参数</td><td>由数据类型和变量名组成，多个参数之间用逗号隔开</td></tr><tr><td>方法体</td><td>完成功能的代码块</td></tr><tr><td>return</td><td>如果方法操作完毕，有数据返回，用于把数据返回给调用者</td></tr></tbody></table></li><li><p>定义方法时要做到两个明确</p><ul><li>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型</li><li>明确参数：主要是明确参数的类型和数量</li></ul></li><li><p>调用方法时的注意:</p><ul><li>void类型方法，直接调用</li><li>非void类型的方法，推荐用变量接收调用</li></ul></li></ul><hr><h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><ul><li><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p></li><li><p>多个方法在同一个类中</p></li><li><p>多个方法具有相同的方法名</p></li><li><p>多个方法的参数不相同，类型不同或者数量不同</p><blockquote><ul><li>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</li><li>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载</li></ul></blockquote></li><li><p>范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a , <span class="keyword">int</span> b)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>错误范例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">  &#125;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; <span class="comment">/*错误原因：重载与返回值无关*/</span> </span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo01</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//方法体 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo02</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123; <span class="comment">/*错误原因：这是两个类的两个fn方法*/</span> </span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="方法的参数传递"><a href="#方法的参数传递" class="headerlink" title="方法的参数传递"></a>方法的参数传递</h1><h2 id="参数基本类型传递"><a href="#参数基本类型传递" class="headerlink" title="参数基本类型传递"></a>参数基本类型传递</h2><ul><li><p>示例</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo01</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">100</span>; </span><br><span class="line">    System.out.println(<span class="string">&quot;调用change方法前：&quot;</span> + number);</span><br><span class="line">    change(number); System.out.println(<span class="string">&quot;调用change方法后：&quot;</span> + number); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123; </span><br><span class="line">    number = <span class="number">200</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>基本数据类型的参数，形式参数的改变，不影响实际参数</p></blockquote></li></ul><h2 id="引用数据类型传递"><a href="#引用数据类型传递" class="headerlink" title="引用数据类型传递"></a>引用数据类型传递</h2><ul><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo02</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;; </span><br><span class="line">    System.out.println(<span class="string">&quot;调用change方法前：&quot;</span> + arr[<span class="number">1</span>]); </span><br><span class="line">    change(arr); </span><br><span class="line">    System.out.println(<span class="string">&quot;调用change方法后：&quot;</span> + arr[<span class="number">1</span>]); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123; </span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">200</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于引用类型的参数 形式参数的改变 影响实际参数的值</p></blockquote></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java环境变量的配置</title>
      <link href="/2021/11/04/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2021/11/04/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<center><h1>Java的环境变量</h1></center><p><strong>操作系统：win10     64位。</strong><br><strong>Java版本是AZUL：1.8</strong></p><ol><li><p>以jdk1.8为例</p><p>根据你的电脑版本下载jdk, 选择你所需要的路径进行安装</p><ul><li>win64位的直接安装exe文件直接双击下一步安装就好了</li><li><a href="https://www.azul.com/downloads/?package=jdk">点我下载jdk1.8</a></li><li><img src="https://gitee.com/airgwl/upic/raw/master//img/202110052234127.png"></li></ul></li><li><p>azul这个公司下发布的jdk是不需要搭建环境变量的</p></li></ol><ol start="3"><li><p>验证jdk的完整性</p><ol><li>打开cmd输入<code>java -version</code> 查看是否有显示版本信息</li></ol><p><img src="https://gitee.com/airgwl/upic/raw/master//img/202110052059481.png"></p></li><li><p>完成✅</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
